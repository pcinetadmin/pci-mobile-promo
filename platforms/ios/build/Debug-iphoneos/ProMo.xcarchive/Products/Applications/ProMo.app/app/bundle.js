require("./runtime.js");require("./vendor.js");module.exports=(global.webpackJsonp=global.webpackJsonp||[]).push([["bundle"],{"./ sync ^\\.\\/app\\.(css|scss|less|sass)$":function(e,t,o){var a={"./app.css":"./app.css"}
function i(e){var t=n(e)
return o(t)}function n(e){if(!o.o(a,e)){var t=new Error("Cannot find module '"+e+"'")
throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=n,e.exports=i,i.id="./ sync ^\\.\\/app\\.(css|scss|less|sass)$"},"./ sync recursive (?<!\\bApp_Resources\\b.*)(?<!\\.\\/\\btests\\b\\/.*?)\\.(xml|css|js|(?<!\\.d\\.)ts|(?<!\\b_[\\w-]*\\.)scss)$":function(e,t,o){var a={"./app-root.xml":"./app-root.xml","./app.css":"./app.css","./app.js":"./app.js","./bundle-config.js":"./bundle-config.js","./committeetypes/committees/committee/committee-page.js":"./committeetypes/committees/committee/committee-page.js","./committeetypes/committees/committee/committee-page.xml":"./committeetypes/committees/committee/committee-page.xml","./committeetypes/committees/committee/committee-view-model.js":"./committeetypes/committees/committee/committee-view-model.js","./committeetypes/committees/committees-page.js":"./committeetypes/committees/committees-page.js","./committeetypes/committees/committees-page.xml":"./committeetypes/committees/committees-page.xml","./committeetypes/committees/committees-view-model.js":"./committeetypes/committees/committees-view-model.js","./committeetypes/committeetypes-page.js":"./committeetypes/committeetypes-page.js","./committeetypes/committeetypes-page.xml":"./committeetypes/committeetypes-page.xml","./committeetypes/committeetypes-view-model.js":"./committeetypes/committeetypes-view-model.js","./companygroups/companygroup/attributes/attributes-page.js":"./companygroups/companygroup/attributes/attributes-page.js","./companygroups/companygroup/attributes/attributes-page.xml":"./companygroups/companygroup/attributes/attributes-page.xml","./companygroups/companygroup/committees/committeemembers/committeemembers-page.js":"./companygroups/companygroup/committees/committeemembers/committeemembers-page.js","./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml":"./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml","./companygroups/companygroup/committees/committeemembers/committeemembers-view-model.js":"./companygroups/companygroup/committees/committeemembers/committeemembers-view-model.js","./companygroups/companygroup/committees/committees-page.js":"./companygroups/companygroup/committees/committees-page.js","./companygroups/companygroup/committees/committees-page.xml":"./companygroups/companygroup/committees/committees-page.xml","./companygroups/companygroup/committees/committees-view-model.js":"./companygroups/companygroup/committees/committees-view-model.js","./companygroups/companygroup/companies/addresses/addresses-page.js":"./companygroups/companygroup/companies/addresses/addresses-page.js","./companygroups/companygroup/companies/addresses/addresses-page.xml":"./companygroups/companygroup/companies/addresses/addresses-page.xml","./companygroups/companygroup/companies/addresses/addresses-view-model.js":"./companygroups/companygroup/companies/addresses/addresses-view-model.js","./companygroups/companygroup/companies/companies-page.js":"./companygroups/companygroup/companies/companies-page.js","./companygroups/companygroup/companies/companies-page.xml":"./companygroups/companygroup/companies/companies-page.xml","./companygroups/companygroup/companies/companies-view-model.js":"./companygroups/companygroup/companies/companies-view-model.js","./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js":"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js","./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml":"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml","./companygroups/companygroup/companies/pacauthorization/pacauthorization-view-model.js":"./companygroups/companygroup/companies/pacauthorization/pacauthorization-view-model.js","./companygroups/companygroup/companygroup-page.js":"./companygroups/companygroup/companygroup-page.js","./companygroups/companygroup/companygroup-page.xml":"./companygroups/companygroup/companygroup-page.xml","./companygroups/companygroup/companygroup-view-model.js":"./companygroups/companygroup/companygroup-view-model.js","./companygroups/companygroup/contacttypes/contacts/contacts-page.js":"./companygroups/companygroup/contacttypes/contacts/contacts-page.js","./companygroups/companygroup/contacttypes/contacts/contacts-page.xml":"./companygroups/companygroup/contacttypes/contacts/contacts-page.xml","./companygroups/companygroup/contacttypes/contacts/contacts-view-model.js":"./companygroups/companygroup/contacttypes/contacts/contacts-view-model.js","./companygroups/companygroup/contacttypes/contacttypes-page.js":"./companygroups/companygroup/contacttypes/contacttypes-page.js","./companygroups/companygroup/contacttypes/contacttypes-page.xml":"./companygroups/companygroup/contacttypes/contacttypes-page.xml","./companygroups/companygroup/contacttypes/contacttypes-view-model.js":"./companygroups/companygroup/contacttypes/contacttypes-view-model.js","./companygroups/companygroup/hierarchy/hierarchy-page.js":"./companygroups/companygroup/hierarchy/hierarchy-page.js","./companygroups/companygroup/hierarchy/hierarchy-page.xml":"./companygroups/companygroup/hierarchy/hierarchy-page.xml","./companygroups/companygroup/hierarchy/hierarchy-view-model.js":"./companygroups/companygroup/hierarchy/hierarchy-view-model.js","./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js":"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js","./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml":"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml","./companygroups/companygroup/meetings/meetingattendees/meetingattendees-view-model.js":"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-view-model.js","./companygroups/companygroup/meetings/meetings-page.js":"./companygroups/companygroup/meetings/meetings-page.js","./companygroups/companygroup/meetings/meetings-page.xml":"./companygroups/companygroup/meetings/meetings-page.xml","./companygroups/companygroup/meetings/meetings-view-model.js":"./companygroups/companygroup/meetings/meetings-view-model.js","./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js":"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js","./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml":"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml","./companygroups/companygroup/metrics/committeemembership/committeemembership-view-model.js":"./companygroups/companygroup/metrics/committeemembership/committeemembership-view-model.js","./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js":"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js","./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml":"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml","./companygroups/companygroup/metrics/meetingattendance/meetingattendance-view-model.js":"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-view-model.js","./companygroups/companygroup/metrics/metrics-page.js":"./companygroups/companygroup/metrics/metrics-page.js","./companygroups/companygroup/metrics/metrics-page.xml":"./companygroups/companygroup/metrics/metrics-page.xml","./companygroups/companygroup/metrics/metrics-view-model.js":"./companygroups/companygroup/metrics/metrics-view-model.js","./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js":"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js","./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml":"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml","./companygroups/companygroup/premiums/invoice/adjustments/adjustments-view-model.js":"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-view-model.js","./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js":"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js","./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml":"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml","./companygroups/companygroup/premiums/invoice/affiliates/affiliates-view-model.js":"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-view-model.js","./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js":"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js","./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml":"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml","./companygroups/companygroup/premiums/invoice/breakdown/breakdown-view-model.js":"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-view-model.js","./companygroups/companygroup/premiums/invoice/invoice-page.js":"./companygroups/companygroup/premiums/invoice/invoice-page.js","./companygroups/companygroup/premiums/invoice/invoice-page.xml":"./companygroups/companygroup/premiums/invoice/invoice-page.xml","./companygroups/companygroup/premiums/invoices-view-model.js":"./companygroups/companygroup/premiums/invoices-view-model.js","./companygroups/companygroup/premiums/lines/lines-page.js":"./companygroups/companygroup/premiums/lines/lines-page.js","./companygroups/companygroup/premiums/lines/lines-page.xml":"./companygroups/companygroup/premiums/lines/lines-page.xml","./companygroups/companygroup/premiums/lines/lines-view-model.js":"./companygroups/companygroup/premiums/lines/lines-view-model.js","./companygroups/companygroup/premiums/lines/written/written-page.js":"./companygroups/companygroup/premiums/lines/written/written-page.js","./companygroups/companygroup/premiums/lines/written/written-page.xml":"./companygroups/companygroup/premiums/lines/written/written-page.xml","./companygroups/companygroup/premiums/lines/written/written-view-model.js":"./companygroups/companygroup/premiums/lines/written/written-view-model.js","./companygroups/companygroup/premiums/premiums-page.js":"./companygroups/companygroup/premiums/premiums-page.js","./companygroups/companygroup/premiums/premiums-page.xml":"./companygroups/companygroup/premiums/premiums-page.xml","./companygroups/companygroup/premiums/premiums-view-model.js":"./companygroups/companygroup/premiums/premiums-view-model.js","./companygroups/companygroup/premiums/states/states-page.js":"./companygroups/companygroup/premiums/states/states-page.js","./companygroups/companygroup/premiums/states/states-page.xml":"./companygroups/companygroup/premiums/states/states-page.xml","./companygroups/companygroup/premiums/states/states-view-model.js":"./companygroups/companygroup/premiums/states/states-view-model.js","./companygroups/companygroup/premiums/states/written/written-page.js":"./companygroups/companygroup/premiums/states/written/written-page.js","./companygroups/companygroup/premiums/states/written/written-page.xml":"./companygroups/companygroup/premiums/states/written/written-page.xml","./companygroups/companygroup/premiums/states/written/written-view-model.js":"./companygroups/companygroup/premiums/states/written/written-view-model.js","./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js":"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js","./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml":"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-view-model.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-view-model.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-view-model.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-view-model.js","./companygroups/companygroup/remarktypes/remarks/remarks-page.js":"./companygroups/companygroup/remarktypes/remarks/remarks-page.js","./companygroups/companygroup/remarktypes/remarks/remarks-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarks-page.xml","./companygroups/companygroup/remarktypes/remarks/remarks-view-model.js":"./companygroups/companygroup/remarktypes/remarks/remarks-view-model.js","./companygroups/companygroup/remarktypes/remarktypes-page.js":"./companygroups/companygroup/remarktypes/remarktypes-page.js","./companygroups/companygroup/remarktypes/remarktypes-page.xml":"./companygroups/companygroup/remarktypes/remarktypes-page.xml","./companygroups/companygroup/remarktypes/remarktypes-view-model.js":"./companygroups/companygroup/remarktypes/remarktypes-view-model.js","./companygroups/companygroups-page.js":"./companygroups/companygroups-page.js","./companygroups/companygroups-page.xml":"./companygroups/companygroups-page.xml","./companygroups/companygroups-view-model.js":"./companygroups/companygroups-view-model.js","./home/home-page.js":"./home/home-page.js","./home/home-page.xml":"./home/home-page.xml","./home/home-view-model.js":"./home/home-view-model.js","./login/login-page.js":"./login/login-page.js","./login/login-page.xml":"./login/login-page.xml","./login/login-view-model.js":"./login/login-view-model.js","./main-page.js":"./main-page.js","./main-page.xml":"./main-page.xml","./people/people-page.js":"./people/people-page.js","./people/people-page.xml":"./people/people-page.xml","./people/people-view-model.js":"./people/people-view-model.js","./people/person/attributes/attributes-page.js":"./people/person/attributes/attributes-page.js","./people/person/attributes/attributes-page.xml":"./people/person/attributes/attributes-page.xml","./people/person/bio/bio-page.js":"./people/person/bio/bio-page.js","./people/person/bio/bio-page.xml":"./people/person/bio/bio-page.xml","./people/person/committees/committees-page.js":"./people/person/committees/committees-page.js","./people/person/committees/committees-page.xml":"./people/person/committees/committees-page.xml","./people/person/committees/committees-view-model.js":"./people/person/committees/committees-view-model.js","./people/person/contacts/contacts-page.js":"./people/person/contacts/contacts-page.js","./people/person/contacts/contacts-page.xml":"./people/person/contacts/contacts-page.xml","./people/person/contacts/contacts-view-model.js":"./people/person/contacts/contacts-view-model.js","./people/person/meetings/meetings-page.js":"./people/person/meetings/meetings-page.js","./people/person/meetings/meetings-page.xml":"./people/person/meetings/meetings-page.xml","./people/person/meetings/meetings-view-model.js":"./people/person/meetings/meetings-view-model.js","./people/person/pacauthorization/pacauthorization-page.js":"./people/person/pacauthorization/pacauthorization-page.js","./people/person/pacauthorization/pacauthorization-page.xml":"./people/person/pacauthorization/pacauthorization-page.xml","./people/person/pacauthorization/pacauthorization-view-model.js":"./people/person/pacauthorization/pacauthorization-view-model.js","./people/person/person-page.js":"./people/person/person-page.js","./people/person/person-page.xml":"./people/person/person-page.xml","./people/person/person-view-model.js":"./people/person/person-view-model.js","./people/person/remarks/remark/remark-page.js":"./people/person/remarks/remark/remark-page.js","./people/person/remarks/remark/remark-page.xml":"./people/person/remarks/remark/remark-page.xml","./people/person/remarks/remarkadd/remarkadd-page.js":"./people/person/remarks/remarkadd/remarkadd-page.js","./people/person/remarks/remarkadd/remarkadd-page.xml":"./people/person/remarks/remarkadd/remarkadd-page.xml","./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js":"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js","./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml":"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml","./people/person/remarks/remarkadd/remarklevel/remarklevel-view-model.js":"./people/person/remarks/remarkadd/remarklevel/remarklevel-view-model.js","./people/person/remarks/remarkadd/remarktype/remarktype-page.js":"./people/person/remarks/remarkadd/remarktype/remarktype-page.js","./people/person/remarks/remarkadd/remarktype/remarktype-page.xml":"./people/person/remarks/remarkadd/remarktype/remarktype-page.xml","./people/person/remarks/remarkadd/remarktype/remarktype-view-model.js":"./people/person/remarks/remarkadd/remarktype/remarktype-view-model.js","./people/person/remarks/remarks-page.js":"./people/person/remarks/remarks-page.js","./people/person/remarks/remarks-page.xml":"./people/person/remarks/remarks-page.xml","./people/person/remarks/remarks-view-model.js":"./people/person/remarks/remarks-view-model.js","./people/person/subscriptiontypes/subscriptions/states/states-page.js":"./people/person/subscriptiontypes/subscriptions/states/states-page.js","./people/person/subscriptiontypes/subscriptions/states/states-page.xml":"./people/person/subscriptiontypes/subscriptions/states/states-page.xml","./people/person/subscriptiontypes/subscriptions/states/states-view-model.js":"./people/person/subscriptiontypes/subscriptions/states/states-view-model.js","./people/person/subscriptiontypes/subscriptions/subscriptions-page.js":"./people/person/subscriptiontypes/subscriptions/subscriptions-page.js","./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml":"./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml","./people/person/subscriptiontypes/subscriptions/subscriptions-view-model.js":"./people/person/subscriptiontypes/subscriptions/subscriptions-view-model.js","./people/person/subscriptiontypes/subscriptiontypes-page.js":"./people/person/subscriptiontypes/subscriptiontypes-page.js","./people/person/subscriptiontypes/subscriptiontypes-page.xml":"./people/person/subscriptiontypes/subscriptiontypes-page.xml","./people/person/subscriptiontypes/subscriptiontypes-view-model.js":"./people/person/subscriptiontypes/subscriptiontypes-view-model.js","./people/person/webaccess/webaccess-page.js":"./people/person/webaccess/webaccess-page.js","./people/person/webaccess/webaccess-page.xml":"./people/person/webaccess/webaccess-page.xml","./people/person/webaccess/webaccess-view-model.js":"./people/person/webaccess/webaccess-view-model.js","./vendor-platform.js":"./vendor-platform.js","./vendor.js":"./vendor.js"}
function i(e){var t=n(e)
return o(t)}function n(e){if(!o.o(a,e)){var t=new Error("Cannot find module '"+e+"'")
throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=n,e.exports=i,i.id="./ sync recursive (?<!\\bApp_Resources\\b.*)(?<!\\.\\/\\btests\\b\\/.*?)\\.(xml|css|js|(?<!\\.d\\.)ts|(?<!\\b_[\\w-]*\\.)scss)$"},"./ sync recursive (root|page|fragment)\\.(xml|css|js|ts|scss)$":function(e,t,o){var a={"./app-root.xml":"./app-root.xml","./committeetypes/committees/committee/committee-page.js":"./committeetypes/committees/committee/committee-page.js","./committeetypes/committees/committee/committee-page.xml":"./committeetypes/committees/committee/committee-page.xml","./committeetypes/committees/committees-page.js":"./committeetypes/committees/committees-page.js","./committeetypes/committees/committees-page.xml":"./committeetypes/committees/committees-page.xml","./committeetypes/committeetypes-page.js":"./committeetypes/committeetypes-page.js","./committeetypes/committeetypes-page.xml":"./committeetypes/committeetypes-page.xml","./companygroups/companygroup/attributes/attributes-page.js":"./companygroups/companygroup/attributes/attributes-page.js","./companygroups/companygroup/attributes/attributes-page.xml":"./companygroups/companygroup/attributes/attributes-page.xml","./companygroups/companygroup/committees/committeemembers/committeemembers-page.js":"./companygroups/companygroup/committees/committeemembers/committeemembers-page.js","./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml":"./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml","./companygroups/companygroup/committees/committees-page.js":"./companygroups/companygroup/committees/committees-page.js","./companygroups/companygroup/committees/committees-page.xml":"./companygroups/companygroup/committees/committees-page.xml","./companygroups/companygroup/companies/addresses/addresses-page.js":"./companygroups/companygroup/companies/addresses/addresses-page.js","./companygroups/companygroup/companies/addresses/addresses-page.xml":"./companygroups/companygroup/companies/addresses/addresses-page.xml","./companygroups/companygroup/companies/companies-page.js":"./companygroups/companygroup/companies/companies-page.js","./companygroups/companygroup/companies/companies-page.xml":"./companygroups/companygroup/companies/companies-page.xml","./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js":"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js","./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml":"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml","./companygroups/companygroup/companygroup-page.js":"./companygroups/companygroup/companygroup-page.js","./companygroups/companygroup/companygroup-page.xml":"./companygroups/companygroup/companygroup-page.xml","./companygroups/companygroup/contacttypes/contacts/contacts-page.js":"./companygroups/companygroup/contacttypes/contacts/contacts-page.js","./companygroups/companygroup/contacttypes/contacts/contacts-page.xml":"./companygroups/companygroup/contacttypes/contacts/contacts-page.xml","./companygroups/companygroup/contacttypes/contacttypes-page.js":"./companygroups/companygroup/contacttypes/contacttypes-page.js","./companygroups/companygroup/contacttypes/contacttypes-page.xml":"./companygroups/companygroup/contacttypes/contacttypes-page.xml","./companygroups/companygroup/hierarchy/hierarchy-page.js":"./companygroups/companygroup/hierarchy/hierarchy-page.js","./companygroups/companygroup/hierarchy/hierarchy-page.xml":"./companygroups/companygroup/hierarchy/hierarchy-page.xml","./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js":"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js","./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml":"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml","./companygroups/companygroup/meetings/meetings-page.js":"./companygroups/companygroup/meetings/meetings-page.js","./companygroups/companygroup/meetings/meetings-page.xml":"./companygroups/companygroup/meetings/meetings-page.xml","./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js":"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js","./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml":"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml","./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js":"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js","./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml":"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml","./companygroups/companygroup/metrics/metrics-page.js":"./companygroups/companygroup/metrics/metrics-page.js","./companygroups/companygroup/metrics/metrics-page.xml":"./companygroups/companygroup/metrics/metrics-page.xml","./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js":"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js","./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml":"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml","./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js":"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js","./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml":"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml","./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js":"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js","./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml":"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml","./companygroups/companygroup/premiums/invoice/invoice-page.js":"./companygroups/companygroup/premiums/invoice/invoice-page.js","./companygroups/companygroup/premiums/invoice/invoice-page.xml":"./companygroups/companygroup/premiums/invoice/invoice-page.xml","./companygroups/companygroup/premiums/lines/lines-page.js":"./companygroups/companygroup/premiums/lines/lines-page.js","./companygroups/companygroup/premiums/lines/lines-page.xml":"./companygroups/companygroup/premiums/lines/lines-page.xml","./companygroups/companygroup/premiums/lines/written/written-page.js":"./companygroups/companygroup/premiums/lines/written/written-page.js","./companygroups/companygroup/premiums/lines/written/written-page.xml":"./companygroups/companygroup/premiums/lines/written/written-page.xml","./companygroups/companygroup/premiums/premiums-page.js":"./companygroups/companygroup/premiums/premiums-page.js","./companygroups/companygroup/premiums/premiums-page.xml":"./companygroups/companygroup/premiums/premiums-page.xml","./companygroups/companygroup/premiums/states/states-page.js":"./companygroups/companygroup/premiums/states/states-page.js","./companygroups/companygroup/premiums/states/states-page.xml":"./companygroups/companygroup/premiums/states/states-page.xml","./companygroups/companygroup/premiums/states/written/written-page.js":"./companygroups/companygroup/premiums/states/written/written-page.js","./companygroups/companygroup/premiums/states/written/written-page.xml":"./companygroups/companygroup/premiums/states/written/written-page.xml","./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js":"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js","./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml":"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js","./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml","./companygroups/companygroup/remarktypes/remarks/remarks-page.js":"./companygroups/companygroup/remarktypes/remarks/remarks-page.js","./companygroups/companygroup/remarktypes/remarks/remarks-page.xml":"./companygroups/companygroup/remarktypes/remarks/remarks-page.xml","./companygroups/companygroup/remarktypes/remarktypes-page.js":"./companygroups/companygroup/remarktypes/remarktypes-page.js","./companygroups/companygroup/remarktypes/remarktypes-page.xml":"./companygroups/companygroup/remarktypes/remarktypes-page.xml","./companygroups/companygroups-page.js":"./companygroups/companygroups-page.js","./companygroups/companygroups-page.xml":"./companygroups/companygroups-page.xml","./home/home-page.js":"./home/home-page.js","./home/home-page.xml":"./home/home-page.xml","./login/login-page.js":"./login/login-page.js","./login/login-page.xml":"./login/login-page.xml","./main-page.js":"./main-page.js","./main-page.xml":"./main-page.xml","./people/people-page.js":"./people/people-page.js","./people/people-page.xml":"./people/people-page.xml","./people/person/attributes/attributes-page.js":"./people/person/attributes/attributes-page.js","./people/person/attributes/attributes-page.xml":"./people/person/attributes/attributes-page.xml","./people/person/bio/bio-page.js":"./people/person/bio/bio-page.js","./people/person/bio/bio-page.xml":"./people/person/bio/bio-page.xml","./people/person/committees/committees-page.js":"./people/person/committees/committees-page.js","./people/person/committees/committees-page.xml":"./people/person/committees/committees-page.xml","./people/person/contacts/contacts-page.js":"./people/person/contacts/contacts-page.js","./people/person/contacts/contacts-page.xml":"./people/person/contacts/contacts-page.xml","./people/person/meetings/meetings-page.js":"./people/person/meetings/meetings-page.js","./people/person/meetings/meetings-page.xml":"./people/person/meetings/meetings-page.xml","./people/person/pacauthorization/pacauthorization-page.js":"./people/person/pacauthorization/pacauthorization-page.js","./people/person/pacauthorization/pacauthorization-page.xml":"./people/person/pacauthorization/pacauthorization-page.xml","./people/person/person-page.js":"./people/person/person-page.js","./people/person/person-page.xml":"./people/person/person-page.xml","./people/person/remarks/remark/remark-page.js":"./people/person/remarks/remark/remark-page.js","./people/person/remarks/remark/remark-page.xml":"./people/person/remarks/remark/remark-page.xml","./people/person/remarks/remarkadd/remarkadd-page.js":"./people/person/remarks/remarkadd/remarkadd-page.js","./people/person/remarks/remarkadd/remarkadd-page.xml":"./people/person/remarks/remarkadd/remarkadd-page.xml","./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js":"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js","./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml":"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml","./people/person/remarks/remarkadd/remarktype/remarktype-page.js":"./people/person/remarks/remarkadd/remarktype/remarktype-page.js","./people/person/remarks/remarkadd/remarktype/remarktype-page.xml":"./people/person/remarks/remarkadd/remarktype/remarktype-page.xml","./people/person/remarks/remarks-page.js":"./people/person/remarks/remarks-page.js","./people/person/remarks/remarks-page.xml":"./people/person/remarks/remarks-page.xml","./people/person/subscriptiontypes/subscriptions/states/states-page.js":"./people/person/subscriptiontypes/subscriptions/states/states-page.js","./people/person/subscriptiontypes/subscriptions/states/states-page.xml":"./people/person/subscriptiontypes/subscriptions/states/states-page.xml","./people/person/subscriptiontypes/subscriptions/subscriptions-page.js":"./people/person/subscriptiontypes/subscriptions/subscriptions-page.js","./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml":"./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml","./people/person/subscriptiontypes/subscriptiontypes-page.js":"./people/person/subscriptiontypes/subscriptiontypes-page.js","./people/person/subscriptiontypes/subscriptiontypes-page.xml":"./people/person/subscriptiontypes/subscriptiontypes-page.xml","./people/person/webaccess/webaccess-page.js":"./people/person/webaccess/webaccess-page.js","./people/person/webaccess/webaccess-page.xml":"./people/person/webaccess/webaccess-page.xml"}
function i(e){var t=n(e)
return o(t)}function n(e){if(!o.o(a,e)){var t=new Error("Cannot find module '"+e+"'")
throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=n,e.exports=i,i.id="./ sync recursive (root|page|fragment)\\.(xml|css|js|ts|scss)$"},"./app-root.xml":function(e,t,o){(function(t){e.exports='<Frame defaultPage="login/login-page"></Frame>',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./app-root.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./app-root.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./app.css":function(e,t,o){(function(t){e.exports={type:"stylesheet",stylesheet:{rules:[{type:"comment",comment:"\nIn NativeScript, the app.css file is where you place CSS rules that\nyou would like to apply to your entire application. Check out\nhttp://docs.nativescript.org/ui/styling for a full list of the CSS\nselectors and properties you can use to style UI components.\n\n/*\nFor example, the following CSS rule changes the font size of all UI\ncomponents that have the btn class name.\n"},{type:"rule",selectors:["ActivityIndicator"],declarations:[{type:"declaration",property:"color",value:"#0075be"}]},{type:"rule",selectors:["Page"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"comment",comment:" margin-top: -20; fix nested frame spacing "}]},{type:"rule",selectors:[".ios .page"],declarations:[{type:"declaration",property:"margin-top",value:"0"}]},{type:"rule",selectors:[".android TextField"],declarations:[{type:"declaration",property:"font",value:"14"}]},{type:"rule",selectors:[".android .login-field"],declarations:[{type:"declaration",property:"margin-bottom",value:"0"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"margin-right",value:"10"},{type:"declaration",property:"margin-top",value:"0"}]},{type:"rule",selectors:[".ios .login-field"],declarations:[{type:"declaration",property:"margin-bottom",value:"10"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"margin-right",value:"15"},{type:"declaration",property:"margin-top",value:"10"}]},{type:"rule",selectors:[".android .login-field-switch"],declarations:[{type:"declaration",property:"margin-bottom",value:"5"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"margin-right",value:"10"},{type:"declaration",property:"margin-top",value:"5"}]},{type:"rule",selectors:[".ios .login-field-switch"],declarations:[{type:"declaration",property:"margin-bottom",value:"5"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"margin-right",value:"10"},{type:"declaration",property:"margin-top",value:"5"}]},{type:"rule",selectors:[".hr-light"],declarations:[{type:"declaration",property:"background-color",value:"#e0e0e0"},{type:"declaration",property:"height",value:"1"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".hr-dark"],declarations:[{type:"declaration",property:"height",value:"1"},{type:"declaration",property:"background-color",value:"#303030"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".android .button"],declarations:[{type:"declaration",property:"background",value:"#ccc"},{type:"declaration",property:"border-color",value:"#999"},{type:"declaration",property:"border-radius",value:"3"},{type:"declaration",property:"border-style",value:"solid"},{type:"declaration",property:"border-width",value:"1"},{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"height",value:"30"},{type:"declaration",property:"margin-bottom",value:"10"},{type:"declaration",property:"margin-top",value:"10"},{type:"declaration",property:"padding",value:"0"}]},{type:"rule",selectors:[".ios .button"],declarations:[{type:"declaration",property:"background",value:"#eee"},{type:"declaration",property:"border-color",value:"#ccc"},{type:"declaration",property:"border-radius",value:"3"},{type:"declaration",property:"border-style",value:"solid"},{type:"declaration",property:"border-width",value:"1"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"18"},{type:"declaration",property:"margin-bottom",value:"10"},{type:"declaration",property:"margin-top",value:"10"},{type:"declaration",property:"padding",value:"5"}]},{type:"rule",selectors:[".android .login-button"],declarations:[{type:"declaration",property:"background",value:"#ccc"},{type:"declaration",property:"border-color",value:"#999"},{type:"declaration",property:"border-radius",value:"3"},{type:"declaration",property:"border-style",value:"solid"},{type:"declaration",property:"border-width",value:"1"},{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"height",value:"30"},{type:"declaration",property:"margin-bottom",value:"10"},{type:"declaration",property:"margin-top",value:"10"},{type:"declaration",property:"padding",value:"5"}]},{type:"rule",selectors:[".ios .login-button"],declarations:[{type:"declaration",property:"background",value:"#0075be"},{type:"declaration",property:"border-color",value:"#0075be"},{type:"declaration",property:"border-radius",value:"3"},{type:"declaration",property:"border-style",value:"solid"},{type:"declaration",property:"border-width",value:"1"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"18"},{type:"declaration",property:"margin-bottom",value:"10"},{type:"declaration",property:"margin-top",value:"10"},{type:"declaration",property:"padding",value:"10"}]},{type:"rule",selectors:[".android .forgot-button"],declarations:[{type:"declaration",property:"background",value:"transparent"},{type:"declaration",property:"border",value:"none"},{type:"declaration",property:"color",value:"#ea092a"},{type:"declaration",property:"font-size",value:"11"}]},{type:"rule",selectors:[".ios .forgot-button"],declarations:[{type:"declaration",property:"background",value:"transparent"},{type:"declaration",property:"border",value:"none"},{type:"declaration",property:"color",value:"#ea092a"},{type:"declaration",property:"font-size",value:"16"}]},{type:"rule",selectors:[".navigation-frame Page"],declarations:[{type:"comment",comment:" margin-top: 20; fix nested frame spacing "},{type:"declaration",property:"background-color",value:"white"}]},{type:"rule",selectors:[".tab"],declarations:[{type:"comment",comment:" padding: 10; "},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"1"},{type:"declaration",property:"background-color",value:"#eeeeee"},{type:"declaration",property:"color",value:"#999"}]},{type:"rule",selectors:[".tab-selected"],declarations:[{type:"declaration",property:"color",value:"#0075be"}]},{type:"rule",selectors:[".android .tab-icon"],declarations:[{type:"declaration",property:"text-align",value:"center"},{type:"declaration",property:"font-size",value:"22"},{type:"declaration",property:"font-family",value:"fontawesome"},{type:"declaration",property:"margin-bottom",value:"5"},{type:"declaration",property:"margin-top",value:"5"}]},{type:"rule",selectors:[".ios .tab-icon"],declarations:[{type:"declaration",property:"text-align",value:"center"},{type:"declaration",property:"font-size",value:"22"},{type:"declaration",property:"font-family",value:"'FontAwesome'"},{type:"declaration",property:"margin-bottom",value:"5"},{type:"declaration",property:"margin-top",value:"5"}]},{type:"rule",selectors:[".tab-label"],declarations:[{type:"declaration",property:"text-align",value:"center"},{type:"declaration",property:"font-size",value:"10"},{type:"declaration",property:"margin-bottom",value:"1"}]},{type:"rule",selectors:[".action-bar-title"],declarations:[{type:"declaration",property:"font-weight",value:"bold"}]},{type:"rule",selectors:[".android .list-view-item"],declarations:[{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"margin-right",value:"10"},{type:"declaration",property:"min-height",value:"38"},{type:"declaration",property:"padding-bottom",value:"5"},{type:"declaration",property:"padding-top",value:"5"}]},{type:"rule",selectors:[".ios .list-view-item"],declarations:[{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"margin-right",value:"20"},{type:"declaration",property:"min-height",value:"44"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".android .list-view-item-small"],declarations:[{type:"declaration",property:"font-size",value:"11"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"margin-right",value:"10"},{type:"declaration",property:"min-height",value:"38"},{type:"declaration",property:"padding-bottom",value:"5"},{type:"declaration",property:"padding-top",value:"5"}]},{type:"rule",selectors:[".ios .list-view-item-small"],declarations:[{type:"declaration",property:"font-size",value:"13"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"margin-right",value:"20"},{type:"declaration",property:"min-height",value:"44"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".rad-list-view-item"],declarations:[{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"comment",comment:" color: #212121; "},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"min-height",value:"44"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".android .list-view-item-header"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"padding-bottom",value:"3"},{type:"declaration",property:"padding-left",value:"10"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"3"}]},{type:"rule",selectors:[".ios .list-view-item-header"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"padding-bottom",value:"5"},{type:"declaration",property:"padding-left",value:"20"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"5"}]},{type:"rule",selectors:[".android .list-view-item-header-separator"],declarations:[{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"margin-left",value:"10"}]},{type:"rule",selectors:[".ios .list-view-item-header-separator"],declarations:[{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"margin-left",value:"20"}]},{type:"rule",selectors:[".android .list-view-item-form"],declarations:[{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-left",value:"10"},{type:"comment",comment:" margin-right: 20; "},{type:"declaration",property:"min-height",value:"38"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".ios .list-view-item-form"],declarations:[{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"20"},{type:"comment",comment:" margin-right: 20; "},{type:"declaration",property:"min-height",value:"44"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".android .list-view-item-form-bottom"],declarations:[{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"min-height",value:"38"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".ios .list-view-item-form-bottom"],declarations:[{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"min-height",value:"44"},{type:"declaration",property:"padding-bottom",value:"8"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"8"}]},{type:"rule",selectors:[".android .list-view-item-form-bottom-short"],declarations:[{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"padding-bottom",value:"4"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"4"}]},{type:"rule",selectors:[".ios .list-view-item-form-bottom-short"],declarations:[{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"padding-bottom",value:"6"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"6"}]},{type:"rule",selectors:[".android .list-view-item-form-short"],declarations:[{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"padding-bottom",value:"4"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"4"}]},{type:"rule",selectors:[".ios .list-view-item-form-short"],declarations:[{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"padding-bottom",value:"6"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"6"}]},{type:"rule",selectors:[".android .list-view-section-header"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"10"},{type:"declaration",property:"height",value:"30"},{type:"declaration",property:"padding-bottom",value:"2"},{type:"declaration",property:"padding-left",value:"10"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"0"}]},{type:"rule",selectors:[".ios .list-view-section-header"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"height",value:"35"},{type:"declaration",property:"padding-bottom",value:"2"},{type:"declaration",property:"padding-left",value:"20"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"0"}]},{type:"rule",selectors:[".android .list-view-section-header-no-height"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"10"},{type:"declaration",property:"padding-bottom",value:"2"},{type:"declaration",property:"padding-left",value:"10"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"5"}]},{type:"rule",selectors:[".ios .list-view-section-header-no-height"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#ddd"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"padding-bottom",value:"2"},{type:"declaration",property:"padding-left",value:"20"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"5"}]},{type:"rule",selectors:[".android .list-view-section-header-no-border"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"10"},{type:"declaration",property:"height",value:"30"},{type:"declaration",property:"padding-bottom",value:"2"},{type:"declaration",property:"padding-left",value:"10"},{type:"declaration",property:"padding-right",value:"10"},{type:"declaration",property:"padding-top",value:"0"}]},{type:"rule",selectors:[".ios .list-view-section-header-no-border"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"height",value:"35"},{type:"declaration",property:"padding-bottom",value:"2"},{type:"declaration",property:"padding-left",value:"20"},{type:"declaration",property:"padding-right",value:"20"},{type:"declaration",property:"padding-top",value:"0"}]},{type:"rule",selectors:[".list-view-section-detail"],declarations:[{type:"declaration",property:"background-color",value:"white"},{type:"declaration",property:"border-top-color",value:"#ddd"},{type:"declaration",property:"border-top-width",value:"0.5"}]},{type:"rule",selectors:[".android .list-view-item-main-top"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"14"}]},{type:"rule",selectors:[".ios .list-view-item-main-top"],declarations:[{type:"declaration",property:"font-size",value:"16"}]},{type:"rule",selectors:[".android .list-view-item-main-top-small"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"13"}]},{type:"rule",selectors:[".ios .list-view-item-main-top-small"],declarations:[{type:"declaration",property:"font-size",value:"15"}]},{type:"rule",selectors:[".android .list-view-item-main"],declarations:[{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".ios .list-view-item-main"],declarations:[{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".android .list-view-item-picker"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".ios .list-view-item-picker"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".android .list-view-item-textview"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"}]},{type:"rule",selectors:[".ios .list-view-item-textview"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"16"}]},{type:"rule",selectors:[".android .list-view-item-left"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".ios .list-view-item-left"],declarations:[{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".android .list-view-item-left-small"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"10"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".ios .list-view-item-left-small"],declarations:[{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".android .list-view-item-left-bold"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".ios .list-view-item-left-bold"],declarations:[{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".android .list-view-item-left-indent"],declarations:[{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"font-style",value:"italic"},{type:"declaration",property:"margin-left",value:"10"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".ios .list-view-item-left-indent"],declarations:[{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"font-style",value:"italic"},{type:"declaration",property:"margin-left",value:"20"},{type:"declaration",property:"text-align",value:"left"}]},{type:"rule",selectors:[".android .list-view-item-right-bordered"],declarations:[{type:"declaration",property:"border-color",value:"black"},{type:"declaration",property:"border-width",value:"1"},{type:"declaration",property:"color",value:"black"},{type:"declaration",property:"min-width",value:"100"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"text-align",value:"right"}]},{type:"rule",selectors:[".ios .list-view-item-right-bordered"],declarations:[{type:"declaration",property:"border-color",value:"black"},{type:"declaration",property:"border-width",value:"1"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"min-width",value:"100"},{type:"declaration",property:"padding",value:"3"},{type:"declaration",property:"text-align",value:"right"}]},{type:"rule",selectors:[".android .list-view-item-right"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"text-align",value:"right"}]},{type:"rule",selectors:[".ios .list-view-item-right"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"text-align",value:"right"}]},{type:"rule",selectors:[".android .list-view-item-right-bold"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"text-align",value:"right"}]},{type:"rule",selectors:[".ios .list-view-item-right-bold"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"text-align",value:"right"}]},{type:"rule",selectors:[".android .list-view-item-email"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"text-decoration",value:"underline"}]},{type:"rule",selectors:[".ios .list-view-item-email"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"text-decoration",value:"underline"}]},{type:"rule",selectors:[".android .list-view-item-sub-email"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"margin-top",value:"3"},{type:"declaration",property:"text-decoration",value:"underline"}]},{type:"rule",selectors:[".ios .list-view-item-sub-email"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-top",value:"3"},{type:"declaration",property:"text-decoration",value:"underline"}]},{type:"rule",selectors:[".android .list-view-item-phone"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"14"}]},{type:"rule",selectors:[".ios .list-view-item-phone"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"16"}]},{type:"rule",selectors:[".android .list-view-item-sub-phone"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"margin-top",value:"5"}]},{type:"rule",selectors:[".ios .list-view-item-sub-phone"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".android .list-view-item-sub-title"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".ios .list-view-item-sub-title"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"font-weight",value:"bold"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".android .list-view-item-sub"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"12"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".ios .list-view-item-sub"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-top",value:"3"}]},{type:"rule",selectors:[".android .fn-list-view-item"],declarations:[{type:"declaration",property:"color",value:"#ccc"},{type:"declaration",property:"font-family",value:"fontawesome"},{type:"declaration",property:"font-size",value:"24"},{type:"declaration",property:"margin-left",value:"10"}]},{type:"rule",selectors:[".ios .fn-list-view-item"],declarations:[{type:"declaration",property:"color",value:"#ccc"},{type:"declaration",property:"font-family",value:"'FontAwesome'"},{type:"declaration",property:"font-size",value:"26"},{type:"declaration",property:"margin-left",value:"10"}]},{type:"rule",selectors:[".android .fn-list-view-item-small"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-family",value:"fontawesome"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-left",value:"10"}]},{type:"rule",selectors:[".ios .fn-list-view-item-small"],declarations:[{type:"declaration",property:"color",value:"#0075be"},{type:"declaration",property:"font-family",value:"'FontAwesome'"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"margin-left",value:"10"}]},{type:"rule",selectors:[".login-background"],declarations:[{type:"comment",comment:" background-color: #0075be; "},{type:"declaration",property:"background-color",value:"white"}]},{type:"rule",selectors:[".login-box"],declarations:[{type:"declaration",property:"border",value:"solid 1px #999"}]},{type:"rule",selectors:[".login-label"],declarations:[{type:"declaration",property:"color",value:"#0075be"}]},{type:"rule",selectors:[".android .scroll-view-item"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"padding-left",value:"10"},{type:"declaration",property:"padding-right",value:"10"}]},{type:"rule",selectors:[".ios .scroll-view-item"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"padding-left",value:"15"},{type:"declaration",property:"padding-right",value:"15"}]},{type:"rule",selectors:[".android .scroll-view-item-bio"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"padding-left",value:"10"},{type:"declaration",property:"padding-right",value:"10"}]},{type:"rule",selectors:[".ios .scroll-view-item-bio"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"16"},{type:"declaration",property:"padding-left",value:"15"},{type:"declaration",property:"padding-right",value:"15"},{type:"declaration",property:"padding-top",value:"15"}]},{type:"rule",selectors:[".bio-label"],declarations:[{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"16"}]},{type:"rule",selectors:[".android .segmented-bar"],declarations:[{type:"declaration",property:"background-color",value:"#33a8f1"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"10"},{type:"declaration",property:"selected-background-color",value:"#0075be"},{type:"comment",comment:" NEEDED "}]},{type:"rule",selectors:[".ios .segmented-bar"],declarations:[{type:"declaration",property:"background-color",value:"#33a8f1"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"14"},{type:"declaration",property:"margin-bottom",value:"10"},{type:"declaration",property:"margin-top",value:"10"},{type:"declaration",property:"selected-background-color",value:"#0075be"},{type:"comment",comment:" NEEDED "}]},{type:"rule",selectors:[".swipe-icons"],declarations:[{type:"declaration",property:"color",value:"#fff"},{type:"comment",comment:" padding-left: 10;\n    padding-right: 10; "},{type:"declaration",property:"width",value:"80"}]},{type:"rule",selectors:[".blue"],declarations:[{type:"declaration",property:"background-color",value:"#0075be"}]},{type:"rule",selectors:[".green"],declarations:[{type:"comment",comment:" background-color: green; "},{type:"declaration",property:"background-color",value:"#35c4af"},{type:"comment",comment:" #0a573d; "}]},{type:"rule",selectors:[".orange"],declarations:[{type:"comment",comment:" background-color: #f68320; "},{type:"declaration",property:"background-color",value:"#e88011"}]},{type:"rule",selectors:[".red"],declarations:[{type:"comment",comment:" background-color: #cc2d30; "},{type:"declaration",property:"background-color",value:"#ea092a"}]},{type:"comment",comment:" .android .switch {\n    color: #cc2d30;\n} "},{type:"rule",selectors:[".ios .switch"],declarations:[{type:"comment",comment:" background-color: #cc2d30; "},{type:"declaration",property:"background-color",value:"#ea092a"}]},{type:"comment",comment:" Switch[checked=true] {\n    color: white ;\n    background-color: #0075be;\n    transform: scale(1.25, 1.25);\n    transform: translate(-5, 0);\n  }\n  \n  Switch[checked=false] {\n    color: gray;\n    background-color: gray;\n  } "},{type:"rule",selectors:[".view-title"],declarations:[{type:"declaration",property:"background-color",value:"#0075be"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"20"},{type:"comment",comment:" height: 44; "},{type:"declaration",property:"padding-bottom",value:"10"},{type:"declaration",property:"padding-top",value:"10"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".view-title-space"],declarations:[{type:"declaration",property:"background-color",value:"#0075be"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"20"},{type:"comment",comment:" height: 44; "},{type:"declaration",property:"padding-bottom",value:"10"},{type:"declaration",property:"padding-top",value:"10"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".view-title-multi"],declarations:[{type:"declaration",property:"background-color",value:"#0075be"},{type:"declaration",property:"color",value:"white"},{type:"declaration",property:"font-size",value:"20"},{type:"comment",comment:" height: 44; "},{type:"declaration",property:"padding-bottom",value:"10"},{type:"declaration",property:"padding-top",value:"10"},{type:"declaration",property:"text-align",value:"center"},{type:"declaration",property:"width",value:"100%"}]},{type:"rule",selectors:[".view-subtitle"],declarations:[{type:"declaration",property:"background-color",value:"#eee"},{type:"declaration",property:"border-bottom-color",value:"#999"},{type:"declaration",property:"border-bottom-width",value:"0.5"},{type:"declaration",property:"color",value:"#666"},{type:"declaration",property:"font-size",value:"18"},{type:"declaration",property:"height",value:"40"},{type:"declaration",property:"width",value:"100%"}]},{type:"comment",comment:"\nIn many cases you may want to use the NativeScript core theme instead\nof writing your own CSS rules. For a full list of class names in the theme\nrefer to http://docs.nativescript.org/ui/theme.\n"},{type:"comment",comment:"@import '~nativescript-theme-core/css/core.light.css';"}],parsingErrors:[]}},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./app.css")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"style",path:"./app.css"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./app.js":function(e,t,o){"use strict"
o.r(t),function(t){o("../node_modules/@nativescript/core/bundle-entry-points.js")
o("../node_modules/@nativescript/webpack/helpers/load-application-css-regular.js")()
{const e=o("../node_modules/@nativescript/webpack/hmr/index.js").hmrUpdate
t.__coreModulesLiveSync=t.__onLiveSync,t.__onLiveSync=function(){e()},t.hmrRefresh=function({type:e,path:o}={}){setTimeout(()=>{t.__coreModulesLiveSync({type:e,path:o})})},e()}const a=o("./ sync recursive (?<!\\bApp_Resources\\b.*)(?<!\\.\\/\\btests\\b\\/.*?)\\.(xml|css|js|(?<!\\.d\\.)ts|(?<!\\b_[\\w-]*\\.)scss)$")
t.registerWebpackModules(a),e.hot.accept(a.id,()=>{console.log("HMR: Accept module '"+a.id+"' from '"+e.i+"'")}),o("./bundle-config.js"),o("../node_modules/@proplugins/nativescript-platform-css/platformcss.js")
const i=o("../node_modules/@nativescript/core/application/index.js")
t.apiLoginUrl="https://sts.apci.org/api/pci/signin/issue",t.apiBaseServiceUrl="https://www.apci.org/pciwebsite/profileapi/",t.scope="http://www.apci.org/",t.token=null,t.personId=null,t.currentUser=null,t.logonId=null,t.isPci=!1,t.isProfileExecutive=!1,t.isProfileManager=!1,t.isProfileAccounting=!1,t.isProfileMembership=!1,t.isProfileEngagement=!1,t.isProfileUser=!1,t.isExecutive="N",t.companyGroupsSearchText="",t.companyGroupsSearchTextCompany="",t.peopleSearchText="",t.peopleSearchTextCompany="",t.peopleSearchTextGroup="",t.remarksSearchText="",t.remarksSearchTextCompany="",t.remarksSearchTextGroup="",i.run({moduleName:"app-root"}),t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./app.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./app.js"})}))}.call(this,o("../node_modules/webpack/buildin/global.js"))},"./bundle-config.js":function(e,t,o){(function(t){{o("../node_modules/@nativescript/core/bundle-entry-points.js")
const e=o("./ sync recursive (root|page|fragment)\\.(xml|css|js|ts|scss)$")
t.registerWebpackModules(e)}t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./bundle-config.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./bundle-config.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committees/committee/committee-page.js":function(e,t,o){(function(a){const i=o("./committeetypes/committees/committee/committee-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({committeeList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Committee",r.getViewById("committeeName").text=s.committeeName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.committeeCode).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},t.onItemTap=function(e){try{const t={moduleName:"people/person/person-page",context:e.view.bindingContext,clearHistory:!1}
p.topmost().navigate(t)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./committeetypes/committees/committee/committee-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./committeetypes/committees/committee/committee-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committees/committee/committee-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="committeeName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ committeeList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <GridLayout columns="*, auto" rows="auto, auto, auto, *">\n                                    <StackLayout row="0" colSpan="2" orientation="horizontal">\n                                        <Label text="{{ fullName }}" textWrap="true" class="list-view-item-main-top" />\n                                        <Label text="&#xf005;" class="fn-list-view-item-small" verticalAlignment="middle" visibility="{{ memberTypeCode === \'M\' ? \'visible\' : \'collapse\' }}" />\n                                    </StackLayout>\n                                    \x3c!-- <Label row="0" colSpan="2" text="{{ fullName }}" textWrap="true" class="list-view-item-main-top" /> --\x3e\n                                    <Label row="1" colSpan="2" text="{{ title }}" textWrap="true" class="list-view-item-sub" />\n                                    <Label row="2" colSpan="2" text="{{ personCompany }}" textWrap="true" class="list-view-item-sub" />\n                                    <Label row="3" col="0" text="{{ designatedMember === \'N\' ? positionCode === 10 ? memberType : position : positionCode === 10 ? memberType : position }}" class="list-view-item-sub" />\n                                    <Label row="3" col="1" text="{{ \'Since \' + startDate }}" class="list-view-item-sub" />\n                                </GridLayout>\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./committeetypes/committees/committee/committee-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./committeetypes/committees/committee/committee-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committees/committee/committee-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"committee/committeemembers?committeeCode="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a
null===e.WebAccessEndDate||0===e.WebAccessEndDate.length?t=null:t=-1===e.WebAccessEndDate.indexOf(" ")?e.WebAccessEndDate:e.WebAccessEndDate.substring(0,e.WebAccessEndDate.indexOf(" "))
a=null===e.BioPlainText||0===e.BioPlainText.length?"":e.BioPlainText+new Array(Math.round(.005*e.BioPlainText.length)).join("\n"),o.push({personId:e.PersonId,prefix:e.Prefix,firstName:e.FirstName,middleName:e.MiddleName,lastName:e.LastName,suffix:e.Suffix,fullName:e.FullName,informalSalutation:e.InformalSalutation,title:e.Title,personCompany:e.PersonCompany,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,webAccessCode:e.WebAccessCode,webAccessGroupType:e.WebAccessGroupType,webAccessEndDate:t,webAccessComment:e.WebAccessComment,webAccess:e.WebAccess,webRegistered:e.WebRegistered,logonId:e.LogonId,departmentId:e.DepartmentId,department:e.Department,supervisorId:e.SupervisorId,supervisor:e.Supervisor,ddScopeId:e.DdScopeId,ddScope:e.DdScope,ddFormatId:e.DdFormatId,ddFormat:e.DdFormat,profileReportStatusCode:e.ProfileReportStatusCode,profileReportStatus:e.ProfileReportStatus,profileChangesNeeded:e.ProfileChangesNeeded,profileReportDate:e.ProfileReportDate,lastLicenseAgreeDate:e.LastLicenseAgreeDate,lastPasswordChangeDate:e.LastPasswordChangeDate,mainAddressesId:e.MainAddressesId,streetAddress:e.StreetAddress,address1:e.Address1,address2:e.Address2,city:e.City,stateCode:e.StateCode,state:e.State,postalCode:e.PostalCode,countryCode:e.CountryCode,country:e.Country,poBox:e.PoBox,poBoxCity:e.PoBoxCity,poBoxStateCode:e.PoBoxStateCode,poBoxState:e.PoBoxState,poBoxPostalCode:e.PoBoxPostalCode,emailAddress:e.EmailAddress,workPhone:e.WorkPhone,extension:e.Extension,cellPhone:e.CellPhone,fax:e.Fax,bio:a,secretaryId:e.SecretaryId,secretary:e.Secretary,secretaryTitle:e.SecretaryTitle,secretaryEmailAddress:e.SecretaryEmailAddress,secretaryWorkPhone:e.SecretaryWorkPhone,secretaryExtension:e.SecretaryExtension,secretaryFax:e.SecretaryFax,committeeListCode:e.CommitteeListCode,committeeList:e.CommitteeList,committeeTypeCode:e.CommitteeTypeCode,committeeType:e.CommitteeType,committeeCode:e.CommitteeCode,committee:e.Committee,positionCode:e.PositionCode,position:e.Position,designatedMember:e.DesignatedMember,memberTypeCode:e.MemberTypeCode,memberType:e.MemberType,startDate:e.StartDate.substring(0,e.StartDate.indexOf(" ")),endDate:e.EndDate.substring(0,e.EndDate.indexOf(" "))})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./committeetypes/committees/committee/committee-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./committeetypes/committees/committee/committee-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committees/committees-page.js":function(e,t,o){(function(a){const i=o("./committeetypes/committees/committees-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({committeesList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Committees",r.getViewById("committeeType").text=s.committeeType,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.committeeListCode,s.committeeTypeCode).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},t.onItemTap=function(e){try{const t={moduleName:"committeetypes/committees/committee/committee-page",context:e.view.bindingContext,clearHistory:!1}
p.topmost().navigate(t)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./committeetypes/committees/committees-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./committeetypes/committees/committees-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committees/committees-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="committeeType" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ committeesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <GridLayout columns="*, auto" rows="auto, *" style="{{ subCommitteeFlag === \'Y\' ? (parentCommitteeTypeCode === \'10\' ? (committeeTypeCode === \'15\' ? \'color: #ea092a; margin-left: 30;\' : committeeTypeCode === \'16\' ? \'color: #0075be; margin-left: 30;\' : \'color: black; margin-left: 30;\') : (committeeTypeCode === \'15\' ? \'color: #ea092a; margin-left: 15;\' : committeeTypeCode === \'16\' ? \'color: #0075be; margin-left: 15;\' : \'color: black; margin-left: 15;\')) : \'color: black; margin-left: 0;\' }}">\n                                    <Label row="0" colSpan="2" text="{{ committeeName }}" textWrap="true" class="list-view-item-main-top" />\n                                    <Label row="1" col="0" text="{{ fullName.length === 0 ? \'No PCI Staff Representative\' : fullName }}" class="list-view-item-sub" style="{{ fullName.length === 0 ? \'font-style: italic;\' : \'font-style: normal;\' }}" />\n                                    <Label row="1" col="1" text="{{ memberCount + \' Members\' }}" class="list-view-item-sub" />\n                                </GridLayout>\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./committeetypes/committees/committees-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./committeetypes/committees/committees-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committees/committees-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"committee/committees?committeeListCode="+e+"&committeeTypeCode="+a+"&isExecutive=Y",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){null!==e.CommitteeCode&&0!==e.CommitteeCode&&o.push({committeeListCode:e.CommitteeListCode,committeeList:e.CommitteeList,committeeTypeCode:e.CommitteeTypeCode,committeeType:e.CommitteeType,committeeStateListCode:e.CommitteeStateListCode,committeeStateList:e.CommitteeStateList,parentCommitteeCode:e.ParentCommitteeCode,parentCommittee:e.ParentCommittee,parentCommitteeTypeCode:e.ParentCommitteeTypeCode,committeeCode:e.CommitteeCode,committeeName:e.CommitteeName,dateFormed:e.DateFormed,stateCode:e.StateCode,stateName:e.StateName,memberCount:e.MemberCount,personId:e.PersonId,fullName:e.FullName,internalReportFlag:e.InternalReportFlag,annualReportFlag:e.AnnualReportFlag,restricted:e.Restricted,includeOnWebsite:e.IncludeOnWebsite,websiteName:e.WebsiteName,websiteText:e.WebsiteText,subCommitteeFlag:e.SubCommitteeFlag})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./committeetypes/committees/committees-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./committeetypes/committees/committees-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committeetypes-page.js":function(e,t,o){(function(a){const i=o("./committeetypes/committeetypes-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s=o("../node_modules/@nativescript/core/ui/frame/index.js"),p=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),c=new i([]),l=new n.fromObject({committeeTypesList:c,isLoading:!1})
t.onNavigatingTo=function(e){try{(r=e.object).actionBar.title="Committees",0===c.length&&(l.set("isLoading",!0),c.load().then((function(){l.set("isLoading",!1)}))),r.bindingContext=l}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{const t={moduleName:"committeetypes/committees/committees-page",context:e.view.bindingContext,clearHistory:!1}
s.topmost().navigate(t)}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./committeetypes/committeetypes-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./committeetypes/committeetypes-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committeetypes-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar" />\n    \n    <GridLayout columns="*" rows="*" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top">\n            <ListView items="{{ committeeTypesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ committeeType }}" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="1" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./committeetypes/committeetypes-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./committeetypes/committeetypes-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./committeetypes/committeetypes-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(){return i.request({url:t.apiBaseServiceUrl+"committee/committeetypes?committeeListCode=1&isExecutive=Y",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){null!==e.CommitteeTypeCode&&0!==e.CommitteeTypeCode&&o.push({committeeListCode:e.CommitteeListCode,committeeList:e.CommitteeList,committeeTypeCode:e.CommitteeTypeCode,committeeType:e.CommitteeType})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./committeetypes/committeetypes-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./committeetypes/committeetypes-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/attributes/attributes-page.js":function(e,t,o){(function(a){o("../node_modules/@nativescript/core/data/observable/index.js")
var i=o("../node_modules/@nativescript/core/ui/frame/index.js")
t.onNavigatingTo=function(e){const t=e.object
var o=t.navigationContext
t.actionBar.title="Attributes",t.bindingContext=o},t.onBackTap=function(e){try{i.topmost().goBack()}catch(e){dialogs.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/attributes/attributes-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/attributes/attributes-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/attributes/attributes-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <ScrollView>\n        <GridLayout columns="*" rows="auto, *" width="100%">\n            <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n                <Label id="companyName" text="{{ companyName }}" horizontalAlignment="center" />\n            </StackLayout>\n            <StackLayout row="1" col="0">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Account Manager" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ accountManager }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="COMPANY INFORMATION" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Status" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ status }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Joined PCI" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ companyFoundedDate }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Membership" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ membershipType }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="AM Best #" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ numberedAmBest }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="NAIC #" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ numberedNaic }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="PCI #" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ numberedNaii }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="State Domicile" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ domiciledState }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Country Domicile" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ domiciledCountry }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Marketing Type" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ marketingType }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Structure" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ structure }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Affiliations" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ affiliations }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="WEB ACCESS INFORMATION" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Web Access" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ webAccess }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Expiration Date" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ webAccessEndDate }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="PARENT/HOLDING COMPANY" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Name" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ holdCompany }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="COMPANY MAPPING" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Name" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ mapCompany }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Auto Selection" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ autoCoSelect }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="INCLUDE COMPANY IN PROFILE?" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Included" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ inclinProfile }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Date Removed" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ compRemovedDate }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="" class="list-view-item-left" />\n                    <Label row="0" col="1" text="" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n        </GridLayout>\n    </ScrollView>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/attributes/attributes-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/attributes/attributes-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/committees/committeemembers/committeemembers-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/committees/committeemembers/committeemembers-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({committeeMembersList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Committee"
var t=r.getViewById("companyName"),o=r.getViewById("committee")
t.text=s.companyName,o.text=s.committee,e.isBackNavigation||(m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,s.committeeCode).then((function(){d.set("isLoading",!1)})),r.bindingContext=d)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{var t=e.view.bindingContext
if(!t.isDeleted){const e={moduleName:"people/person/person-page",context:t,clearHistory:!1}
c.topmost().navigate(e)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/committees/committeemembers/committeemembers-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/committees/committeemembers/committeemembers-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" class="view-subtitle">\n            <Label id="committee" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ committeeMembersList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <GridLayout columns="*, auto" rows="auto, auto, auto, *">\n                                    <StackLayout row="0" colSpan="2" orientation="horizontal">\n                                        <Label text="{{ fullName }}" textWrap="true" class="list-view-item-main-top" />\n                                        <Label text="&#xf005;" class="fn-list-view-item-small" verticalAlignment="middle" visibility="{{ memberTypeCode === \'M\' ? \'visible\' : \'collapse\' }}" />\n                                    </StackLayout>\n                                    <Label row="1" colSpan="2" text="{{ title }}" textWrap="true" class="list-view-item-sub" />\n                                    <Label row="2" colSpan="2" text="{{ personCompany }}" textWrap="true" class="list-view-item-sub" visibility="{{ personCompany !== companyName ? \'visible\' : \'collapse\' }}" />\n                                    <Label row="3" col="0" text="{{ designatedMember === \'N\' ? positionCode === 10 ? memberType : position : positionCode === 10 ? memberType : position }}" class="list-view-item-sub" />\n                                    <Label row="3" col="1" text="{{ endDate === null ? \'Since \' + startDate : startDate + \' to \' + endDate }}" class="list-view-item-sub" />\n                                </GridLayout>\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ isDeleted ? \'collapse\' : \'visible\' }}" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/committees/committeemembers/committeemembers-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/committees/committeemembers/committeemembers-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companycommitteemembers?companyId="+e+"&isGroup="+a+"&committeeCode="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a,i,n,r=!1;(e.FullName.indexOf("(Deleted)")>0&&(r=!0),t=null===e.StartDate||0===e.StartDate.length?null:e.StartDate.substring(0,e.StartDate.indexOf(" ")),a=null===e.EndDate||0===e.EndDate.length?null:e.EndDate.substring(0,e.EndDate.indexOf(" ")),null===e.WebAccessEndDate||0===e.WebAccessEndDate.length)?i=null:i=-1===e.WebAccessEndDate.indexOf(" ")?e.WebAccessEndDate:e.WebAccessEndDate.substring(0,e.WebAccessEndDate.indexOf(" "))
n=null===e.BioPlainText||0===e.BioPlainText.length?"":e.BioPlainText+new Array(Math.round(.005*e.BioPlainText.length)).join("\n"),o.push({personId:e.PersonId,prefix:e.Prefix,firstName:e.FirstName,middleName:e.MiddleName,lastName:e.LastName,suffix:e.Suffix,fullName:e.FullName,informalSalutation:e.InformalSalutation,title:e.Title,personCompany:e.PersonCompany,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,webAccessCode:e.WebAccessCode,webAccessGroupType:e.WebAccessGroupType,webAccessEndDate:i,webAccessComment:e.WebAccessComment,webAccess:e.WebAccess,webRegistered:e.WebRegistered,logonId:e.LogonId,departmentId:e.DepartmentId,department:e.Department,supervisorId:e.SupervisorId,supervisor:e.Supervisor,ddScopeId:e.DdScopeId,ddScope:e.DdScope,ddFormatId:e.DdFormatId,ddFormat:e.DdFormat,profileReportStatusCode:e.ProfileReportStatusCode,profileReportStatus:e.ProfileReportStatus,profileChangesNeeded:e.ProfileChangesNeeded,profileReportDate:e.ProfileReportDate,lastLicenseAgreeDate:e.LastLicenseAgreeDate,lastPasswordChangeDate:e.LastPasswordChangeDate,mainAddressesId:e.MainAddressesId,streetAddress:e.StreetAddress,address1:e.Address1,address2:e.Address2,city:e.City,stateCode:e.StateCode,state:e.State,postalCode:e.PostalCode,countryCode:e.CountryCode,country:e.Country,poBox:e.PoBox,poBoxCity:e.PoBoxCity,poBoxStateCode:e.PoBoxStateCode,poBoxState:e.PoBoxState,poBoxPostalCode:e.PoBoxPostalCode,emailAddress:e.EmailAddress,workPhone:e.WorkPhone,extension:e.Extension,cellPhone:e.CellPhone,fax:e.Fax,bio:n,secretaryId:e.SecretaryId,secretary:e.Secretary,secretaryTitle:e.SecretaryTitle,secretaryEmailAddress:e.SecretaryEmailAddress,secretaryWorkPhone:e.SecretaryWorkPhone,secretaryExtension:e.SecretaryExtension,secretaryFax:e.SecretaryFax,committeeListCode:e.CommitteeListCode,committeeList:e.CommitteeList,committeeTypeCode:e.CommitteeTypeCode,committeeType:e.CommitteeType,committeeCode:e.CommitteeCode,committee:e.Committee,positionCode:e.PositionCode,position:e.Position,designatedMember:e.DesignatedMember,memberTypeCode:e.MemberTypeCode,memberType:e.MemberType,startDate:t,endDate:a,isDeleted:r})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/committees/committeemembers/committeemembers-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/committees/committeemembers/committeemembers-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/committees/committees-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/committees/committees-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({committeesList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Committees",r.getViewById("companyName").text=s.companyName,e.isBackNavigation}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onSelectedIndexChanged=function(e){try{var t=e.newIndex+1
m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,t).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{var t=e.view.bindingContext
t.isGroup=p
const o={moduleName:"companygroups/companygroup/committees/committeemembers/committeemembers-page",context:t,clearHistory:!1}
c.topmost().navigate(o)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/committees/committees-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/committees/committees-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/committees/committees-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center">\n            <SegmentedBar class="segmented-bar" selectedIndexChanged="onSelectedIndexChanged">\n                <SegmentedBar.items>\n                    <SegmentedBarItem title="Committees" />\n                    <SegmentedBarItem title="Contact Lists" />\n                    <SegmentedBarItem title="Temporary Lists" />\n                </SegmentedBar.items>\n            </SegmentedBar>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ committeesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ committee }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/committees/committees-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/committees/committees-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/committees/committees-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companycommittees?companyId="+e+"&isGroup="+a+"&committeeListCode="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,committeeCode:e.CommitteeCode,committee:e.Committee})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/committees/committees-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/committees/committees-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/addresses/addresses-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/companies/addresses/addresses-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({addressesList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Addresses",r.getViewById("companyName").text=s.companyName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.companyId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/companies/addresses/addresses-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/companies/addresses/addresses-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/addresses/addresses-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ addressesList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout class="list-view-item">\n                        <StackLayout visibility="{{ city !== null &amp;&amp; city.length > 0 ? \'visible\' : \'collapse\' }}">\n                            <StackLayout orientation="horizontal">\n                                <Label text="{{ streetAddress }}" textWrap="true" class="list-view-item-main-top" />\n                                <Label text="&#xf005;" class="fn-list-view-item-small" verticalAlignment="middle" visibility="{{ primaryAddress === \'1\' ? \'visible\' : \'collapse\' }}" />\n                            </StackLayout>\n                            <Label text="{{ city + \', \' + stateCode + \' \' + postalCode }}" textWrap="true" class="list-view-item-main" />\n                            <Label text="{{ phoneNumber }}" class="list-view-item-main" />\n                        </StackLayout>\n                        <StackLayout visibility="{{ city !== null &amp;&amp; city.length > 0 &amp;&amp; poBoxCityCode !== null &amp;&amp; poBoxCityCode.length > 0 ? \'visible\' : \'collapse\' }}">\n                            <Label text=" " textWrap="true" class="list-view-item-main" />\n                        </StackLayout>\n                        <StackLayout visibility="{{ poBoxCityCode !== null &amp;&amp; poBoxCityCode.length > 0 ? \'visible\' : \'collapse\' }}">\n                            <Label text="{{ poBox }}" textWrap="true" class="list-view-item-main" />\n                            <Label text="{{ poBoxCityCode + \', \' + poBoxStateCode + \' \' + poBoxPostalCode }}" textWrap="true" class="list-view-item-main" />\n                        </StackLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companies/addresses/addresses-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/companies/addresses/addresses-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/addresses/addresses-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"company/companyaddresses?companyId="+e+"&isGroup=N",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({mainAddressesId:e.MainAddressesId,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,streetAddress:e.StreetAddress,suite:e.Suite,city:e.City,stateCode:e.StateCode,countryCode:e.CountryCode,postalCode:e.PostalCode,poBox:e.PoBox,poBoxCityCode:e.PoBoxCityCode,poBoxStateCode:e.PoBoxStateCode,poBoxPostalCode:e.PoBoxPostalCode,primaryAddress:e.PrimaryAddress,phoneNumber:e.PhoneNumber})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companies/addresses/addresses-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/companies/addresses/addresses-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/companies-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/companies/companies-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c,l=o("../node_modules/@nativescript/core/ui/frame/index.js"),m=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),d=new i([]),u=new n.fromObject({companiesList:d,isLoading:!1})
t.onNavigatingTo=function(e){try{switch(r=e.object,s=r.navigationContext,p=s.isGroup,c=s.loadData){case"pacauthorization":r.actionBar.title="Y"===p?"Group PAC":"Company PAC"
break
case"addresses":r.actionBar.title="Y"===p?"Group Addresses":"Company Addresses"
break
default:r.actionBar.title="Y"===p?"Group PAC":"Company PAC"}r.getViewById("companyName").text=s.companyName,e.isBackNavigation||(d.empty(),u.set("isLoading",!0),d.load(c,s.companyId,p).then((function(){u.set("isLoading",!1)})),r.bindingContext=u)}catch(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{l.topmost().goBack()}catch(e){m.alert(e)}},t.onItemTap=function(e){try{var t,o=e.view.bindingContext
switch(o.isGroup=p,c){case"pacauthorization":t="companygroups/companygroup/companies/pacauthorization/pacauthorization-page"
break
case"addresses":t="companygroups/companygroup/companies/addresses/addresses-page"
break
default:t="companygroups/companygroup/companies/pacauthorization/pacauthorization-page"}const a={moduleName:t,context:o,clearHistory:!1}
l.topmost().navigate(a)}catch(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/companies/companies-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/companies/companies-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/companies-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ companiesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ companyName }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companies/companies-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/companies/companies-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/companies-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){var s
switch(e){case"pacauthorization":s=t.apiBaseServiceUrl+"company/companypaceligiblecompanies?companyId="+a+"&isGroup="+r
break
case"addresses":s=t.apiBaseServiceUrl+"company/companyaddresscompanies?companyId="+a+"&isGroup="+r
break
default:s=t.apiBaseServiceUrl+"company/companypaceligiblecompanies?companyId="+a+"&isGroup="+r}return i.request({url:s,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companies/companies-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/companies/companies-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/companies/pacauthorization/pacauthorization-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({pacAuthorizationList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="PAC Authorization",r.getViewById("companyName").text=s.companyName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.companyId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ pacAuthorizationList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="auto, auto, *" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ year }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&nbsp;&nbsp;&nbsp;" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="2" text="{{ eligible === \'Y\' ? \'Authorized\' : eligible === \'N\' ? \'Not Authorized\' : \'Not Reported\' }}" style="{{ eligible === \'Y\' ? \'\' : eligible === \'N\' ? \'\' : \'color: #666; font-style: italic;\' }}" class="list-view-item-main-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/companies/pacauthorization/pacauthorization-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companies/pacauthorization/pacauthorization-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"company/companypaceligible?companyId="+e+"&isGroup=N",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,year:e.Year,eligible:e.Eligible,pacGoal:e.PacGoal,pacStartDate:e.PacStartDate,fullName:e.FullName,companyPacEligibleId:e.CompanyPacEligibleId})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companies/pacauthorization/pacauthorization-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/companies/pacauthorization/pacauthorization-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companygroup-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/companygroup-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({companyGroupList:m,isLoading:!1})
t.onNavigatingTo=function(e){r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Y"===p?"Group":"Company",r.getViewById("companyName").text=s.companyName,e.isBackNavigation||(m.empty(),m.load(p),r.bindingContext=d)},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{var t=e.index,o=m.getItem(t)
s.isGroup=p,s.loadData=o.loadData
const a={moduleName:o.navigateTo,context:s,clearHistory:!1}
c.topmost().navigate(a)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/companygroup-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/companygroup-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companygroup-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" width="100%">\n            <ListView items="{{ companyGroupList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ title }}" verticalAlignment="middle" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" verticalAlignment="middle" class="fn-list-view-item" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companygroup-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/companygroup-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/companygroup-view-model.js":function(e,t,o){(function(t){var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray
e.exports=function(e){const o=new a(e)
return o.load=function(e){var a,i,n
a=t.isProfileAccounting?"Premiums & Assessments":"Premiums","Y"===e?(i="companygroups/companygroup/companies/companies-page",n="companygroups/companygroup/companies/companies-page"):(i="companygroups/companygroup/companies/pacauthorization/pacauthorization-page",n="companygroups/companygroup/companies/addresses/addresses-page"),(t.isProfileEngagement?[{title:"Attributes",navigateTo:"companygroups/companygroup/attributes/attributes-page",loadData:""},{title:"Group Membership",navigateTo:"companygroups/companygroup/hierarchy/hierarchy-page",loadData:""},{title:"People",navigateTo:"people/people-page",loadData:""},{title:"Contacts",navigateTo:"companygroups/companygroup/contacttypes/contacttypes-page",loadData:""},{title:"Remarks",navigateTo:"companygroups/companygroup/remarktypes/remarktypes-page",loadData:""},{title:a,navigateTo:"companygroups/companygroup/premiums/premiums-page",loadData:""},{title:"Committees / Contact Lists",navigateTo:"companygroups/companygroup/committees/committees-page",loadData:""},{title:"Meetings",navigateTo:"companygroups/companygroup/meetings/meetings-page",loadData:""},{title:"Metrics",navigateTo:"companygroups/companygroup/metrics/metrics-page",loadData:""},{title:"PAC Authorization",navigateTo:i,loadData:"pacauthorization"},{title:"Addresses",navigateTo:n,loadData:"addresses"}]:[{title:"Attributes",navigateTo:"companygroups/companygroup/attributes/attributes-page",loadData:""},{title:"Group Membership",navigateTo:"companygroups/companygroup/hierarchy/hierarchy-page",loadData:""},{title:"People",navigateTo:"people/people-page",loadData:""},{title:"Contacts",navigateTo:"companygroups/companygroup/contacttypes/contacttypes-page",loadData:""},{title:"Remarks",navigateTo:"companygroups/companygroup/remarktypes/remarktypes-page",loadData:""},{title:a,navigateTo:"companygroups/companygroup/premiums/premiums-page",loadData:""},{title:"Committees / Contact Lists",navigateTo:"companygroups/companygroup/committees/committees-page",loadData:""},{title:"Meetings",navigateTo:"companygroups/companygroup/meetings/meetings-page",loadData:""},{title:"Metrics",navigateTo:"companygroups/companygroup/metrics/metrics-page",loadData:""},{title:"Addresses",navigateTo:n,loadData:"addresses"}]).forEach((function(e){o.push({title:e.title,navigateTo:e.navigateTo,loadData:e.loadData})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/companygroup-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/companygroup-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/contacttypes/contacts/contacts-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/contacttypes/contacts/contacts-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({contactsList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title=s.contactType,r.getViewById("companyName").text=s.companyName,e.isBackNavigation||(m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,s.contactCode).then((function(){d.set("isLoading",!1)})),r.bindingContext=d)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{const t={moduleName:"people/person/person-page",context:e.view.bindingContext,clearHistory:!1}
c.topmost().navigate(t)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/contacttypes/contacts/contacts-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/contacttypes/contacts/contacts-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/contacttypes/contacts/contacts-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ contactsList }}" itemTap="onItemTap" height="100%" separatorColor="transparent">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <StackLayout class="list-view-item-header" visibility="{{ isGroup === \'Y\' &amp;&amp; showCompanyHeader ? \'visible\' : \'collapse\' }}">\n                            <Label text="{{ companyName }}" textWrap="true" />\n                        </StackLayout>\n                        <StackLayout class="list-view-item-header-separator" visibility="{{ showCompanyHeader ? \'collapse\' : \'visible\' }}"></StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <StackLayout orientation="horizontal">\n                                    <Label text="{{ fullName }}" textWrap="true" class="list-view-item-main-top" />\n                                    <Label text="&#xf005;" class="fn-list-view-item-small" verticalAlignment="middle" visibility="{{ primaryRep === \'1\' ? \'visible\' : \'collapse\' }}" />\n                                </StackLayout>\n                                <Label text="{{ title }}" textWrap="true" class="list-view-item-sub" />\n                                <Label text="{{ personCompany }}" textWrap="true" class="list-view-item-sub" visibility="{{ personCompany !== companyName ? \'visible\' : \'collapse\' }}" />\n                                <Label text="{{ workPhone }}" class="list-view-item-sub" visibility="{{ workPhone.length === 0 ? \'collapse\' : \'visible\' }}" />\n                                <Label text="{{ emailAddress }}" class="list-view-item-sub" visibility="{{ emailAddress.length === 0 ? \'collapse\' : \'visible\' }}" />\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/contacttypes/contacts/contacts-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/contacttypes/contacts/contacts-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/contacttypes/contacts/contacts-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companycontacts?companyId="+e+"&isGroup="+a+"&contactCode="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString(),i=JSON.parse(t),n=""
i.forEach((function(e){var t,i,r=!1;(n!==e.CompanyName&&(r=!0),null===e.WebAccessEndDate||0===e.WebAccessEndDate.length)?t=null:t=-1===e.WebAccessEndDate.indexOf(" ")?e.WebAccessEndDate:e.WebAccessEndDate.substring(0,e.WebAccessEndDate.indexOf(" "))
i=null===e.BioPlainText||0===e.BioPlainText.length?"":e.BioPlainText+new Array(Math.round(.005*e.BioPlainText.length)).join("\n"),o.push({personId:e.PersonId,prefix:e.Prefix,firstName:e.FirstName,middleName:e.MiddleName,lastName:e.LastName,suffix:e.Suffix,fullName:e.FullName,informalSalutation:e.InformalSalutation,title:e.Title,personCompany:e.PersonCompany,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,webAccessCode:e.WebAccessCode,webAccessGroupType:e.WebAccessGroupType,webAccessEndDate:t,webAccessComment:e.WebAccessComment,webAccess:e.WebAccess,webRegistered:e.WebRegistered,logonId:e.LogonId,departmentId:e.DepartmentId,department:e.Department,supervisorId:e.SupervisorId,supervisor:e.Supervisor,ddScopeId:e.DdScopeId,ddScope:e.DdScope,ddFormatId:e.DdFormatId,ddFormat:e.DdFormat,profileReportStatusCode:e.ProfileReportStatusCode,profileReportStatus:e.ProfileReportStatus,profileChangesNeeded:e.ProfileChangesNeeded,profileReportDate:e.ProfileReportDate,lastLicenseAgreeDate:e.LastLicenseAgreeDate,lastPasswordChangeDate:e.LastPasswordChangeDate,mainAddressesId:e.MainAddressesId,streetAddress:e.StreetAddress,address1:e.Address1,address2:e.Address2,city:e.City,stateCode:e.StateCode,state:e.State,postalCode:e.PostalCode,countryCode:e.CountryCode,country:e.Country,poBox:e.PoBox,poBoxCity:e.PoBoxCity,poBoxStateCode:e.PoBoxStateCode,poBoxState:e.PoBoxState,poBoxPostalCode:e.PoBoxPostalCode,emailAddress:e.EmailAddress,workPhone:e.WorkPhone,extension:e.Extension,cellPhone:e.CellPhone,fax:e.Fax,bio:i,secretaryId:e.SecretaryId,secretary:e.Secretary,secretaryTitle:e.SecretaryTitle,secretaryEmailAddress:e.SecretaryEmailAddress,secretaryWorkPhone:e.SecretaryWorkPhone,secretaryExtension:e.SecretaryExtension,secretaryFax:e.SecretaryFax,contactCode:e.ContactCode,contactType:e.ContactType,primaryRep:e.PrimaryRep,sortOrder:e.SortOrder,isGroup:a,showCompanyHeader:r}),n=e.CompanyName}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/contacttypes/contacts/contacts-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/contacttypes/contacts/contacts-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/contacttypes/contacttypes-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/contacttypes/contacttypes-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({contactTypesList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Contact Types",r.getViewById("companyName").text=s.companyName,m.empty(),d.set("isLoading",!0),m.load(s.companyId,p).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{var t=e.view.bindingContext
t.isGroup=p
const o={moduleName:"companygroups/companygroup/contacttypes/contacts/contacts-page",context:t,clearHistory:!1}
c.topmost().navigate(o)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/contacttypes/contacttypes-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/contacttypes/contacttypes-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/contacttypes/contacttypes-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ contactTypesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ contactType }}" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/contacttypes/contacttypes-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/contacttypes/contacttypes-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/contacttypes/contacttypes-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"company/companycontacttypes?companyId="+e+"&isGroup="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,contactCode:e.ContactCode,contactType:e.ContactType,sortOrder:e.SortOrder})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/contacttypes/contacttypes-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/contacttypes/contacttypes-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/hierarchy/hierarchy-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/hierarchy/hierarchy-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s=o("../node_modules/@nativescript/core/ui/frame/index.js"),p=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),c=new i([]),l=new n.fromObject({hierarchyList:c,isLoading:!1})
t.onNavigatingTo=function(e){try{(r=e.object).actionBar.title="Group Membership"
var t=r.navigationContext
r.getViewById("companyName").text=t.companyName,e.isBackNavigation||(c.empty(),l.set("isLoading",!0),c.load(t.companyId).then((function(){l.set("isLoading",!1)})),r.bindingContext=l)}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{s.topmost().goBack()}catch(e){p.alert(e)}},t.onItemTap=function(e){try{var t=e.view.bindingContext
t.isGroup="N"
const o={moduleName:"companygroups/companygroup/companygroup-page",context:t,clearHistory:!1}
s.topmost().navigate(o)}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/hierarchy/hierarchy-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/hierarchy/hierarchy-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/hierarchy/hierarchy-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ hierarchyList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <Label text="{{ companyName }}" textWrap="true" style="{{ subGroupFlag === \'N\' ? \'margin-left: 30;\' : subGroupFlag === \'Y\' ? \'margin-left: 15;\' : \'margin-left: 0;\' }}" class="list-view-item-main-top" />\n                                <Label text="{{ membershipType }}" style="{{ subGroupFlag === \'N\' ? \'margin-left: 30;\' : subGroupFlag === \'Y\' ? \'margin-left: 15;\' : \'margin-left: 0;\' }}" class="list-view-item-sub" />\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/hierarchy/hierarchy-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/hierarchy/hierarchy-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/hierarchy/hierarchy-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"company/companyhierarchy?companyId="+e+"&isGroup=N",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a
t="Y"===e.AutoCoSelect?"Yes":"No",a="Y"===e.InclinProfile?"Yes":"No",o.push({companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,holdCompanyId:e.HoldCompanyId,holdCompany:e.HoldCompany,mapCompanyId:e.MapCompanyId,mapCompany:e.MapCompany,autoCoSelect:t,inclinProfile:a,compRemovedDate:e.CompRemovedDate,numberedAmBest:e.NumberedAmBest,numberedNaic:e.NumberedNaic.toUpperCase(),numberedNaii:e.NumberedNaii,statusCode:e.StatusCode,status:e.Status,companyFoundedDate:e.CompanyFoundedDate,domiciledStateCode:e.DomiciledStateCode,domiciledState:e.DomiciledState,domiciledCountryCode:e.DomiciledCountryCode,domiciledCountry:e.DomiciledCountry,marketingType:e.MarketingType,structure:e.Structure,membershipTypeCode:e.MembershipTypeCode,membershipType:e.MembershipType,isMember:e.IsMember,webAccessCode:e.WebAccessCode,webAccess:e.WebAccess,webAccessEndDate:e.WebAccessEndDate,affiliations:e.Affiliations,subGroupFlag:e.SubGroupFlag,subGroupCompanyId:e.SubGroupCompanyId,accountManagerId:e.AccountManagerId,accountManager:e.AccountManager})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/hierarchy/hierarchy-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/hierarchy/hierarchy-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/meetings/meetingattendees/meetingattendees-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({meetingAttendeesList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Attendees"
var t=r.getViewById("companyName"),o=r.getViewById("meeting")
t.text=s.companyName,o.text=s.meeting,e.isBackNavigation||(m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,s.meetingCode).then((function(){d.set("isLoading",!1)})),r.bindingContext=d)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{var t=e.view.bindingContext
if(!t.isDeleted){const e={moduleName:"people/person/person-page",context:t,clearHistory:!1}
c.topmost().navigate(e)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" class="view-subtitle">\n            <Label id="meeting" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ meetingAttendeesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <Label text="{{ fullName }}" textWrap="true" class="list-view-item-main-top" />\n                                <Label text="{{ title }}" textWrap="true" class="list-view-item-sub" />\n                                <Label text="{{ personCompany }}" textWrap="true" class="list-view-item-sub" visibility="{{ personCompany !== companyName ? \'visible\' : \'collapse\' }}" />\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ isDeleted ? \'collapse\' : \'visible\' }}" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companymeetingattendees?companyId="+e+"&isGroup="+a+"&meetingCode="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a,i,n,r=!1;(e.FullName.indexOf("(Deleted)")>0&&(r=!0),t=null===e.StartDate||0===e.StartDate.length?null:e.StartDate.substring(0,e.StartDate.indexOf(" ")),a=null===e.EndDate||0===e.EndDate.length?null:e.EndDate.substring(0,e.EndDate.indexOf(" ")),null===e.WebAccessEndDate||0===e.WebAccessEndDate.length)?i=null:i=-1===e.WebAccessEndDate.indexOf(" ")?e.WebAccessEndDate:e.WebAccessEndDate.substring(0,e.WebAccessEndDate.indexOf(" "))
n=null===e.BioPlainText||0===e.BioPlainText.length?"":e.BioPlainText+new Array(Math.round(.005*e.BioPlainText.length)).join("\n"),o.push({personId:e.PersonId,prefix:e.Prefix,firstName:e.FirstName,middleName:e.MiddleName,lastName:e.LastName,suffix:e.Suffix,fullName:e.FullName,informalSalutation:e.InformalSalutation,title:e.Title,personCompany:e.PersonCompany,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,webAccessCode:e.WebAccessCode,webAccessGroupType:e.WebAccessGroupType,webAccessEndDate:i,webAccessComment:e.WebAccessComment,webAccess:e.WebAccess,webRegistered:e.WebRegistered,logonId:e.LogonId,departmentId:e.DepartmentId,department:e.Department,supervisorId:e.SupervisorId,supervisor:e.Supervisor,ddScopeId:e.DdScopeId,ddScope:e.DdScope,ddFormatId:e.DdFormatId,ddFormat:e.DdFormat,profileReportStatusCode:e.ProfileReportStatusCode,profileReportStatus:e.ProfileReportStatus,profileChangesNeeded:e.ProfileChangesNeeded,profileReportDate:e.ProfileReportDate,lastLicenseAgreeDate:e.LastLicenseAgreeDate,lastPasswordChangeDate:e.LastPasswordChangeDate,mainAddressesId:e.MainAddressesId,streetAddress:e.StreetAddress,address1:e.Address1,address2:e.Address2,city:e.City,stateCode:e.StateCode,state:e.State,postalCode:e.PostalCode,countryCode:e.CountryCode,country:e.Country,poBox:e.PoBox,poBoxCity:e.PoBoxCity,poBoxStateCode:e.PoBoxStateCode,poBoxState:e.PoBoxState,poBoxPostalCode:e.PoBoxPostalCode,emailAddress:e.EmailAddress,workPhone:e.WorkPhone,extension:e.Extension,cellPhone:e.CellPhone,fax:e.Fax,bio:n,secretaryId:e.SecretaryId,secretary:e.Secretary,secretaryTitle:e.SecretaryTitle,secretaryEmailAddress:e.SecretaryEmailAddress,secretaryWorkPhone:e.SecretaryWorkPhone,secretaryExtension:e.SecretaryExtension,secretaryFax:e.SecretaryFax,meetingTypeCode:e.MeetingTypeCode,meetingType:e.MeetingType,meetingCode:e.MeetingCode,meeting:e.Meeting,AttendanceStatusCode:e.AttendanceStatusCode,AttendanceStatus:e.AttendanceStatus,startDate:t,endDate:a,isDeleted:r})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/meetings/meetingattendees/meetingattendees-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/meetings/meetingattendees/meetingattendees-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/meetings/meetings-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/meetings/meetings-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({meetingsList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Meetings",r.getViewById("companyName").text=s.companyName,e.isBackNavigation}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onSelectedIndexChanged=function(e){try{var t=e.newIndex+1
4===t&&(t+=1),m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,t).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{var t=e.view.bindingContext
t.isGroup=p
const o={moduleName:"companygroups/companygroup/meetings/meetingattendees/meetingattendees-page",context:t,clearHistory:!1}
c.topmost().navigate(o)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/meetings/meetings-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/meetings/meetings-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/meetings/meetings-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center">\n            <SegmentedBar class="segmented-bar" selectedIndexChanged="onSelectedIndexChanged">\n                <SegmentedBar.items>\n                    <SegmentedBarItem title="Committee" />\n                    <SegmentedBarItem title="Advocacy" />\n                    <SegmentedBarItem title="Meeting" />\n                    <SegmentedBarItem title="Webinar" />\n                </SegmentedBar.items>\n            </SegmentedBar>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ meetingsList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ meeting }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/meetings/meetings-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/meetings/meetings-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/meetings/meetings-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companymeetings?companyId="+e+"&isGroup="+a+"&meetingTypeCode="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,meetingCode:e.MeetingCode,meeting:e.Meeting})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/meetings/meetings-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/meetings/meetings-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/metrics/committeemembership/committeemembership-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({committeeMembershipList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Committee Membership",r.getViewById("companyName").text=s.companyName,e.isBackNavigation}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{m.empty(),d.set("isLoading",!0),m.load(s.companyId,p).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml":function(e,t,o){(function(t){t.registerModule("nativescript-ui-chart",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/BarSeries",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/BarSeries.labelStyle",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.series",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/PointLabelStyle",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/CategoricalAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.horizontalAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.verticalAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.palettes",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadLegendView",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/PaletteEntry",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/Palette.entries",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.legend",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/Palette",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/LinearAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" xmlns:chart="nativescript-ui-chart">\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" height="100%">\n            <chart:RadCartesianChart height="100%" width="100%">\n                <chart:RadCartesianChart.series>\n                    <chart:BarSeries legendTitle="Distinct Committees" showLabels="true" seriesName="Bar" valueProperty="committeeCount" categoryProperty="year" items="{{ committeeMembershipList }}">\n                        <chart:BarSeries.labelStyle>\n                            <chart:PointLabelStyle margin="7" fontStyle="Bold" fillColor="transparent" textSize="10" textColor="white" />\n                        </chart:BarSeries.labelStyle>\n                    </chart:BarSeries>\n                    <chart:BarSeries legendTitle="Distinct Members" showLabels="true" seriesName="Bar" valueProperty="attendeeCount" categoryProperty="year" items="{{ committeeMembershipList }}">\n                        <chart:BarSeries.labelStyle>\n                            <chart:PointLabelStyle margin="7" fontStyle="Bold" fillColor="transparent" textSize="10" textColor="white" />\n                        </chart:BarSeries.labelStyle>\n                    </chart:BarSeries>\n                </chart:RadCartesianChart.series>\n                <chart:RadCartesianChart.horizontalAxis>\n                    <chart:CategoricalAxis />\n                </chart:RadCartesianChart.horizontalAxis>\n                <chart:RadCartesianChart.verticalAxis>\n                    <chart:LinearAxis majorStep="5" />\n                </chart:RadCartesianChart.verticalAxis>\n                <chart:RadCartesianChart.legend>\n                    <chart:RadLegendView position="Bottom" height="150"/>\n                </chart:RadCartesianChart.legend>\n                <chart:RadCartesianChart.palettes>\n                    <chart:Palette seriesName="Bar">\n                        <chart:Palette.entries>\n                            <chart:PaletteEntry fillColor="#cc2d30" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#44c8f5" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#35c4af" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#f68320" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#0a6fb0" strokeColor="#666"/>\n                        </chart:Palette.entries>\n                    </chart:Palette>\n                </chart:RadCartesianChart.palettes>\n            </chart:RadCartesianChart>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/metrics/committeemembership/committeemembership-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/committeemembership/committeemembership-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"company/companymetriccommittees?companyId="+e+"&isGroup="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,year:e.Year,committeeCount:e.CommitteeCount,attendeeCount:e.AttendeeCount})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/metrics/committeemembership/committeemembership-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/metrics/committeemembership/committeemembership-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/metrics/meetingattendance/meetingattendance-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({meetingAttendanceList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Meeting Attendance",r.getViewById("companyName").text=s.companyName,e.isBackNavigation}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{m.empty(),d.set("isLoading",!0),m.load(s.companyId,p).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml":function(e,t,o){(function(t){t.registerModule("nativescript-ui-chart",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/BarSeries",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/BarSeries.labelStyle",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.series",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/PointLabelStyle",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/CategoricalAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.palettes",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadLegendView",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/PaletteEntry",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/BarSeries.verticalAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/BarSeries.horizontalAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/Palette.entries",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/RadCartesianChart.legend",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/Palette",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),t.registerModule("nativescript-ui-chart/LinearAxis",(function(){return o("../node_modules/nativescript-ui-chart/ui-chart.js")})),e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" xmlns:chart="nativescript-ui-chart">\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" height="100%">\n            <chart:RadCartesianChart height="100%" width="100%">\n                <chart:RadCartesianChart.series>\n                    <chart:BarSeries legendTitle="Distinct Meetings" showLabels="true" seriesName="Bar" valueProperty="meetingCount" categoryProperty="year" items="{{ meetingAttendanceList }}">\n                        <chart:BarSeries.labelStyle>\n                            <chart:PointLabelStyle margin="7" fontStyle="Bold" fillColor="transparent" textSize="10" textColor="white" />\n                        </chart:BarSeries.labelStyle>\n                    </chart:BarSeries>\n                    <chart:BarSeries legendTitle="Distinct Attendees" showLabels="true" seriesName="Bar" valueProperty="attendeeCount" categoryProperty="year" items="{{ meetingAttendanceList }}">\n                        <chart:BarSeries.labelStyle>\n                            <chart:PointLabelStyle margin="7" fontStyle="Bold" fillColor="transparent" textSize="10" textColor="white" />\n                        </chart:BarSeries.labelStyle>\n                    </chart:BarSeries>\n                </chart:RadCartesianChart.series>\n                <chart:BarSeries.horizontalAxis>\n                    <chart:CategoricalAxis />\n                </chart:BarSeries.horizontalAxis>\n                <chart:BarSeries.verticalAxis>\n                    <chart:LinearAxis majorStep="5" />\n                </chart:BarSeries.verticalAxis>\n                <chart:RadCartesianChart.legend>\n                    <chart:RadLegendView position="Bottom" height="150"/>\n                </chart:RadCartesianChart.legend>\n                <chart:RadCartesianChart.palettes>\n                    <chart:Palette seriesName="Bar">\n                        <chart:Palette.entries>\n                            <chart:PaletteEntry fillColor="#cc2d30" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#44c8f5" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#35c4af" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#f68320" strokeColor="#666"/>\n                            <chart:PaletteEntry fillColor="#0a6fb0" strokeColor="#666"/>\n                        </chart:Palette.entries>\n                    </chart:Palette>\n                    <chart:Palette seriesName="Line">\n                        <chart:Palette.entries>\n                            <chart:PaletteEntry strokeColor="#FFCF40" strokeWidth="3"/>\n                        </chart:Palette.entries>\n                    </chart:Palette>\n                </chart:RadCartesianChart.palettes>\n            </chart:RadCartesianChart>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"company/companymetricmeetings?companyId="+e+"&isGroup="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,year:e.Year,meetingCount:e.MeetingCount,attendeeCount:e.AttendeeCount})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/metrics/meetingattendance/meetingattendance-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/metrics/meetingattendance/meetingattendance-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/metrics-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/metrics/metrics-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({metricsList:m,isLoading:!1})
t.onNavigatingTo=function(e){r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Metrics",r.getViewById("companyName").text=s.companyName,e.isBackNavigation||(m.empty(),m.load(),r.bindingContext=d)},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{var t=e.index,o=m.getItem(t)
s.isGroup=p
const a={moduleName:o.navigateTo,context:s,clearHistory:!1}
c.topmost().navigate(a)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/metrics/metrics-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/metrics/metrics-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/metrics-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" width="100%">\n            <ListView items="{{ metricsList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ title }}" verticalAlignment="middle" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" verticalAlignment="middle" class="fn-list-view-item" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/metrics/metrics-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/metrics/metrics-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/metrics/metrics-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray
o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const t=new a(e)
return t.load=function(){[{title:"Committee Membership",navigateTo:"companygroups/companygroup/metrics/committeemembership/committeemembership-page"},{title:"Meeting Attendance",navigateTo:"companygroups/companygroup/metrics/meetingattendance/meetingattendance-page"}].forEach((function(e){t.push({title:e.title,navigateTo:e.navigateTo})}))},t.empty=function(){for(;t.length;)t.pop()},t},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/metrics/metrics-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/metrics/metrics-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/invoice/adjustments/adjustments-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({adjustmentsList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,"Y"===(s=r.navigationContext).isManual?r.actionBar.title="Other Adjustments":r.actionBar.title="Adjustments",r.getViewById("companyName").text=s.companyNumber+" "+s.leadCompanyName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.invoiceId,s.isManual).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title-multi">\n            <Label id="companyName" text="" textWrap="true" style="margin-bottom: 8; margin-top: 8;" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ adjustmentsList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ adjustmentDescription }}" textWrap="true" class="list-view-item-top" />\n                            <Label row="0" col="1" text="&nbsp;&nbsp;" class="list-view-item-top" />\n                            <Label row="0" col="2" text="{{ adjustmentAmount | currencyConverter }}" verticalAlignment="bottom" class="list-view-item-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentinvoiceadjustments?invoiceId="+e+"&isManual="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({invoiceId:e.InvoiceId,adjustmentDescription:e.AdjustmentDescription,adjustmentAmount:e.AdjustmentAmount,adjTypeMasterId:e.AdjTypeMasterId})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/adjustments/adjustments-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/adjustments/adjustments-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/invoice/affiliates/affiliates-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({affiliatesList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Companies Included",r.getViewById("companyName").text=s.companyNumber+" "+s.leadCompanyName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.invoiceId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title-multi">\n            <Label id="companyName" text="" textWrap="true" style="margin-bottom: 8; margin-top: 8;" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ affiliatesList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ companyName }}" textWrap="true" class="list-view-item-top" />\n                            <Label row="0" col="1" text="&nbsp;&nbsp;" class="list-view-item-top" />\n                            <Label row="0" col="2" text="{{ affiliateDwp | currencyConverter }}" verticalAlignment="bottom" class="list-view-item-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentinvoiceaffiliates?invoiceId="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({invoiceId:e.InvoiceId,companyNumber:e.CompanyNumber,companyName:e.CompanyName,affiliateDwp:e.AffiliateDwp})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/affiliates/affiliates-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/affiliates/affiliates-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/invoice/breakdown/breakdown-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({breakdownList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Assessment Breakdown",r.getViewById("companyName").text=s.companyNumber+" "+s.leadCompanyName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.invoiceId,s.isReinsurer).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title-multi">\n            <Label id="companyName" text="" textWrap="true" style="margin-bottom: 8; margin-top: 8;" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ breakdownList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item-small">\n                            <StackLayout row="0" col="0" orientation="horizontal">\n                                <Label text="{{ lowerLimitPremVol | currencyConverter() }}" textWrap="true" class="list-view-item-top-small" />\n                                <Label text="-" textWrap="true" class="list-view-item-top-small" />\n                                <Label text="{{ upperLimitPremVol | currencyConverter() }}" textWrap="true" class="list-view-item-top-small" />\n                                <Label text="@$" textWrap="true" class="list-view-item-top-small" />\n                                <Label text="{{ ratePerPremVol }}" textWrap="true" class="list-view-item-top-small" />\n                                <Label text="/MM" textWrap="true" class="list-view-item-top-small" />\n                            </StackLayout>\n                            <Label row="0" col="1" text="&nbsp;&nbsp;" class="list-view-item-top-small" />\n                            <Label row="0" col="2" text="{{ assessmentPremVol | currencyConverter }}" verticalAlignment="bottom" class="list-view-item-top-small" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentinvoicebreakdown?invoiceId="+e+"&isReinsurer="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t
t="Y"===a?e.UpperLimitPremVol:1e16===e.UpperLimitPremVol||e.Dwp>e.LowerLimitPremVol&&e.Dwp<e.UpperLimitPremVol?e.Dwp:e.UpperLimitPremVol,o.push({invoiceId:e.InvoiceId,ratePerPremVol:Number(e.RatePerPremVol).toFixed(2),lowerLimitPremVol:e.LowerLimitPremVol,upperLimitPremVol:t,assessmentPremVol:e.AssessmentPremVol,dwp:e.Dwp})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/breakdown/breakdown-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/breakdown/breakdown-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/invoice-page.js":function(e,t,o){(function(a){o("../node_modules/@nativescript/core/data/observable/index.js")
var i,n,r=o("../node_modules/@nativescript/core/ui/frame/index.js")
t.onNavigatingTo=function(e){i=e.object,n=i.navigationContext,i.actionBar.title="Invoice",i.bindingContext=n},t.onBackTap=function(e){try{r.topmost().goBack()}catch(e){dialogs.alert(e)}},t.onBreakdownTap=function(e){try{try{const e={moduleName:"companygroups/companygroup/premiums/invoice/breakdown/breakdown-page",context:n,clearHistory:!1}
r.topmost().navigate(e)}catch(e){dialogs.alert(e)}}catch(e){dialogs.alert(e)}},t.onAdjustmentsTap=function(e){try{n.isManual="N"
const e={moduleName:"companygroups/companygroup/premiums/invoice/adjustments/adjustments-page",context:n,clearHistory:!1}
r.topmost().navigate(e)}catch(e){dialogs.alert(e)}},t.onOtherAdjustmentsTap=function(e){try{n.isManual="Y"
const e={moduleName:"companygroups/companygroup/premiums/invoice/adjustments/adjustments-page",context:n,clearHistory:!1}
r.topmost().navigate(e)}catch(e){dialogs.alert(e)}},t.onAffiliatesTap=function(e){try{const e={moduleName:"companygroups/companygroup/premiums/invoice/affiliates/affiliates-page",context:n,clearHistory:!1}
r.topmost().navigate(e)}catch(e){dialogs.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/invoice-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoice/invoice-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoice/invoice-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <ScrollView>\n        <GridLayout columns="*" rows="auto, *" width="100%">\n            <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title-multi">\n                <Label id="companyName" text="{{ companyNumber + \' \' + leadCompanyName }}" textWrap="true" style="margin-bottom: 8; margin-top: 8;" />\n            </StackLayout>\n            <StackLayout row="1" col="0">\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <GridLayout columns="*, auto" rows="auto" verticalAlignment="bottom">\n                        <Label row="0" col="0" text="{{ \'INVOICE #\' + invoiceId }}" />\n                        <Label row="0" col="1" text="{{ invoiceDate }}" horizontalAlignment="right" />\n                    </GridLayout>\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Assessment Period" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ assessmentPeriod }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="INVOICE SUMMARY" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom-short">\n                    <Label row="0" col="0" text="Semi-Annual Assessment" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ finalAssessment | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom-short">\n                    <Label row="0" col="0" text="Payments Received" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ totalPayments | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-short">\n                    <Label row="0" col="0" text="Previous Balance" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ previousBalance | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, *, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Total Balance Due" class="list-view-item-left-bold" />\n                    <Label row="0" col="1" text="&nbsp;" class="list-view-item-left" />\n                    <Label row="0" col="2" text="{{ balanceDue | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right-bold" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="INVOICE DETAILS" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : reinsurerCalcTypeId === \'2\' ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="R/I Assumed Premium" class="list-view-item-left-bold" />\n                    <Label row="0" col="1" text="{{ adjustedDwp | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right-bold" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : reinsurerCalcTypeId === \'2\' ? \'collapse\' : \'visible\' }}">\n                    <StackLayout row="0" col="0">\n                        <Label text="Total Direct Written Premium" class="list-view-item-left-bold" />\n                        <Label text="(per statutory page 14)" class="list-view-item-left-small" />\n                    </StackLayout>\n                    <Label row="0" col="1" text="{{ adjustedDwp | currencyConverter() }}" horizontalAlignment="right" verticalAlignment="top" class="list-view-item-right-bold" />\n                </GridLayout>\n                <GridLayout columns="*" rows="auto" class="list-view-item-form" visibility="{{ fixedAssessment === \'Y\' ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Fixed Assessment Per Customer Agreement" textWrap="true" class="list-view-item-left-bold" />\n                </GridLayout>\n                <GridLayout columns="auto, auto, *" rows="auto" tap="onBreakdownTap" class="list-view-item-form-bottom-short" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : reinsurerCalcTypeId === \'2\' ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="R/I Assessment Breakdown" class="list-view-item-left-bold" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ totalBreakdowns === 0 ? \'collapse\' : \'visible\' }}" />\n                    <Label row="0" col="2" text="{{ totalBreakdowns | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, auto, *" rows="auto" tap="onBreakdownTap" class="list-view-item-form-bottom-short" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : reinsurerCalcTypeId === \'2\' ? \'collapse\' : \'visible\' }}">\n                    <Label row="0" col="0" text="Total Assessment Breakdown" class="list-view-item-left" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ totalBreakdowns === 0 ? \'collapse\' : \'visible\' }}" />\n                    <Label row="0" col="2" text="{{ totalBreakdowns | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-short" visibility="{{ fixedAssessment === \'Y\' || reinsurerCalcTypeId === \'2\' ? \'collapse\' : \'visible\' }}">\n                    <StackLayout row="0" col="0" orientation="horizontal">\n                        <Label text="States Charged ( " class="list-view-item-left" />\n                        <Label text="{{ stateCount }}" class="list-view-item-left-small" />\n                        <Label text=" @ " class="list-view-item-left-small" />\n                        <Label text="{{ stateCountRate | currencyConverter() }}" class="list-view-item-left-small" />\n                        <Label text=" / State" class="list-view-item-left-small" />\n                        <Label text=" )" class="list-view-item-left" />\n                    </StackLayout>\n                    <Label row="0" col="1" text="{{ stateAssessment | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ fixedAssessment === \'Y\' || reinsurerCalcTypeId === \'2\' ? \'collapse\' : \'visible\' }}">\n                    <StackLayout row="0" col="0">\n                        <Label text="Annual Assessment" class="list-view-item-left-bold" />\n                        <Label text="(Breakdown + States)" class="list-view-item-left-small" />\n                    </StackLayout>\n                    <Label row="0" col="1" text="{{ annualAssessment | currencyConverter() }}" horizontalAlignment="right" \n                        verticalAlignment="top" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom-short" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : \'visible\' }}">\n                    <Label row="0" col="0" text="Semi-Annual Base Assessment" class="list-view-item-left-bold" />\n                    <Label row="0" col="1" text="{{ semiAnnualAssessment | currencyConverter() }}" horizontalAlignment="right" \n                        class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, auto, *" rows="auto" tap="onAdjustmentsTap" class="list-view-item-form-short" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : \'visible\' }}">\n                    <Label row="0" col="0" text="Total Adjustments" class="list-view-item-left" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ totalAdjustments === 0 ? \'collapse\' : \'visible\' }}" />\n                    <Label row="0" col="2" text="{{ totalAdjustments | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : \'visible\' }}">\n                    <StackLayout row="0" col="0">\n                        <Label text="Subtotal" class="list-view-item-left-bold" />\n                        <Label text="(Semi-Annual Base - Adjustments)" class="list-view-item-left-small" />\n                    </StackLayout>\n                    <Label row="0" col="1" text="{{ semiAnnualAdjustedAssessment | currencyConverter() }}" horizontalAlignment="right" \n                        verticalAlignment="top" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, auto, *" rows="auto" tap="onOtherAdjustmentsTap" class="list-view-item-form-short" visibility="{{ fixedAssessment === \'Y\' ? \'collapse\' : \'visible\' }}">\n                    <Label row="0" col="0" text="Total Other Adjustments" class="list-view-item-left" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ totalManualAdjustments === 0 ? \'collapse\' : \'visible\' }}" />\n                    <Label row="0" col="2" text="{{ totalManualAdjustments | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Total Semi-Annual Assessment" class="list-view-item-left-bold" />\n                    <Label row="0" col="1" text="{{ finalAssessment | currencyConverter() }}" horizontalAlignment="right" verticalAlignment="top" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="COMPANIES INCLUDED" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" tap="onAffiliatesTap" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="View Companies Included" class="list-view-item-left" style="font-style: italic;" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                </GridLayout>\n            </StackLayout>\n        </GridLayout>\n    </ScrollView>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoice/invoice-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/invoice/invoice-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/invoices-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentinvoices?companyId="+e+"&isGroup="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString(),a=JSON.parse(t)
const i=["January","February","March","April","May","June","July","August","September","October","November","December"]
a.forEach((function(e){if(null==e.InvoiceDate);else{var t,a,n=e.InvoiceDate
n.indexOf(" ")>0&&(n=n.substring(0,n.indexOf(" "))),t=new Date(n),a=i[t.getMonth()]+" "+t.getDate()+", "+t.getFullYear(),o.push({invoiceId:e.InvoiceId,invoiceDate:a.toUpperCase(),leadCompanyId:e.LeadCompanyId,leadCompanyName:e.LeadCompanyName,companyNumber:e.CompanyNumber,assessmentPeriodId:e.AssessmentPeriodId,assessmentPeriod:e.AssessmentPeriod,finalAssessment:e.FinalAssessment,fixedAssessment:e.FixedAssessment,totalPayments:-1*Number(e.TotalPayments),previousBalance:e.PreviousBalance,balanceDue:e.BalanceDue,reinsurerCalcTypeId:e.ReinsurerCalcTypeId,adjustedDwp:e.AdjustedDwp,stateCount:e.StateCount,stateCountRate:e.StateCountRate,stateAssessment:e.StateAssessment,totalBreakdowns:e.TotalBreakdowns,annualAssessment:e.AnnualAssessment,semiAnnualAssessment:e.SemiAnnualAssessment,totalAdjustments:e.TotalAdjustments,semiAnnualAdjustedAssessment:e.SemiAnnualAdjustedAssessment,totalManualAdjustments:e.TotalManualAdjustments})}}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/invoices-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/invoices-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/lines/lines-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/lines/lines-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({linesList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Y"===p?"Group Lines":"Company Lines",r.getViewById("companyName").text=s.companyName,e.isBackNavigation}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onSelectedIndexChanged=function(e){try{var t
t=0===e.newIndex?"dwp":"alpha",m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,t).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{if("Y"===p){const t={moduleName:"companygroups/companygroup/premiums/lines/written/written-page",context:e.view.bindingContext,clearHistory:!1}
c.topmost().navigate(t)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/lines/lines-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/lines/lines-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/lines/lines-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center">\n            <SegmentedBar class="segmented-bar" selectedIndexChanged="onSelectedIndexChanged">\n                <SegmentedBar.items>\n                    <SegmentedBarItem title="Assessed DWP" />\n                    <SegmentedBarItem title="Alphabetical" />\n                </SegmentedBar.items>\n            </SegmentedBar>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ linesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ lineOfBusiness }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="{{ assessedDwp | currencyConverter() }}" class="list-view-item-main-top" />\n                            <Label row="0" col="2" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ isGroup === \'Y\' ? \'visible\' : \'collapse\' }}" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/lines/lines-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/lines/lines-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/lines/lines-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentlines?companyId="+e+"&isGroup="+a+"&sort="+r+"&rank=51",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,lineOfBusinessId:e.LineOfBusinessId,lineOfBusiness:e.LineOfBusiness,assessedDwp:e.AssessedDwp,isGroup:a})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/lines/lines-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/lines/lines-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/lines/written/written-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/lines/written/written-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({writtenList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Y"===p?"Group Line":"Company Line"
var t=r.getViewById("companyName"),o=r.getViewById("lineOfBusiness")
t.text=s.companyName,o.text=s.lineOfBusiness,e.isBackNavigation||(m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,s.lineOfBusinessId).then((function(){d.set("isLoading",!1)})),r.bindingContext=d)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/lines/written/written-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/lines/written/written-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/lines/written/written-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" class="view-subtitle">\n            <Label id="lineOfBusiness" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ writtenList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ companyName }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&nbsp;&nbsp;" class="list-view-item-main-top" />\n                            <Label row="0" col="2" text="{{ assessedDwp | currencyConverter }}" verticalAlignment="bottom" class="list-view-item-main-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/lines/written/written-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/lines/written/written-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/lines/written/written-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentlineswritten?companyId="+e+"&isGroup="+a+"&lineOfBusinessId="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,lineOfBusinessId:e.LineOfBusinessId,lineOfBusiness:e.LineOfBusiness,assessedDwp:e.AssessedDwp})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/lines/written/written-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/lines/written/written-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/premiums-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/premiums-view-model.js"),n=o("./companygroups/companygroup/premiums/invoices-view-model.js"),r=o("../node_modules/@nativescript/core/data/observable/index.js")
var s,p,c,l=o("../node_modules/@nativescript/core/ui/frame/index.js"),m=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),d=new i([]),u=new n([]),g=new r.fromObject({premiums:d,invoicesList:u,isProfileAccounting:a.isProfileAccounting,isGroup:c,isLoading:!1})
t.onNavigatingTo=function(e){try{s=e.object,p=s.navigationContext,c=p.isGroup,a.isProfileAccounting?s.actionBar.title="Premiums & Assessents":s.actionBar.title="Premiums",s.getViewById("companyName").text=p.companyName,e.isBackNavigation||(d.empty(),u.empty(),g.set("isLoading",!0),d.load(p.companyId,c).then((function(){null!==d.companyId?u.load(p.companyId,c).then((function(){g.set("isLoading",!1)})):g.set("isLoading",!1)})),s.bindingContext=g)}catch(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{l.topmost().goBack()}catch(e){m.alert(e)}},t.onItemTap=function(e){try{const t={moduleName:"companygroups/companygroup/premiums/invoice/invoice-page",context:e.view.bindingContext,clearHistory:!1}
l.topmost().navigate(t)}catch(e){m.alert(e)}},t.onStatesTap=function(e){try{var t=e.view.bindingContext.premiums
if(null!==t.companyId){t.isGroup=c
const e={moduleName:"companygroups/companygroup/premiums/states/states-page",context:t,clearHistory:!1}
l.topmost().navigate(e)}}catch(e){m.alert(e)}},t.onLinesTap=function(e){try{var t=e.view.bindingContext.premiums
if(null!==t.companyId){t.isGroup=c
const e={moduleName:"companygroups/companygroup/premiums/lines/lines-page",context:t,clearHistory:!1}
l.topmost().navigate(e)}}catch(e){m.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/premiums-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/premiums-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/premiums-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0">\n            <GridLayout columns="*" rows="auto, auto, auto, auto, auto, auto, auto, auto, auto, auto, *" height="100%" width="100%">\n                <StackLayout row="0" col="0" verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="DIRECT WRITTEN PREMIUMS" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout row="1" col="0" columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="{{ premiums.dwpYear + \' Total DWP\' }}" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ premiums.totalDwp | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout row="2" col="0" columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="{{ premiums.dwpYear + \' Assessed DWP\' }}" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ premiums.assessedDwp | currencyConverter() }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout row="3" col="0" verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="STATES" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout row="4" col="0" columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="State Count" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ premiums.stateCount }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout row="5" col="0" columns="*, auto" rows="auto" tap="onStatesTap" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="States Written" class="list-view-item-left" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ premiums.companyId === null ? \'collapse\' : \'visible\' }}" />\n                </GridLayout>\n                <StackLayout row="6" col="0" verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="LINES OF BUSINESS" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout row="7" col="0" columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Line Count" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ premiums.lineCount }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout row="8" col="0" columns="*, auto" rows="auto" tap="onLinesTap" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Lines Written" class="list-view-item-left" />\n                    <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ premiums.companyId === null ? \'collapse\' : \'visible\' }}" />\n                </GridLayout>\n                <StackLayout row="9" col="0" verticalAlignment="bottom" class="list-view-section-header" visibility="{{ isProfileAccounting ? \'visible\' : \'collapse\' }}">\n                    <Label text="SEMI-ANNUAL ASSESSMENTS BY LEAD COMPANY" verticalAlignment="bottom" />\n                </StackLayout>\n                <StackLayout row="10" col="0" verticalAlignment="top" width="100%" visibility="{{ isProfileAccounting ? \'visible\' : \'collapse\' }}">\n                    <ListView items="{{ invoicesList }}" itemTap="onItemTap" height="100%">\n                        <ListView.itemTemplate>\n                            <StackLayout>\n                                <GridLayout columns="*, auto, auto, auto" rows="*" class="list-view-item">\n                                    <Label row="0" col="0" text="{{ leadCompanyName }}" textWrap="true" verticalAlignment="middle" class="list-view-item-main-top" />\n                                    <Label row="0" col="1" text="&nbsp;&nbsp;" class="list-view-item-main-top" />\n                                    <Label row="0" col="2" text="{{ finalAssessment | currencyConverter() }}" verticalAlignment="middle" class="list-view-item-right" />\n                                    <Label row="0" col="3" text="&#xf105;" verticalAlignment="middle" class="fn-list-view-item" />\n                                </GridLayout>\n                            </StackLayout>\n                        </ListView.itemTemplate>\n                    </ListView>\n                </StackLayout>\n            </GridLayout>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/premiums-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/premiums-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/premiums-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/data/observable/index.js")
var i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(){const e=a.fromObject({companyId:null,companyName:"",companyId0:null,groupId:null,groupName:"",leadCompanyId:null,leadCompanyName:"",assessmentYear:"",dwpYear:"",totalDwp:null,excludedDwp:"",assessedDwp:null,totalAssessment:"",stateCount:"",lineCount:"",load:function(o,a){return i.request({url:t.apiBaseServiceUrl+"company/companyassessments?companyId="+o+"&isGroup="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(t){var o=t.content.toString(),a=JSON.parse(o)
void 0!==a[0].CompanyId&&null!==a[0].CompanyId?(e.companyId=a[0].CompanyId,e.companyName=a[0].CompanyName,e.companyId0=a[0].CompanyId0,e.groupId=a[0].GroupId,e.groupName=a[0].GroupName,e.leadCompanyId=a[0].LeadCompanyId,e.leadCompanyName=a[0].LeadCompanyName,e.assessmentYear=a[0].AssessmentYear,e.dwpYear=a[0].DwpYear,e.totalDwp=a[0].TotalDwp,e.excludedDwp=a[0].ExcludedDwp,e.assessedDwp=a[0].AssessedDwp,e.totalAssessment=a[0].TotalAssessment,e.stateCount=a[0].StateCount,e.lineCount=a[0].LineCount):(e.companyId=null,e.companyName="",e.companyId0=null,e.groupId=null,e.groupName="",e.leadCompanyId=null,e.leadCompanyName="",e.assessmentYear="",e.dwpYear="",e.totalDwp=null,e.excludedDwp="",e.assessedDwp=null,e.totalAssessment="",e.stateCount="",e.lineCount="")}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},empty:function(){e.companyId=null,e.companyName="",e.companyId0=null,e.groupId=null,e.groupName="",e.leadCompanyId=null,e.leadCompanyName="",e.assessmentYear="",e.dwpYear="",e.totalDwp=null,e.excludedDwp="",e.assessedDwp=null,e.totalAssessment="",e.stateCount="",e.lineCount=""}})
return e},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/premiums-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/premiums-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/states/states-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/states/states-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({statesList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Y"===p?"Group States":"Company States",r.getViewById("companyName").text=s.companyName,e.isBackNavigation}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onSelectedIndexChanged=function(e){try{var t
t=0===e.newIndex?"dwp":"alpha",m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,t).then((function(){d.set("isLoading",!1)})),r.bindingContext=d}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{if("Y"===p){const t={moduleName:"companygroups/companygroup/premiums/states/written/written-page",context:e.view.bindingContext,clearHistory:!1}
c.topmost().navigate(t)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/states/states-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/states/states-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/states/states-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center">\n            <SegmentedBar class="segmented-bar" selectedIndexChanged="onSelectedIndexChanged">\n                <SegmentedBar.items>\n                    <SegmentedBarItem title="Assessed DWP" />\n                    <SegmentedBarItem title="Alphabetical" />\n                </SegmentedBar.items>\n            </SegmentedBar>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ statesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ state }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="{{ assessedDwp | currencyConverter() }}" class="list-view-item-main-top" />\n                            <Label row="0" col="2" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" visibility="{{ isGroup === \'Y\' ? \'visible\' : \'collapse\' }}" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/states/states-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/states/states-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/states/states-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentstates?companyId="+e+"&isGroup="+a+"&sort="+r+"&rank=51",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,stateId:e.StateId,state:e.State,assessedDwp:e.AssessedDwp,isGroup:a})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/states/states-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/states/states-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/states/written/written-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/premiums/states/written/written-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({writtenList:m,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Y"===p?"Group State":"Company State"
var t=r.getViewById("companyName"),o=r.getViewById("state")
t.text=s.companyName,o.text=s.state,e.isBackNavigation||(m.empty(),d.set("isLoading",!0),m.load(s.companyId,p,s.stateId).then((function(){d.set("isLoading",!1)})),r.bindingContext=d)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/premiums/states/written/written-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/states/written/written-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/states/written/written-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" class="view-subtitle">\n            <Label id="state" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ writtenList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ companyName }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&nbsp;&nbsp;" class="list-view-item-main-top" />\n                            <Label row="0" col="2" text="{{ assessedDwp | currencyConverter }}" verticalAlignment="bottom" class="list-view-item-main-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/states/written/written-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/premiums/states/written/written-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/premiums/states/written/written-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r){return i.request({url:t.apiBaseServiceUrl+"company/companyassessmentstateswritten?companyId="+e+"&isGroup="+a+"&stateId="+r,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,stateId:e.StateId,state:e.State,assessedDwp:e.AssessedDwp})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/premiums/states/written/written-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/premiums/states/written/written-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js":function(e,t,o){(function(a){o("../node_modules/@nativescript/core/data/observable/index.js")
var i=o("../node_modules/@nativescript/core/ui/frame/index.js")
t.onNavigatingTo=function(e){const t=e.object
var o=t.navigationContext
t.actionBar.title="Remark",o.isProfileMembership=a.isProfileMembership,t.bindingContext=o},t.onBackTap=function(e){try{i.topmost().goBack()}catch(e){dialogs.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="{{ companyName }}" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0">\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Remark Level" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ publicPrivate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Remark Type" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ remarkType }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Creation Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ creationDate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Completion Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ completionDate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            \x3c!-- isProfileMembership ? \'visible\' : \'collapse\' - Previously applied to the below GridLayout to hide the Visit Date in certain instances. --\x3e\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ visitDate.length === 0 ? \'collapse\' : \'visible\' }}">\n                <Label row="0" col="0" text="Visit Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ visitDate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Created By" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ userName }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            \x3c!-- <GridLayout columns="*" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Comment" class="list-view-item-left" />\n            </GridLayout> --\x3e\n        </StackLayout>\n        <StackLayout row="2" col="0">\n            <GridLayout columns="*" rows="*">\n                <TextView text="{{ comment }}" editable="false" class="scroll-view-item" />\n            </GridLayout>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/remarktypes/remarks/remark/remark-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js":function(e,t,o){(function(a){const i=o("../node_modules/@nativescript/core/platform/index.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray
o("../node_modules/@nativescript/core/application/index.js")
var r,s,p=o("../node_modules/@nativescript/core/http/index.js"),c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new n.Observable
function d(){null!==m.creationDate&&(m.creationDate=u(m.creationDate,"MM/DD/YYYY")),null!==m.completionDate&&(m.completionDate=u(m.completionDate,"MM/DD/YYYY")),null!==m.visitDate&&(m.visitDate=u(m.visitDate,"MM/DD/YYYY")),p.request({url:a.apiBaseServiceUrl+"company/insertcompanyremark",method:"POST",headers:{"Content-Type":"application/json",Authorization:a.token},content:JSON.stringify(m)}).then((function(e){var t=e.content.toString(),o=JSON.parse(t)
null!==o.RemarksId?(a.refreshRemarks=!0,m.remarksId=o.RemarksId,c.topmost().goBack()):l.alert("There was an error saving the remark.")}),(function(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))}function u(e,t){let o=t
const a=e.getDate()
o=o.replace("DD",a<10?"0"+a:a)
const i=e.getMonth()+1
return o=o.replace("MM",i<10?"0"+i:i),o=o.replace("YYYY",e.getFullYear()),o}function g(){r.getViewById("visitDateGridLayout").visibility="collapse",r.addCss("#visitDateLabel {color: #666;}")}t.onNavigatingTo=function(e){try{if(r=e.object,i.isIOS){const e=c.topmost().ios.controller
e.visibleViewController.navigationItem.setHidesBackButtonAnimated(!0,!1)}if(e.isBackNavigation){var t=r.getViewById("remarkLevelLabel"),o=r.getViewById("remarkTypeLabel"),n=r.getViewById("creationDateLabel"),p=r.getViewById("completionDateLabel"),d=r.getViewById("visitDateLabel")
t.text=m.publicPrivate,o.text=m.remarkType
var g=r.getViewById("completionDateStackLayout")
"8"===m.remarkTypeCode?(m.completionDate=null,g.visibility="collapse"):(m.completionDate=new Date,g.visibility="visible"),n.text=u(m.creationDate,"MM/DD/YYYY"),p.text=u(m.completionDate,"MM/DD/YYYY"),d.text=u(m.visitDate,"MM/DD/YYYY")}else(s=r.navigationContext).isProfileMembership=a.isProfileMembership,m=s,"Y"===s.isGroup?r.actionBar.title="Add Group Remark":r.actionBar.title="Add Company Remark",s.isProfileMembership=a.isProfileMembership,r.bindingContext=m}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{r.getViewById("visitDateDatePicker").on("dateChange",(function(e){r.getViewById("visitDateLabel").text=u(e.value,"MM/DD/YYYY")}))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutRemarkLevelTap=function(e){try{g()
const e={moduleName:"companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page",context:m,clearHistory:!1}
c.topmost().navigate(e)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutRemarkTypeTap=function(e){try{g()
const e={moduleName:"companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page",context:m,clearHistory:!1}
c.topmost().navigate(e)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutCreationDateTap=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutCompletionDateTap=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutVisitDateTap=function(e){try{var t=r.getViewById("visitDateGridLayout")
"collapse"===t.visibility?(t.visibility="visible",r.addCss("#visitDateLabel {color: #cc2d30;}")):(t.visibility="collapse",r.addCss("#visitDateLabel {color: #666;}"))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutCreatedByTap=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onTextViewFocus=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onCancelTap=function(e){try{i.isAndroid?l.confirm({title:"Save",message:"Would you like to save the remark?",okButtonText:"Yes",cancelButtonText:"No"}).then((function(e){e?d():c.topmost().goBack()})):i.isIOS&&l.action({cancelButtonText:"Cancel",actions:["Save Remark"]}).then((function(e){"Save Remark"===e?d():c.topmost().goBack()}))}catch(e){l.alert(e)}},t.onSaveTap=function(e){try{g(),d()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <ActionItem tap="onCancelTap" android.systemIcon="ic_menu_close_clear_cancel" ios.systemIcon="1" ios.position="left" />\n        <ActionItem tap="onSaveTap" ios.systemIcon="3" android.systemIcon="ic_menu_save" ios.position="right" />\n    </ActionBar>\n\n    <GridLayout columns="*" rows="*" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top">\n            <StackLayout verticalAlignment="top" horizontalAlignment="center" class="view-title">\n                <Label id="companyName" text="{{ companyName }}" verticalAlignment="center" horizontalAlignment="center" />\n            </StackLayout>\n            <StackLayout tap="onStackLayoutRemarkLevelTap">\n                <GridLayout columns="auto, *, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Remark Level" class="list-view-item-left" />\n                    <Label id="remarkLevelLabel" row="0" col="1" text="{{ publicPrivate }}" class="list-view-item-right" />\n                    <Label row="0" col="2" text="&#xf105;" class="fn-list-view-item" />\n                </GridLayout>\n            </StackLayout>\n            <StackLayout tap="onStackLayoutRemarkTypeTap">\n                <GridLayout columns="auto, *, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Remark Type" class="list-view-item-left" />\n                    <Label id="remarkTypeLabel" row="0" col="1" text="{{ remarkType }}" class="list-view-item-right" />\n                    <Label row="0" col="2" text="&#xf105;" class="fn-list-view-item" />\n                </GridLayout>\n            </StackLayout>\n            <StackLayout tap="onStackLayoutCreationDateTap">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Creation Date" class="list-view-item-left" />\n                    <Label id="creationDateLabel" row="0" col="1" text="{{ creationDate | dateConverter(dateFormat) }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            <StackLayout id="completionDateStackLayout" tap="onStackLayoutCompletionDateTap" visibility="{{ completionDate === null ? \'collapse\' : \'visible\' }}">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Completion Date" class="list-view-item-left" />\n                    <Label id="completionDateLabel" row="0" col="1" text="{{ completionDate | dateConverter(dateFormat) }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            \x3c!-- visibility="{{ isProfileMembership ? \'visible\' : \'collapse\' }}" - Previously applied to the below StackLayout to hide the Visit Date in certain instances. --\x3e\n            <StackLayout tap="onStackLayoutVisitDateTap"> \n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Visit Date" class="list-view-item-left" />\n                    <Label id="visitDateLabel" row="0" col="1" text="{{ visitDate | dateConverter(dateFormat) }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            <GridLayout id="visitDateGridLayout" columns="*" rows="auto" class="list-view-item-form" visibility="collapse">\n                <DatePicker id="visitDateDatePicker" row="0" col="0" date="{{ visitDate }}" horizontalAlignment="center" class="list-view-item-picker"></DatePicker>\n            </GridLayout>\n            <StackLayout tap="onStackLayoutCreatedByTap">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Created By" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ userName }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            \x3c!-- <GridLayout columns="*" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Comment" class="list-view-item-left" />\n            </GridLayout> --\x3e\n            <GridLayout columns="*" rows="*" class="list-view-item-form">\n                <TextView row="0" col="0" text="{{ comment }}" focus="onTextViewFocus" hint="Comment" class="list-view-item-textview" />\n            </GridLayout>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=0,d=new n.fromObject({boundData:null,remarkLevelIndex:m,remarkLevelList:null,isLoading:!1})
t.onNavigatingTo=function(e){try{if((r=e.object).actionBar.title="Type",s=r.navigationContext,d.boundData=s,void 0===a.remarkLevelList)d.set("isLoading",!0),l.load(a.isProfileExecutive).then((function(){var e
if(a.remarkLevelList=l,d.remarkLevelList=a.remarkLevelList,m=0,null!==d.boundData.publicPrivate&&d.boundData.publicPrivate.toString().length>0)for(e=0;e<d.remarkLevelList.List.length;e++)d.remarkLevelList.List.getItem(e).remarkLevelCode===d.boundData.publicPrivate&&(m=e)
d.remarkLevelIndex=m,d.set("isLoading",!1),r.bindingContext=d}))
else{var t
if(d.remarkLevelList=a.remarkLevelList,m=0,null!==d.boundData.publicPrivate&&d.boundData.publicPrivate.toString().length>0)for(t=0;t<d.remarkLevelList.List.length;t++)d.remarkLevelList.List.getItem(t).remarkLevelCode===d.boundData.publicPrivate&&(m=t)
d.remarkLevelIndex=m,r.bindingContext=d}}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{r.getViewById("remarkLevelListPicker").on("selectedIndexChange",(function(e){var t=d.remarkLevelList.List.getItem(e.object.selectedIndex)
d.boundData.publicPrivate=t.remarkLevel}))}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *">\n        <StackLayout row="0" col="0" class="list-view-section-header"></StackLayout>\n        <GridLayout row="1" col="0" columns="*" rows="auto" class="list-view-item-form">\n            <ListPicker id="remarkLevelListPicker" row="0" col="0" items="{{ remarkLevelList.Items }}" selectedIndex="{{ remarkLevelIndex }}" \n                horizontalAlignment="center" class="list-view-item-picker"></ListPicker>\n        </GridLayout>\n        <StackLayout row="2" col="0" height="100%" class="list-view-section-header"></StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/data/observable/index.js").Observable
var i=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,n=o("../node_modules/@nativescript/core/http/index.js"),r=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(){const e=new a
return e.Items=new i,e.List=new i,e.load=function(o){return n.request({url:t.apiBaseServiceUrl+"remark/remarklevels?isExecutive="+o,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(t){var o=t.content.toString()
JSON.parse(o).forEach((function(t){e.Items.push(t.RemarkLevelDescription),e.List.push({remarkLevelCode:t.RemarkLevelDescription,remarkLevel:t.RemarkLevelDescription})}))}),(function(e){r.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},e.empty=function(){for(;e.Items.length;)e.Items.pop()
for(;e.List.length;)e.List.pop()},e},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarklevel/remarklevel-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=0,d=new n.fromObject({boundData:null,remarkTypeIndex:m,remarkTypeList:null,isLoading:!1})
t.onNavigatingTo=function(e){try{if((r=e.object).actionBar.title="Type",s=r.navigationContext,d.boundData=s,void 0===a.remarkTypeList)d.set("isLoading",!0),l.load().then((function(){var e
if(a.remarkTypeList=l,d.remarkTypeList=a.remarkTypeList,m=0,null!==d.boundData.remarkTypeCode&&d.boundData.remarkTypeCode.toString().length>0)for(e=0;e<d.remarkTypeList.List.length;e++)d.remarkTypeList.List.getItem(e).remarkTypeCode===d.boundData.remarkTypeCode&&(m=e)
d.remarkTypeIndex=m,d.set("isLoading",!1),r.bindingContext=d}))
else{var t
if(d.remarkTypeList=a.remarkTypeList,m=0,null!==d.boundData.remarkTypeCode&&d.boundData.remarkTypeCode.toString().length>0)for(t=0;t<d.remarkTypeList.List.length;t++)d.remarkTypeList.List.getItem(t).remarkTypeCode===d.boundData.remarkTypeCode&&(m=t)
d.remarkTypeIndex=m,r.bindingContext=d}}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{r.getViewById("remarkTypeListPicker").on("selectedIndexChange",(function(e){var t=d.remarkTypeList.List.getItem(e.object.selectedIndex)
d.boundData.remarkTypeCode=t.remarkTypeCode,d.boundData.remarkType=t.remarkType}))}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *">\n        <StackLayout row="0" col="0" class="list-view-section-header"></StackLayout>\n        <GridLayout row="1" col="0" columns="*" rows="auto" class="list-view-item-form">\n            <ListPicker id="remarkTypeListPicker" row="0" col="0" items="{{ remarkTypeList.Items }}" selectedIndex="{{ remarkTypeIndex }}" \n                horizontalAlignment="center" class="list-view-item-picker"></ListPicker>\n        </GridLayout>\n        <StackLayout row="2" col="0" height="100%" class="list-view-section-header"></StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/data/observable/index.js").Observable
var i=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,n=o("../node_modules/@nativescript/core/http/index.js"),r=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(){const e=new a
return e.Items=new i,e.List=new i,e.load=function(){return n.request({url:t.apiBaseServiceUrl+"remark/remarktypes",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(t){var o=t.content.toString()
JSON.parse(o).forEach((function(t){e.Items.push(t.RemarkTypeDescription),e.List.push({remarkTypeCode:t.RemarkTypeCode,remarkType:t.RemarkTypeDescription})}))}),(function(e){r.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},e.empty=function(){for(;e.Items.length;)e.Items.pop()
for(;e.List.length;)e.List.pop()},e},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarkadd/remarktype/remarktype-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarks-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/remarktypes/remarks/remarks-view-model.js"),n=o("../node_modules/@nativescript/core/platform/index.js"),r=o("../node_modules/@nativescript/core/data/observable/index.js")
var s,p,c,l,m,d,u=o("../node_modules/@nativescript/core/http/index.js"),g=o("../node_modules/@nativescript/core/ui/frame/index.js"),y=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),v="",h=!1,b=new i([]),w=new r.fromObject({remarksList:b,isLoading:!1})
function L(){var e=null
"8"!==p.remarkTypeCode&&(e=new Date)
const t={moduleName:"companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page",context:{remarksId:0,companyId:p.companyId,companyName:p.companyName,companyId0:null,groupId:null,groupName:null,publicPrivate:"Public",remarkTypeCode:p.remarkTypeCode,remarkType:p.remarkType,creationDate:new Date,completionDate:e,visitDate:null,userName:a.logonId,commentAbbreviated:null,comment:null},clearHistory:!1}
g.topmost().navigate(t)}t.onNavigatingTo=function(e){try{if(s=e.object,p=s.navigationContext,s.getViewById("companyName").text=p.companyName,l=p.isGroup,m=p.companyId,d=p.remarkTypeCode,s.actionBar.title="Remarks",""!==(v="Y"===l?a.remarksSearchTextGroup:a.remarksSearchTextCompany))s.getViewById("searchBar").text=v,h=!0
e.isBackNavigation?a.refreshRemarks&&(b.empty(),w.set("isLoading",!0),b.load(v,m,l,a.isExecutive,1,25,d,a.personId).then((function(){w.set("isLoading",!1)})),s.bindingContext=w):(a.refreshRemarks=!1,b.empty(),w.set("isLoading",!0),b.load(v,m,l,a.isProfileExecutive,1,25,d,a.personId).then((function(){w.set("isLoading",!1)})),s.bindingContext=w)}catch(e){y.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{g.topmost().goBack()}catch(e){y.alert(e)}},t.onAddTap=function(e){try{if(null===a.logonId)return u.request({url:a.apiBaseServiceUrl+"person/personinfo?personId="+a.personId,method:"GET",headers:{"Content-Type":"application/json",Authorization:a.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){a.logonId=e.LogonId})),L()}),(function(e){y.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))
L()}catch(e){y.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onSearchBarLoaded=function(e){c=e.object,n.isAndroid?c.android.clearFocus():n.isIOS&&(c.ios.searchBarStyle=UISearchBarStyle.UISearchBarStyleMinimal,c.ios.showsCancelButton=!0)},t.onSubmit=function(e){c=e.object,"Y"===l?a.remarksSearchTextGroup=c.text.trim():a.remarksSearchTextCompany=c.text.trim(),v=c.text.trim(),b.empty(),w.set("isLoading",!0),b.load(v,m,l,a.isProfileExecutive,1,25,d,a.personId).then((function(){w.set("isLoading",!1),h=!0,c.dismissSoftInput()}))},t.onClear=function(e){c.text="",v="","Y"===l?a.remarksSearchTextGroup="":a.remarksSearchTextCompany="",h&&(b.empty(),w.set("isLoading",!0),b.load(v,m,l,a.isProfileExecutive,1,25,d,a.personId).then((function(){w.set("isLoading",!1),h=!1,c.dismissSoftInput()})))},t.onItemTap=function(e){try{var t=e.view.bindingContext
t.isGroup=l
const o={moduleName:"companygroups/companygroup/remarktypes/remarks/remark/remark-page",context:t,clearHistory:!1}
g.topmost().navigate(o)}catch(e){y.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoadMoreItems=function(e){try{var t=b.length,o=Math.ceil(t/25)+1,i=t%25
if(0!==i&&i<25)return
w.set("isLoading",!0),b.load(v,m,l,a.isProfileExecutive,o,25,d,a.personId).then((function(){w.set("isLoading",!1)}))}catch(e){y.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarks-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarks-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarks-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n        <ActionItem tap="onAddTap" ios.systemIcon="4" android.systemIcon="ic_menu_add" ios.position="right" />\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" horizontalAlignment="center" direction="horizontal">\n            <SearchBar id="searchBar" hint="Search" text="" loaded="onSearchBarLoaded" submit="onSubmit" clear="onClear" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ remarksList }}" itemTap="onItemTap" loadMoreItems="onLoadMoreItems" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <GridLayout columns="*, auto" rows="*">\n                                    <Label row="0" col="0" text="{{ remarkType }}" textWrap="true" class="list-view-item-main-top" />\n                                    <Label row="0" col="1" text="{{ creationDate }}" class="list-view-item-main-top" />\n                                </GridLayout>\n                                <Label text="{{ commentAbbreviated }}" textWrap="true" class="list-view-item-sub" />\n                                <Label text="{{ companyName }}" textWrap="true" class="list-view-item-sub" style="font-style: italic;" />\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarks-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/remarktypes/remarks/remarks-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarks/remarks-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r,s,p,c,l,m){return i.request({url:t.apiBaseServiceUrl+"company/companyremarksfilter?filter="+e.replace(/ /g,"%20")+"&companyId="+a+"&isGroup="+r+"&isExecutive"+s+"&page="+p+"&pageSize="+c+"&remarkTypeCode="+l+"&creatorId="+m,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({remarksId:e.RemarksId,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,creationDate:e.CreationDate.substring(0,e.CreationDate.indexOf(" ")),completionDate:e.CompletionDate.substring(0,e.CompletionDate.indexOf(" ")),remarkTypeCode:e.RemarkTypeCode,remarkType:e.RemarkType,commentAbbreviated:e.CommentAbbreviated,comment:e.Comment,userName:e.UserName,publicPrivate:e.PublicPrivate,visitDate:e.VisitDate.substring(0,e.VisitDate.indexOf(" "))})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarks/remarks-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarks/remarks-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarktypes-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroup/remarktypes/remarktypes-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p,c=o("../node_modules/@nativescript/core/http/index.js"),l=o("../node_modules/@nativescript/core/ui/frame/index.js"),m=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),d=new i([]),u=new n.fromObject({remarkTypesList:d,isLoading:!1})
function g(){"8"!==s.remarkTypeCode&&new Date
const e={moduleName:"companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page",context:{remarksId:0,companyId:s.companyId,companyName:s.companyName,companyId0:null,groupId:null,groupName:null,publicPrivate:"Public",remarkTypeCode:"8",remarkType:"System Update",creationDate:new Date,completionDate:null,visitDate:null,userName:a.logonId,commentAbbreviated:null,comment:null},clearHistory:!1}
l.topmost().navigate(e)}t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,p=s.isGroup,r.actionBar.title="Remark Types",r.getViewById("companyName").text=s.companyName,d.empty(),u.set("isLoading",!0),d.load(s.companyId,p,a.isExecutive,a.personId).then((function(){u.set("isLoading",!1)})),r.bindingContext=u}catch(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{l.topmost().goBack()}catch(e){m.alert(e)}},t.onAddTap=function(e){try{if(null===a.logonId)return c.request({url:a.apiBaseServiceUrl+"person/personinfo?personId="+a.personId,method:"GET",headers:{"Content-Type":"application/json",Authorization:a.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){a.logonId=e.LogonId})),g()}),(function(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))
g()}catch(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{var t=e.view.bindingContext
t.isGroup=p
const o={moduleName:"companygroups/companygroup/remarktypes/remarks/remarks-page",context:t,clearHistory:!1}
l.topmost().navigate(o)}catch(e){m.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarktypes-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarktypes-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarktypes-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n        <ActionItem tap="onAddTap" ios.systemIcon="4" android.systemIcon="ic_menu_add" ios.position="right" />\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ remarkTypesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ remarkType }}" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarktypes-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroup/remarktypes/remarktypes-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroup/remarktypes/remarktypes-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r,s){return i.request({url:t.apiBaseServiceUrl+"company/companyremarktypes?companyId="+e+"&isGroup="+a+"&isExecutive="+r+"&creatorId="+s,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString(),a=JSON.parse(t)
a.forEach((function(e){void 0!==a[0].CompanyId&&null!==a[0].CompanyId&&o.push({companyId:e.CompanyId,companyName:e.CompanyName,remarkTypeCode:e.RemarkTypeCode,remarkType:e.RemarkType,sortOrder:e.SortOrder})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroup/remarktypes/remarktypes-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroup/remarktypes/remarktypes-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroups-page.js":function(e,t,o){(function(a){const i=o("./companygroups/companygroups-view-model.js"),n=o("../node_modules/@nativescript/core/platform/index.js"),r=o("../node_modules/@nativescript/core/data/observable/index.js")
var s=o("../node_modules/@nativescript/core/http/index.js"),p=o("../node_modules/@nativescript/core/ui/gestures/index.js"),c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
var m,d,u,g,y,v=!1,h=!1,b=!1,w="",L=!1,f="Y",k=new i([]),x=new r.fromObject({companyGroupsList:k,isGroup:y,isLoading:!1})
function S(e){const t={moduleName:"companygroups/companygroup/remarktypes/remarks/remarkadd/remarkadd-page",context:{remarksId:0,companyId:e.companyId,companyName:e.companyName,companyId0:null,groupId:null,groupName:null,publicPrivate:"Public",remarkTypeCode:"8",remarkType:"System Update",creationDate:new Date,completionDate:null,visitDate:null,userName:a.logonId,commentAbbreviated:null,comment:null},clearHistory:!1}
c.topmost().navigate(t)}t.onNavigatingTo=function(e){try{if(d=e.object,u=d.navigationContext,"Y"===(y=u.isGroup)?(d.actionBar.title="Groups",w=a.companyGroupsSearchText):(d.actionBar.title="Companies",w=a.companyGroupsSearchTextCompany),""!==w)d.getViewById("searchBar").text=w,L=!0
x.isGroup=y}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onSearchBarLoaded=function(e){try{g=e.object,n.isAndroid?g.android.clearFocus():n.isIOS&&(g.ios.searchBarStyle=UISearchBarStyle.UISearchBarStyleMinimal,g.ios.showsCancelButton=!0)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onSubmit=function(e){try{g=e.object,"Y"===y?a.companyGroupsSearchText=g.text.trim():a.companyGroupsSearchTextCompany=g.text.trim(),w=g.text.trim(),k.empty(),x.set("isLoading",!0),k.load(w,1,25,y,f).then((function(){x.set("isLoading",!1),L=!0,g.dismissSoftInput()}))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onClear=function(e){try{g.text="",w="","Y"===y?a.companyGroupsSearchText="":a.companyGroupsSearchTextCompany="",L&&(k.empty(),x.set("isLoading",!0),k.load(w,1,25,y,f).then((function(){x.set("isLoading",!1),L=!1,g.dismissSoftInput()})))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onSelectedIndexChanged=function(e){try{var t=e.newIndex
f=0===t?"Y":"N",k.empty(),x.set("isLoading",!0),k.load(w,1,25,y,f).then((function(){x.set("isLoading",!1),L=!0,g.dismissSoftInput()})),d.bindingContext=x}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemLoading=function(e){try{if(n.isIOS)e.ios.selectionStyle=UITableViewCellSelectionStyle.UITableViewCellSelectionStyleNone}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onItemTap=function(e){try{if(n.isIOS)if(v)m.animate({translate:{x:0,y:0},duration:200}),v=!1
else{var t=e.view.bindingContext
t.isGroup=y
const o={moduleName:"companygroups/companygroup/companygroup-page",context:t,clearHistory:!1}
c.topmost().navigate(o)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoadMoreItems=function(e){try{var t=k.length,o=Math.ceil(t/25)+1,a=t%25
if(0!==a&&a<25)return
x.set("isLoading",!0),k.load(w,o,25,y,f).then((function(){x.set("isLoading",!1)}))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLayoutLoaded=function(e){var t=e.object
n.isAndroid&&t.on(p.GestureTypes.tap,(function(e){try{if(v)m.animate({translate:{x:0,y:0},duration:200}),v=!1
else{var t=e.view.bindingContext
t.isGroup=y
const o={moduleName:"companygroups/companygroup/companygroup-page",context:t,clearHistory:!1}
c.topmost().navigate(o)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}})),t.on(p.GestureTypes.pan,(function(e){try{var t=e.object
e.view
if(v&&void 0!==m&&m!=t&&m.animate({translate:{x:0,y:0},duration:50}),h||b||(Math.abs(e.deltaY)>Math.abs(e.deltaX)?(h=!0,b=!1):Math.abs(e.deltaX)>Math.abs(e.deltaY)&&(h=!1,b=!0)),h)v&&void 0!==m&&m.animate({translate:{x:0,y:0},duration:50}),e.state===p.GestureStateTypes.ended&&(h=!1)
else if(b){var o=d.getViewById("companyGroupsListView")
n.isAndroid?o.nativeView.requestDisallowInterceptTouchEvent(!0):n.isIOS&&(o.ios.scrollEnabled=!1),v=!0,m=t
var a=t.translateX+e.deltaX
if(a>=-80&&a<=0&&(t.translateX=a),e.state===p.GestureStateTypes.ended&&-80!==a&&0!==a){let e=0
a<=-20?e=-80:a>=0&&(e=0),t.animate({translate:{x:e,y:0},duration:200}),n.isAndroid?o.nativeView.requestDisallowInterceptTouchEvent(!1):n.isIOS&&(o.ios.scrollEnabled=!0),b=!1}}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}}))},t.onRemarkClick=function(e){try{v&&(m.animate({translate:{x:0,y:0},duration:200}),v=!1)
var t=e.view.bindingContext
if(null===a.logonId)return s.request({url:a.apiBaseServiceUrl+"person/personinfo?personId="+a.personId,method:"GET",headers:{"Content-Type":"application/json",Authorization:a.token}}).then((function(e){var o=e.content.toString()
JSON.parse(o).forEach((function(e){a.logonId=e.LogonId})),S(t)}),(function(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))
S(t)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./companygroups/companygroups-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./companygroups/companygroups-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroups-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar" />\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center">\n            <SearchBar id="searchBar" hint="Search" text="" loaded="onSearchBarLoaded" submit="onSubmit" clear="onClear" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" visibility="{{ isGroup === \'Y\' ? \'collapse\' : \'visible\' }}">\n            <SegmentedBar class="segmented-bar" selectedIndexChanged="onSelectedIndexChanged">\n                <SegmentedBar.items>\n                    <SegmentedBarItem title="Member Companies" />\n                    <SegmentedBarItem title="All Companies" />\n                </SegmentedBar.items>\n            </SegmentedBar>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView id="companyGroupsListView" items="{{ companyGroupsList }}" itemLoading="onItemLoading" itemTap="onItemTap" loadMoreItems="onLoadMoreItems" height="100%">\n                <ListView.itemTemplate>\n                    <AbsoluteLayout>\n                        \x3c!-- BACKGROUND: Swipe Actions --\x3e\n                        <GridLayout columns="*, 80" android:rows="48" ios:rows="55" width="100%">\n                            <Label col="0" />\n                            <GridLayout col="1" columns="*" rows="*, auto, auto, *" tap="onRemarkClick" class="swipe-icons green">\n                                <Label row="0" col="0" text="" />\n                                <Label row="1" col="0" text="&#xf075;" class="tab-icon" />\n                                <Label row="2" col="0" text="Remark" class="tab-label" />\n                                <Label row="3" col="0" text="" />\n                            </GridLayout>\n                        </GridLayout>\n                        \x3c!-- FOREGROUND: List View Item Details --\x3e\n                        <StackLayout loaded="onLayoutLoaded" backgroundColor="white" width="100%">\n                            <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                                <StackLayout row="0" col="0" verticalAlignment="middle">\n                                    <Label text="{{ companyName }}" class="list-view-item-main-top" />\n                                    <Label text="{{ membershipType }}" textWrap="true" class="list-view-item-sub" />\n                                </StackLayout>\n                                <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                            </GridLayout>\n                        </StackLayout>\n                    </AbsoluteLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroups-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./companygroups/companygroups-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./companygroups/companygroups-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r,s,p){return i.request({url:t.apiBaseServiceUrl+"company/companyfilter?filter="+e.replace(/ /g,"%20").replace(/‘/g,"'").replace(/’/g,"'")+"&isGroup="+s+"&page="+a+"&pageSize="+r+"&memberOnly="+p,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a
null!==e.CompanyId&&0!==e.CompanyId&&(t="Y"===e.AutoCoSelect?"Yes":"No",a="Y"===e.InclinProfile?"Yes":"No",o.push({companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,holdCompanyId:e.HoldCompanyId,holdCompany:e.HoldCompany,mapCompanyId:e.MapCompanyId,mapCompany:e.MapCompany,autoCoSelect:t,inclinProfile:a,compRemovedDate:e.CompRemovedDate,numberedAmBest:e.NumberedAmBest,numberedNaic:e.NumberedNaic.toUpperCase(),numberedNaii:e.NumberedNaii,statusCode:e.StatusCode,status:e.Status,companyFoundedDate:e.CompanyFoundedDate,domiciledStateCode:e.DomiciledStateCode,domiciledState:e.DomiciledState,domiciledCountryCode:e.DomiciledCountryCode,domiciledCountry:e.DomiciledCountry,marketingType:e.MarketingType,structure:e.Structure,membershipTypeCode:e.MembershipTypeCode,membershipType:e.MembershipType,isMember:e.IsMember,webAccessCode:e.WebAccessCode,webAccess:e.WebAccess,webAccessEndDate:e.WebAccessEndDate,affiliations:e.Affiliations,accountManagerId:e.AccountManagerId,accountManager:e.AccountManager}))}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./companygroups/companygroups-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./companygroups/companygroups-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./home/home-page.js":function(e,t,o){(function(a){const i=o("./home/home-view-model.js")
t.onNavigatingTo=function(e){e.object.bindingContext=new i},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./home/home-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./home/home-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./home/home-page.xml":function(e,t,o){(function(t){e.exports='<Page class="page"\n    navigatingTo="onNavigatingTo"  \n    xmlns="http://schemas.nativescript.org/tns.xsd">\n\n    <ActionBar class="action-bar">\n        <Label class="action-bar-title" text="Home"></Label>\n    </ActionBar>\n\n    <GridLayout>\n        \x3c!-- Add your page content here --\x3e\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./home/home-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./home/home-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./home/home-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/data/observable/index.js")
e.exports=function(){return a.fromObject({})},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./home/home-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./home/home-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./login/login-page.js":function(e,t,o){(function(a){const i=o("./login/login-view-model.js"),n=o("../node_modules/@nativescript/core/platform/index.js"),r=(o("../node_modules/@nativescript/core/data/observable/index.js"),o("../node_modules/@nativescript/core/application-settings/index.js")),s=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
var p=o("../node_modules/@nativescript/core/utils/utils.js")
var c,l,m,d,u,g=new(o("../node_modules/nativescript-fingerprint-auth/fingerprint-auth.js").FingerprintAuth),y=(o("../node_modules/@nativescript/core/ui/core/view/index.js"),o("../node_modules/@proplugins/nativescript-orientation/orientation.js"))
t.onNavigatingTo=function(e){y.disableRotation()},t.onLoaded=function(e){c=e.object,(l=new i).email=r.getString("email",""),l.password=r.getString("password",""),l.rememberMe=r.getBoolean("rememberMe",!1),l.useTouchId=r.getBoolean("useTouchId",!1),c.bindingContext=l},t.onNavigatedTo=function(e){try{n.isIOS&&l.useTouchId&&g.available().then(g.verifyFingerprint({message:"Log on to view Profile information"}).then(()=>{c.bindingContext.signIn(null)},e=>{s.alert("Fingerprint NOT OK. Error code: "+e.code+". Error message: "+e.message)}))}catch(e){s.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onSigninButtonTap=function(e){try{let o=e.object
var t
m=o.page.getViewById("email"),d=o.page.getViewById("password"),u=o.page.getViewById("rememberMe"),r.setBoolean("rememberMe",u.checked),u.checked?(r.setString("email",m.text),r.setString("password",d.text)):(r.setBoolean("useTouchId",!1),r.setString("email",""),r.setString("password","")),g.available().then(e=>{t=e.touch?"touch":"face",l.signIn(t)}).catch(e=>{t=null,l.signIn(t)})}catch(e){s.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onForgotPasswordTap=function(){p.openUrl("https://www.pciaa.net/pciwebsite/Accounts/forgotpassword.aspx")},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./login/login-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./login/login-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./login/login-page.xml":function(e,t,o){(function(t){e.exports='<Page class="page" navigatingTo="onNavigatingTo" loaded="onLoaded" navigatedTo="onNavigatedTo" xmlns="http://schemas.nativescript.org/tns.xsd" style="margin-top: 0;">\n    <ScrollView class="login-background">\n        <GridLayout columns="*" rows="*, auto, auto, auto, auto, auto" height="100%" width="100%">\n            <StackLayout row="0" col="0" verticalAlignment="center" horizontalAlignment="center">\n                <Image src="res://login" android:stretch="aspectFill" ios:stretch="none"></Image>\n            </StackLayout>\n            <StackLayout row="1" col="0" orientation="vertical" backgroundColor="#eee" verticalAlignment="bottom" margin="0 10 0 10" borderRadius="5">\n                <StackLayout orientation="horizontal" class="login-field">\n                    <StackLayout width="10%" verticalAlignment="center">\n                        <Image src="res://email" android:stretch="aspectFill" ios:stretch="none"></Image>\n                    </StackLayout>\n                    <StackLayout width="90%" verticalAlignment="center">\n                        <TextField id="email" hint="Email" keyboardType="email" autocorrect="false" autocapitalization="none"\n                            text="{{ email }}" width="100%" textAlignment="left"></TextField>\n                    </StackLayout>\n                </StackLayout>\n            </StackLayout>\n            <StackLayout row="2" col="0" orientation="vertical" backgroundColor="#eee" verticalAlignment="bottom" margin="5 10 0 10" borderRadius="5">\n                <StackLayout orientation="horizontal" class="login-field">\n                    <StackLayout width="10%" verticalAlignment="center">\n                        <Image src="res://password" android:stretch="aspectFill" ios:stretch="none"></Image>\n                    </StackLayout>\n                    <StackLayout width="90%" verticalAlignment="center">\n                        <TextField id="password" hint="Password" secure="true" autocorrect="false" autocapitalization="none"\n                            text="{{ password }}" width="100%" textAlignment="left"></TextField>\n                    </StackLayout>\n                </StackLayout>\n            </StackLayout>\n            <StackLayout row="3" col="0" orientation="vertical" backgroundColor="#eee" verticalAlignment="bottom" margin="5 10 0 10" borderRadius="5">\n                <StackLayout orientation="horizontal" class="login-field-switch">\n                    <StackLayout width="40%" verticalAlignment="center">\n                        <Label text="Remember Me" horizontalAlignment="left" />\n                    </StackLayout>\n                    <StackLayout width="60%" verticalAlignment="center">\n                        <Switch id="rememberMe" checked="{{ rememberMe }}" horizontalAlignment="right" class="switch" />\n                    </StackLayout>\n                </StackLayout>\n            </StackLayout>\n            <StackLayout row="4" col="0" orientation="vertical" verticalAlignment="top" margin="0 10 0 10">\n                <Button class="login-button" text="Sign In" tap="onSigninButtonTap"></Button>\n            </StackLayout>\n            <StackLayout row="5" col="0" orientation="vertical" verticalAlignment="top" margin="5 10 30 10">\n                <Button class="forgot-button" text="Forgot Password?" tap="onForgotPasswordTap"></Button>\n            </StackLayout>\n            \x3c!-- <Label class="m-t-10 m-b-10 m-l-15 m-r-15" text="Forgot password?" tap="onForgotPasswordTap"></Label> --\x3e\n        </GridLayout>\n    </ScrollView>\n</Page>',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./login/login-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./login/login-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./login/login-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/platform/index.js"),i=o("../node_modules/@nativescript/core/data/observable/index.js")
var n=o("../node_modules/@nativescript/core/ui/frame/index.js"),r=o("../node_modules/@nativescript/core/application-settings/index.js"),s=o("../node_modules/@nativescript/core/http/index.js"),p=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(){return i.fromObject({email:"",password:"",rememberMe:!1,useTouchId:!1,signIn:function(e){const o=this.email,i=this.password
s.request({url:t.apiLoginUrl,method:"POST",headers:{"Content-Type":"application/json"},content:JSON.stringify({EmailAddress:o,Password:i,Scope:t.scope})}).then((function(o){var i=o.content.toString(),s=JSON.parse(i)
if(void 0!==s.AccessToken&&null!==s.AccessToken)if(t.token=s.AccessToken,t.token.toLowerCase().indexOf("pci.everyone")>0&&(t.isPci=!0),t.token.toLowerCase().indexOf("profile+executive")>0&&(t.isProfileExecutive=!0,t.isExecutive="Y"),t.token.toLowerCase().indexOf("profile+manager")>0&&(t.isProfileEngagement=!0,t.isProfileManager=!0,t.isExecutive="Y"),t.token.toLowerCase().indexOf("profile+political+engagement")>0&&(t.isProfileEngagement=!0),t.token.toLowerCase().indexOf("profile+fgr")>0&&(t.isProfileEngagement=!0),t.token.toLowerCase().indexOf("profile+accounting")>0&&(t.isProfileAccounting=!0),t.token.toLowerCase().indexOf("profile+public+affairs")>0&&(t.isProfileMembership=!0),t.token.toLowerCase().indexOf("profile+membership")>0&&(t.isProfileMembership=!0),t.token.toLowerCase().indexOf("profile+user")>0&&(t.isProfileUser=!0),t.isProfileExecutive||t.isProfileManager||t.isProfileMembership||t.isProfileUser||t.isPci){var c=token.toLowerCase().indexOf("&personid=")+10,l=token.toLowerCase().indexOf("&firstname=")
t.personId=token.slice(c,l)
var m=token.toLowerCase().indexOf("&fullname=")+10,d=token.toLowerCase().indexOf("&streetaddress1=")
t.currentUser=decodeURIComponent(token.slice(m,d)).replace("+"," ")
const o={moduleName:"main-page",clearHistory:!0}
var u=r.getBoolean("useTouchId",!1),g=r.getBoolean("rememberMe",!1)
if((null==u||!1===u)&&"touch"===e&&g&&a.isIOS)p.confirm({title:'Touch ID for "ProMo"',message:"Would you like to use the fingerprint scanner to log on in the future?",okButtonText:"Yes",cancelButtonText:"No"}).then((function(e){if(e){r.setBoolean("useTouchId",!0)
try{n.topmost().navigate(o)}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}}else{r.setBoolean("useTouchId",!1)
try{n.topmost().navigate(o)}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}}}))
else if((null==u||!1===u)&&"face"===e&&g&&a.isIOS)r.setBoolean("useTouchId",!0)
else try{n.topmost().navigate(o)}catch(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}}else p.alert("Unauthorized user account.")
else p.alert("Invalid email address or password.")}),(function(e){p.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))}})},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./login/login-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./login/login-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./main-page.js":function(e,t,o){(function(a){const i=o("../node_modules/@nativescript/core/application/index.js")
var n,r=o("../node_modules/@nativescript/core/ui/frame/index.js"),s=o("../node_modules/@nativescript/core/ui/layouts/grid-layout/index.js"),p=o("../node_modules/@nativescript/core/ui/layouts/stack-layout/index.js"),c=o("../node_modules/@nativescript/core/ui/label/index.js").Label,l=o("../node_modules/@proplugins/nativescript-orientation/orientation.js")
function m(e){var t,o,a=e.object,i=a.id.substring(a.id.indexOf("tab_")+4)
if(a.className.indexOf("tab-selected")>-1){var r=n.getViewById("navigation-frame")
if(n.tabItems[i].label===r.currentPage.actionBar.title)return}n._tabs.forEach((function(e){e.className="tab"})),a.className="tab tab-selected",t=n.tabItems[i],o={moduleName:t.path,context:{reference:"tab",isGroup:t.isGroup},clearHistory:!0},n.navFrame.navigate(o)}t.onNavigatingTo=function(e){l.enableRotation(),(n=e.object)._tabs=[],n.tabItems=[{path:"companygroups/companygroups-page",iconCode:"",label:"Groups",isGroup:"Y"},{path:"companygroups/companygroups-page",iconCode:"",label:"Companies",isGroup:"N"},{path:"people/people-page",iconCode:"",label:"People",isGroup:"N"},{path:"committeetypes/committeetypes-page",iconCode:"",label:"Committees",isGroup:"N"}]
var t=n.tabItems.length,o=new s.GridLayout
o.id="tab-navigation",o.addRow(new s.ItemSpec(1,"star")),o.addRow(new s.ItemSpec(1,"auto"))
for(var a=0;a<t;a++)o.addColumn(new s.ItemSpec(1,"star"))
var d=new p.StackLayout
for(n.navFrame=new r.Frame,n.navFrame.id="navigation-frame",n.navFrame.className="navigation-frame",d.addChild(n.navFrame),o.addChild(d),s.GridLayout.setColumn(d,0),s.GridLayout.setRow(d,0),s.GridLayout.setColumnSpan(d,t),a=0;a<t;a++){var u=n.tabItems[a],g=new p.StackLayout
g.direction="vertical",g.className=0===a?"tab tab-selected":"tab",g.id="tab_"+a,g.on("tap",(function(e){return m(e)}))
var y=new c
y.className="tab-icon",y.text=u.iconCode,g.addChild(y)
var v=new c
v.className="tab-label",v.text=u.label,g.addChild(v),n._tabs.push(g),o.addChild(g),s.GridLayout.setRow(g,1),s.GridLayout.setColumn(g,a)}n.content=o,i.getResources().dateConverter=(e,t)=>{let o=t
if(null==e);else{const t=e.getDate()
o=o.replace("DD",t<10?"0"+t:t)
const a=e.getMonth()+1
o=o.replace("MM",a<10?"0"+a:a),o=o.replace("YYYY",e.getFullYear())}return o},i.getResources().dateFormat="MM/DD/YYYY",i.getResources().currencyConverter=e=>null==e?null:"$"+e.toFixed().replace(/(\d)(?=(\d{3})+(,|$))/g,"$1,")
var h={moduleName:n.tabItems[0].path,context:{reference:"tab",isGroup:n.tabItems[0].isGroup},clearHistory:!0}
n.navFrame.navigate(h)},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./main-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./main-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./main-page.xml":function(e,t,o){(function(t){e.exports='<Page xmlns="http://schemas.nativescript.org/tns.xsd" backgroundSpanUnderStatusBar="true" actionBarHidden="true" navigatingTo="onNavigatingTo">\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./main-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./main-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/people-page.js":function(e,t,o){(function(a){const i=o("./people/people-view-model.js"),n=o("../node_modules/@nativescript/core/platform/index.js"),r=o("../node_modules/@nativescript/core/data/observable/index.js")
var s=o("../node_modules/@nativescript/core/ui/gestures/index.js"),p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/http/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=o("../node_modules/nativescript-email/email.js"),d=o("../node_modules/nativescript-phone/index.js")
var u,g,y,v,h,b=!1,w=!1,L=!1,f="",k=!1,x=0,S=new i([]),j=new r.fromObject({peopleList:S,companyId:x,reference:"tab",isLoading:!1})
function I(e){const t={moduleName:"people/person/remarks/remarkadd/remarkadd-page",context:{remarksId:0,personId:e.personId,fullName:e.fullName,publicPrivate:"Public",remarkTypeCode:"8",remarkType:"System Update",creationDate:new Date,completionDate:null,visitDate:null,userName:a.logonId,commentAbbreviated:null,comment:null,copyToCompanyFlag:"true"},clearHistory:!1}
p.topmost().navigate(t)}t.onNavigatingTo=function(e){try{if((g=e.object).actionBar.title="People","tab"===(y=g.navigationContext).reference?j.reference="tab":j.reference="nav",h=y.isGroup,x=void 0!==y.companyId&&null!==y.companyId&&0!==y.companyId?y.companyId:0,j.companyId=x,g.getViewById("companyName").text=y.companyName,""!==(f="tab"===y.reference?a.peopleSearchText:"Y"===h?a.peopleSearchTextGroup:a.peopleSearchTextCompany))g.getViewById("searchBar").text=f,k=!0
e.isBackNavigation||(S.empty(),j.set("isLoading",!0),S.load(f,h,1,25,x).then((function(){j.set("isLoading",!1)})),g.bindingContext=j)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){l.alert(e)}},t.onSearchBarLoaded=function(e){v=e.object,n.isAndroid?v.android.clearFocus():n.isIOS&&(v.ios.searchBarStyle=UISearchBarStyle.UISearchBarStyleMinimal,v.ios.showsCancelButton=!0)},t.onSubmit=function(e){v=e.object,"tab"===y.reference?a.peopleSearchText=v.text.trim():"Y"===h?a.peopleSearchTextGroup=v.text.trim():a.peopleSearchTextCompany=v.text.trim(),f=v.text.trim(),S.empty(),j.set("isLoading",!0),S.load(f,h,1,25,x).then((function(){j.set("isLoading",!1),k=!0,v.dismissSoftInput()}))},t.onClear=function(e){v.text="",f="","tab"===y.reference?a.peopleSearchText="":"Y"===h?a.peopleSearchTextGroup="":a.peopleSearchTextCompany="",k&&(S.empty(),j.set("isLoading",!0),S.load(f,h,1,25,x).then((function(){j.set("isLoading",!1),k=!1,v.dismissSoftInput()})))},t.onItemLoading=function(e){n.isIOS&&(e.ios.selectionStyle=UITableViewCellSelectionStyle.UITableViewCellSelectionStyleNone)},t.onItemTap=function(e){try{if(n.isIOS)if(b)u.animate({translate:{x:0,y:0},duration:200}),b=!1
else{const t={moduleName:"people/person/person-page",context:e.view.bindingContext,clearHistory:!1}
p.topmost().navigate(t)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoadMoreItems=function(e){try{var t=S.length,o=Math.ceil(t/25)+1,a=t%25
if(0!==a&&a<25)return
j.set("isLoading",!0),S.load(f,h,o,25,x).then((function(){j.set("isLoading",!1)}))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLayoutLoaded=function(e){var t=e.object
n.isAndroid&&t.on(s.GestureTypes.tap,(function(e){try{if(b)u.animate({translate:{x:0,y:0},duration:200}),b=!1
else{const t={moduleName:"people/person/person-page",context:e.view.bindingContext,clearHistory:!1}
p.topmost().navigate(t)}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}})),t.on(s.GestureTypes.pan,(function(e){try{var t=e.object
e.view
if(b&&void 0!==u&&u!=t&&u.animate({translate:{x:0,y:0},duration:50}),w||L||(Math.abs(e.deltaY)>Math.abs(e.deltaX)?(w=!0,L=!1):Math.abs(e.deltaX)>Math.abs(e.deltaY)&&(w=!1,L=!0)),w)b&&void 0!==u&&u.animate({translate:{x:0,y:0},duration:50}),e.state===s.GestureStateTypes.ended&&(w=!1)
else if(L){var o=g.getViewById("peopleListView")
n.isAndroid?o.nativeView.requestDisallowInterceptTouchEvent(!0):n.isIOS&&(o.ios.scrollEnabled=!1),b=!0,u=t
var a=t.translateX+e.deltaX
if(a>=-80&&a<=160&&(t.translateX=a),e.state===s.GestureStateTypes.ended&&-80!==a&&160!==a){let e=0
a<=-20?e=-80:a>=40&&(e=160),t.animate({translate:{x:e,y:0},duration:200}),n.isAndroid?o.nativeView.requestDisallowInterceptTouchEvent(!1):n.isIOS&&(o.ios.scrollEnabled=!0),L=!1}}}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}}))},t.onPhoneClick=function(e){try{b&&(u.animate({translate:{x:0,y:0},duration:200}),b=!1)
var t=e.view.bindingContext
d.dial(t.workPhone,!1)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onEmailClick=function(e){try{b&&(u.animate({translate:{x:0,y:0},duration:200}),b=!1)
var t=e.view.bindingContext
m.compose({to:[t.emailAddress]})}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onRemarkClick=function(e){try{b&&(u.animate({translate:{x:0,y:0},duration:200}),b=!1)
var t=e.view.bindingContext
if(null===a.logonId)return c.request({url:a.apiBaseServiceUrl+"person/personinfo?personId="+a.personId,method:"GET",headers:{"Content-Type":"application/json",Authorization:a.token}}).then((function(e){var o=e.content.toString()
JSON.parse(o).forEach((function(e){a.logonId=e.LogonId})),I(t)}),(function(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))
I(t)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/people-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/people-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/people-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" visibility="{{ reference === \'tab\' ? \'collapse\' : \'visible\' }}" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title" visibility="{{ companyId === 0 ? \'collapse\' : \'visible\' }}">\n            <Label id="companyName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" horizontalAlignment="center" direction="horizontal">\n            <SearchBar id="searchBar" hint="Search" text="" loaded="onSearchBarLoaded" submit="onSubmit" clear="onClear" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView id="peopleListView" items="{{ peopleList }}" itemLoading="onItemLoading" itemTap="onItemTap" loadMoreItems="onLoadMoreItems" height="100%">\n                <ListView.itemTemplate>\n                    <AbsoluteLayout>\n                        \x3c!-- BACKGROUND: Swipe Actions --\x3e\n                        <GridLayout columns="80, 80, *, 80" rows="74" width="100%">\n                            <GridLayout col="0" columns="*" rows="*, auto, auto, *" tap="onPhoneClick" class="swipe-icons orange">\n                                <Label row="0" col="0" text="" />\n                                <Label row="1" col="0" text="&#xf095;" class="tab-icon" />\n                                <Label row="2" col="0" text="Phone" class="tab-label" />\n                                <Label row="3" col="0" text="" />\n                            </GridLayout>\n                            <GridLayout col="1" columns="*" rows="*, auto, auto, *" tap="onEmailClick" class="swipe-icons blue">\n                                <Label row="0" col="0" text="" />\n                                <Label row="1" col="0" text="&#xf0e0;" class="tab-icon" />\n                                <Label row="2" col="0" text="Email" class="tab-label" />\n                                <Label row="3" col="0" text="" />\n                            </GridLayout>\n                            <Label col="2" />\n                            <GridLayout col="3" columns="*" rows="*, auto, auto, *" tap="onRemarkClick" class="swipe-icons green">\n                                <Label row="0" col="0" text="" />\n                                <Label row="1" col="0" text="&#xf075;" class="tab-icon" />\n                                <Label row="2" col="0" text="Remark" class="tab-label" />\n                                <Label row="3" col="0" text="" />\n                            </GridLayout>\n                        </GridLayout>\n                        \x3c!-- FOREGROUND: List View Item Details --\x3e\n                        <StackLayout loaded="onLayoutLoaded" backgroundColor="white" width="100%">\n                            <GridLayout columns="*, auto" rows="*" class="list-view-item" height="74">\n                                <StackLayout row="0" col="0" verticalAlignment="middle">\n                                    <Label text="{{ fullName }}" class="list-view-item-main-top" />\n                                    <Label text="{{ title }}" textWrap="true" class="list-view-item-sub" />\n                                    <Label text="{{ companyName }}" textWrap="true" class="list-view-item-sub" />\n                                </StackLayout>\n                                <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                            </GridLayout>\n                        </StackLayout>\n                    </AbsoluteLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/people-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/people-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/people-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r,s,p){return i.request({url:t.apiBaseServiceUrl+"person/personfilter?filter="+e.replace(/ /g,"%20").replace(/‘/g,"'").replace(/’/g,"'")+"&isGroup="+a+"&page="+r+"&pageSize="+s+"&companyId="+p,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){if(null!==e.PersonId&&0!==e.PersonId){var t,a
if(null===e.WebAccessEndDate||0===e.WebAccessEndDate.length)t=null
else t=-1===e.WebAccessEndDate.indexOf(" ")?e.WebAccessEndDate:e.WebAccessEndDate.substring(0,e.WebAccessEndDate.indexOf(" "))
a=null===e.BioPlainText||0===e.BioPlainText.length?"":e.BioPlainText+new Array(Math.round(.005*e.BioPlainText.length)).join("\n"),o.push({personId:e.PersonId,prefix:e.Prefix,firstName:e.FirstName,middleName:e.MiddleName,lastName:e.LastName,suffix:e.Suffix,fullName:e.FullName,informalSalutation:e.InformalSalutation,title:e.Title,personCompany:e.PersonCompany,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,webAccessCode:e.WebAccessCode,webAccessGroupType:e.WebAccessGroupType,webAccessEndDate:t,webAccessComment:e.WebAccessComment,webAccess:e.WebAccess,webRegistered:e.WebRegistered,logonId:e.LogonId,departmentId:e.DepartmentId,department:e.Department,supervisorId:e.SupervisorId,supervisor:e.Supervisor,ddScopeId:e.DdScopeId,ddScope:e.DdScope,ddFormatId:e.DdFormatId,ddFormat:e.DdFormat,profileReportStatusCode:e.ProfileReportStatusCode,profileReportStatus:e.ProfileReportStatus,profileChangesNeeded:e.ProfileChangesNeeded,profileReportDate:e.ProfileReportDate,lastLicenseAgreeDate:e.LastLicenseAgreeDate,lastPasswordChangeDate:e.LastPasswordChangeDate,mainAddressesId:e.MainAddressesId,streetAddress:e.StreetAddress,address1:e.Address1,address2:e.Address2,city:e.City,stateCode:e.StateCode,state:e.State,postalCode:e.PostalCode,countryCode:e.CountryCode,country:e.Country,poBox:e.PoBox,poBoxCity:e.PoBoxCity,poBoxStateCode:e.PoBoxStateCode,poBoxState:e.PoBoxState,poBoxPostalCode:e.PoBoxPostalCode,emailAddress:e.EmailAddress,workPhone:e.WorkPhone,extension:e.Extension,cellPhone:e.CellPhone,fax:e.Fax,bio:a,secretaryId:e.SecretaryId,secretary:e.Secretary,secretaryTitle:e.SecretaryTitle,secretaryEmailAddress:e.SecretaryEmailAddress,secretaryWorkPhone:e.SecretaryWorkPhone,secretaryExtension:e.SecretaryExtension,secretaryFax:e.SecretaryFax})}}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/people-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/people-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/attributes/attributes-page.js":function(e,t,o){(function(a){o("../node_modules/@nativescript/core/data/observable/index.js")
var i=o("../node_modules/@nativescript/core/ui/frame/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),r=o("../node_modules/nativescript-email/email.js"),s=o("../node_modules/nativescript-phone/index.js")
t.onNavigatingTo=function(e){const t=e.object
var o=t.navigationContext
t.actionBar.title="Attributes",t.bindingContext=o},t.onBackTap=function(e){try{i.topmost().goBack()}catch(e){n.alert(e)}},t.onPhoneTap=function(e){try{var t=e.object.text
s.dial(t,!1)}catch(e){n.alert(e)}},t.onMobileTap=function(e){try{var t=e.object.text
s.dial(t,!1)}catch(e){n.alert(e)}},t.onEmailTap=function(e){try{var t=e.object.text
r.compose({to:[t]})}catch(e){n.alert(e)}},t.onSecretaryPhoneTap=function(e){try{var t=e.object.text
s.dial(t,!1)}catch(e){n.alert(e)}},t.onSecretaryEmailTap=function(e){try{var t=e.object.text
r.compose({to:[t]})}catch(e){n.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/attributes/attributes-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/attributes/attributes-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/attributes/attributes-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <ScrollView>\n        <GridLayout columns="*" rows="auto, *" width="100%">\n            <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n                <Label id="fullName" text="{{ fullName }}" horizontalAlignment="center" />\n            </StackLayout>\n            <StackLayout row="1" col="0">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Informal Name" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ informalSalutation }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, *" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Title" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ title }}" textWrap="true" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, *" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Company" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ personCompany }}" textWrap="true" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header" visibility="{{ secretary.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label text="ASSISTANT INFORMATION" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ secretary.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Name" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ secretary }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, *" rows="auto" class="list-view-item-form" visibility="{{ secretary.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Title" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ secretaryTitle }}" textWrap="true" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ secretary.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Phone" class="list-view-item-left" />\n                    <StackLayout row="0" col="1" orientation="horizontal">\n                        <Label text="{{ secretaryWorkPhone }}" tap="onSecretaryPhoneTap" horizontalAlignment="right" class="list-view-item-phone" />\n                        <Label text="{{ \' x\' + secretaryExtension }}" horizontalAlignment="right" class="list-view-item-right" visibility="{{ secretaryExtension.length > 0 ? \'visible\' : \'collapse\' }}" />\n                    </StackLayout>\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ secretary.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Fax" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ secretaryFax }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, *" rows="auto" class="list-view-item-form-bottom" visibility="{{ secretary.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Email" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ secretaryEmailAddress }}" textWrap="true" tap="onSecretaryEmailTap" horizontalAlignment="right" class="list-view-item-email" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="CONTACT INFORMATION" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Phone" class="list-view-item-left" />\n                    <StackLayout row="0" col="1" orientation="horizontal">\n                        <Label text="{{ workPhone }}" tap="onPhoneTap" horizontalAlignment="right" class="list-view-item-phone" />\n                        <Label text="{{ \' x\' + extension }}" horizontalAlignment="right" class="list-view-item-right" visibility="{{ extension.length > 0 ? \'visible\' : \'collapse\' }}" />\n                    </StackLayout>\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Mobile" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ cellPhone }}" tap="onMobileTap" horizontalAlignment="right" class="list-view-item-phone" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Fax" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ fax }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="auto, *" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Email" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ emailAddress }}" textWrap="true" tap="onEmailTap" horizontalAlignment="right" class="list-view-item-email" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                    <Label text="ADDRESS INFORMATION" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="auto, *" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Street Address" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ streetAddress }}" textWrap="true" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="City" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ city }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="State" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ state }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom">\n                    <Label row="0" col="0" text="Postal Code" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ postalCode }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <StackLayout verticalAlignment="bottom" class="list-view-section-header" visibility="{{ poBox.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label text="P.O. BOX INFORMATION" verticalAlignment="bottom" />\n                </StackLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ poBox.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="P.O. Box" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ poBox }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ poBox.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="City" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ poBoxCity }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ poBox.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="State" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ poBoxState }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form-bottom" visibility="{{ poBox.length > 0 ? \'visible\' : \'collapse\' }}">\n                    <Label row="0" col="0" text="Postal Code" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ poBoxPostalCode }}" horizontalAlignment="right" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n        </GridLayout>\n    </ScrollView>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/attributes/attributes-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/attributes/attributes-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/bio/bio-page.js":function(e,t,o){(function(a){o("../node_modules/@nativescript/core/data/observable/index.js")
var i=o("../node_modules/@nativescript/core/ui/frame/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
t.onNavigatingTo=function(e){const t=e.object
var o=t.navigationContext
t.actionBar.title="Bio",t.bindingContext=o},t.onBackTap=function(e){try{i.topmost().goBack()}catch(e){n.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/bio/bio-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/bio/bio-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/bio/bio-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <ScrollView>\n        <GridLayout columns="*" rows="auto, *" width="100%">\n            <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title-space">\n                <Label id="fullName" text="{{ fullName }}" horizontalAlignment="center" />\n            </StackLayout>\n            \x3c!-- <TextView row="1" col="0" text="{{ bio }}" editable="false" class="scroll-view-item" /> --\x3e\n            <StackLayout row="1" col="0">\n                <Label text="{{ bio }}" editable="false" class="scroll-view-item-bio" textWrap="true" />\n            </StackLayout>\n        </GridLayout>\n    </ScrollView>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/bio/bio-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/bio/bio-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/committees/committees-page.js":function(e,t,o){(function(a){const i=o("./people/person/committees/committees-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({committeesList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Committees",r.getViewById("fullName").text=s.fullName,e.isBackNavigation}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},t.onSelectedIndexChanged=function(e){try{var t=e.newIndex+1
l.empty(),m.set("isLoading",!0),l.load(s.personId,t).then((function(){m.set("isLoading",!1)})),r.bindingContext=m}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/committees/committees-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/committees/committees-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/committees/committees-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center">\n            <SegmentedBar class="segmented-bar" selectedIndexChanged="onSelectedIndexChanged">\n                <SegmentedBar.items>\n                    <SegmentedBarItem title="Committees" />\n                    <SegmentedBarItem title="Contact Lists" />\n                    <SegmentedBarItem title="Temporary Lists" />\n                </SegmentedBar.items>\n            </SegmentedBar>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ committeesList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout class="list-view-item">\n                        <StackLayout orientation="horizontal">\n                            <Label text="{{ committee }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label text="&#xf005;" class="fn-list-view-item-small" verticalAlignment="middle" visibility="{{ memberTypeCode === \'M\' ? \'visible\' : \'collapse\' }}" />\n                        </StackLayout>\n                        \x3c!-- <Label text="{{ committee }}" textWrap="true" class="list-view-item-main-top" /> --\x3e\n                        <Label text="{{ designatedMember === \'N\' ? positionCode === 10 ? memberType : position : positionCode === 10 ? memberType : position }}" class="list-view-item-sub" visibility="{{ committeeListCode === 1 ? \'visible\' : \'collapse\' }}" />\n                        <Label text="{{ endDate === null ? \'Since \' + startDate : startDate + \' to \' + endDate }}" class="list-view-item-sub" />\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/committees/committees-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/committees/committees-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/committees/committees-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"person/personcommittees?personId="+e+"&committeeListCode="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a
null!==e.PersonId&&(t=null===e.StartDate||0===e.StartDate.length?null:e.StartDate.substring(0,e.StartDate.indexOf(" ")),a=null===e.EndDate||0===e.EndDate.length?null:e.EndDate.substring(0,e.EndDate.indexOf(" ")),o.push({personId:e.PersonId,fullName:e.FullName,committeeListCode:e.CommitteeListCode,committeeList:e.CommitteeList,committeeCode:e.CommitteeCode,committee:e.Committee,positionCode:e.PositionCode,position:e.Position,designatedMember:e.DesignatedMember,memberTypeCode:e.MemberTypeCode,memberType:e.MemberType,startDate:t,endDate:a}))}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/committees/committees-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/committees/committees-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/contacts/contacts-page.js":function(e,t,o){(function(a){const i=o("./people/person/contacts/contacts-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({contactsList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,s.isGroup,r.actionBar.title="Contact for Companies",r.getViewById("fullName").text=s.fullName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.personId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/contacts/contacts-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/contacts/contacts-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/contacts/contacts-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ contactsList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <StackLayout class="list-view-item-header" visibility="{{ showContactHeader ? \'visible\' : \'collapse\' }}">\n                            <Label text="{{ contactType }}" textWrap="true" />\n                        </StackLayout>\n                        <StackLayout class="list-view-item-header-separator" visibility="{{ showContactHeader ? \'collapse\' : \'visible\' }}"></StackLayout>\n                        <GridLayout columns="*" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" orientation="horizontal" verticalAlignment="middle">\n                                <Label text="{{ companyName }}" textWrap="true" class="list-view-item-main-top" />\n                                <Label text="&#xf005;" class="fn-list-view-item-small" verticalAlignment="middle" visibility="{{ primaryRep === \'1\' ? \'visible\' : \'collapse\' }}" />\n                            </StackLayout>\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/contacts/contacts-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/contacts/contacts-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/contacts/contacts-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"person/personcontacts?personId="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString(),a=JSON.parse(t),i=""
a.forEach((function(e){var t=!1
i!==e.ContactType&&null!==e.ContactType&&(t=!0),o.push({personId:e.PersonId,fullName:e.FullName,companyId:e.CompanyId,companyName:e.CompanyName,companyId0:e.CompanyId0,groupId:e.GroupId,groupName:e.GroupName,contactCode:e.ContactCode,contactType:e.ContactType,primaryRep:e.PrimaryRep,sortOrder:e.SortOrder,showContactHeader:t}),i=e.ContactType}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/contacts/contacts-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/contacts/contacts-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/meetings/meetings-page.js":function(e,t,o){(function(a){const i=o("./people/person/meetings/meetings-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({meetingsList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Meetings",r.getViewById("fullName").text=s.fullName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.personId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/meetings/meetings-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/meetings/meetings-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/meetings/meetings-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ meetingsList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout class="list-view-item">\n                        <Label text="{{ meeting }}" textWrap="true" class="list-view-item-main-top" />\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/meetings/meetings-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/meetings/meetings-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/meetings/meetings-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"person/personmeetings?personId="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t,a
null!==e.PersonId&&(t=null===e.StartDate||0===e.StartDate.length?null:e.StartDate.substring(0,e.StartDate.indexOf(" ")),a=null===e.EndDate||0===e.EndDate.length?null:e.EndDate.substring(0,e.EndDate.indexOf(" ")),o.push({personId:e.PersonId,fullName:e.FullName,meetingCode:e.MeetingCode,meeting:e.Meeting,attendanceStatusCode:e.AttendanceStatusCode,attendanceStatus:e.AttendanceStatus,startDate:t,endDate:a}))}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/meetings/meetings-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/meetings/meetings-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/pacauthorization/pacauthorization-page.js":function(e,t,o){(function(a){const i=o("./people/person/pacauthorization/pacauthorization-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({pacAuthorizationList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="PAC Authorization",r.getViewById("fullName").text=s.fullName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.personId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/pacauthorization/pacauthorization-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/pacauthorization/pacauthorization-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/pacauthorization/pacauthorization-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ pacAuthorizationList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="auto, auto, *" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ year }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&nbsp;&nbsp;&nbsp;" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="2" text="{{ eligible === \'Y\' ? \'Authorized\' : eligible === \'N\' ? \'Not Authorized\' : \'Not Reported\' }}" style="{{ eligible === \'Y\' ? \'\' : eligible === \'N\' ? \'\' : \'color: #666; font-style: italic;\' }}" class="list-view-item-main-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/pacauthorization/pacauthorization-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/pacauthorization/pacauthorization-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/pacauthorization/pacauthorization-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"person/personpaceligible?personId="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({personId:e.PersonId,fullName:e.FullName,year:e.Year,eligible:e.Eligible,pacEligibleId:e.pacEligibleId})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/pacauthorization/pacauthorization-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/pacauthorization/pacauthorization-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/person-page.js":function(e,t,o){(function(a){const i=o("./people/person/person-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p,c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new i([]),d=new n.fromObject({personList:m,isLoading:!1})
t.onNavigatingTo=function(e){r=e.object,s=r.navigationContext,r.actionBar.title="Person",r.getViewById("fullName").text=s.fullName,p=s.bio.length>0,e.isBackNavigation||(m.empty(),m.load(p),r.bindingContext=d)},t.onBackTap=function(e){try{c.topmost().goBack()}catch(e){l.alert(e)}},t.onItemTap=function(e){try{var t=e.index
const o={moduleName:m.getItem(t).navigateTo,context:s,clearHistory:!1}
c.topmost().navigate(o)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/person-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/person-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/person-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" width="100%">\n            <ListView items="{{ personList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ title }}" verticalAlignment="middle" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" verticalAlignment="middle" class="fn-list-view-item" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/person-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/person-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/person-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray
o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){(t.isProfileEngagement?e?[{title:"Attributes",navigateTo:"people/person/attributes/attributes-page"},{title:"Bio",navigateTo:"people/person/bio/bio-page"},{title:"Subscriptions",navigateTo:"people/person/subscriptiontypes/subscriptiontypes-page"},{title:"Contact for Companies",navigateTo:"people/person/contacts/contacts-page"},{title:"Committees / Contact Lists",navigateTo:"people/person/committees/committees-page"},{title:"Meetings",navigateTo:"people/person/meetings/meetings-page"},{title:"Remarks",navigateTo:"people/person/remarks/remarks-page"},{title:"Web Access",navigateTo:"people/person/webaccess/webaccess-page"},{title:"PAC Authorization",navigateTo:"people/person/pacauthorization/pacauthorization-page"}]:[{title:"Attributes",navigateTo:"people/person/attributes/attributes-page"},{title:"Subscriptions",navigateTo:"people/person/subscriptiontypes/subscriptiontypes-page"},{title:"Contact for Companies",navigateTo:"people/person/contacts/contacts-page"},{title:"Committees / Contact Lists",navigateTo:"people/person/committees/committees-page"},{title:"Meetings",navigateTo:"people/person/meetings/meetings-page"},{title:"Remarks",navigateTo:"people/person/remarks/remarks-page"},{title:"Web Access",navigateTo:"people/person/webaccess/webaccess-page"},{title:"PAC Authorization",navigateTo:"people/person/pacauthorization/pacauthorization-page"}]:e?[{title:"Attributes",navigateTo:"people/person/attributes/attributes-page"},{title:"Bio",navigateTo:"people/person/bio/bio-page"},{title:"Subscriptions",navigateTo:"people/person/subscriptiontypes/subscriptiontypes-page"},{title:"Contact for Companies",navigateTo:"people/person/contacts/contacts-page"},{title:"Committees / Contact Lists",navigateTo:"people/person/committees/committees-page"},{title:"Meetings",navigateTo:"people/person/meetings/meetings-page"},{title:"Remarks",navigateTo:"people/person/remarks/remarks-page"},{title:"Web Access",navigateTo:"people/person/webaccess/webaccess-page"}]:[{title:"Attributes",navigateTo:"people/person/attributes/attributes-page"},{title:"Subscriptions",navigateTo:"people/person/subscriptiontypes/subscriptiontypes-page"},{title:"Contact for Companies",navigateTo:"people/person/contacts/contacts-page"},{title:"Committees / Contact Lists",navigateTo:"people/person/committees/committees-page"},{title:"Meetings",navigateTo:"people/person/meetings/meetings-page"},{title:"Remarks",navigateTo:"people/person/remarks/remarks-page"},{title:"Web Access",navigateTo:"people/person/webaccess/webaccess-page"}]).forEach((function(e){o.push({title:e.title,navigateTo:e.navigateTo})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/person-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/person-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remark/remark-page.js":function(e,t,o){(function(a){o("../node_modules/@nativescript/core/data/observable/index.js")
var i=o("../node_modules/@nativescript/core/ui/frame/index.js")
t.onNavigatingTo=function(e){const t=e.object
var o=t.navigationContext
t.actionBar.title="Remark",o.isProfileMembership=a.isProfileMembership,t.bindingContext=o},t.onBackTap=function(e){try{i.topmost().goBack()}catch(e){dialogs.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/remarks/remark/remark-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/remarks/remark/remark-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remark/remark-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="{{ fullName }}" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0">\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Remark Level" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ publicPrivate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Remark Type" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ remarkType }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Creation Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ creationDate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Completion Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ completionDate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            \x3c!-- isProfileMembership ? \'visible\' : \'collapse\' - Previously applied to the below GridLayout to hide the Visit Date in certain instances. --\x3e\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form" visibility="{{ visitDate.length === 0 ? \'collapse\' : \'visible\' }}">\n                <Label row="0" col="0" text="Visit Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ visitDate }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Created By" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ userName }}" horizontalAlignment="right"  class="list-view-item-right" />\n            </GridLayout>\n            \x3c!-- <GridLayout columns="*" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Comment" class="list-view-item-left" />\n            </GridLayout> --\x3e\n        </StackLayout>\n        <StackLayout row="2" col="0">\n            <GridLayout columns="*" rows="*">\n                <TextView text="{{ comment }}" editable="false" class="scroll-view-item" />\n            </GridLayout>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remark/remark-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/remarks/remark/remark-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarkadd-page.js":function(e,t,o){(function(a){const i=o("../node_modules/@nativescript/core/platform/index.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray
o("../node_modules/@nativescript/core/application/index.js")
var r,s,p=o("../node_modules/@nativescript/core/http/index.js"),c=o("../node_modules/@nativescript/core/ui/frame/index.js"),l=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),m=new n.Observable
function d(){null!==m.creationDate&&(m.creationDate=u(m.creationDate,"MM/DD/YYYY")),null!==m.completionDate&&(m.completionDate=u(m.completionDate,"MM/DD/YYYY")),null!==m.visitDate&&(m.visitDate=u(m.visitDate,"MM/DD/YYYY")),p.request({url:a.apiBaseServiceUrl+"person/insertpersonremark",method:"POST",headers:{"Content-Type":"application/json",Authorization:a.token},content:JSON.stringify(m)}).then((function(e){var t=e.content.toString(),o=JSON.parse(t)
null!==o.RemarksId?(a.refreshRemarks=!0,m.remarksId=o.RemarksId,c.topmost().goBack()):l.alert("There was an error saving the remark.")}),(function(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))}function u(e,t){let o=t
if(null!=e){const t=e.getDate()
o=o.replace("DD",t<10?"0"+t:t)
const a=e.getMonth()+1
o=o.replace("MM",a<10?"0"+a:a),o=o.replace("YYYY",e.getFullYear())}return o}function g(){r.getViewById("visitDateGridLayout").visibility="collapse",r.addCss("#visitDateLabel {color: #666;}")}t.onNavigatingTo=function(e){try{if(r=e.object,i.isIOS){const e=c.topmost().ios.controller
e.visibleViewController.navigationItem.setHidesBackButtonAnimated(!0,!1)}if(e.isBackNavigation){var t=r.getViewById("remarkLevelLabel"),o=r.getViewById("remarkTypeLabel"),n=r.getViewById("creationDateLabel"),p=r.getViewById("completionDateLabel"),d=r.getViewById("visitDateLabel")
t.text=m.publicPrivate,o.text=m.remarkType
var g=r.getViewById("completionDateStackLayout")
"8"===m.remarkTypeCode?(m.completionDate=null,g.visibility="collapse"):(m.completionDate=new Date,g.visibility="visible"),n.text=u(m.creationDate,"MM/DD/YYYY"),p.text=u(m.completionDate,"MM/DD/YYYY"),d.text=u(m.visitDate,"MM/DD/YYYY")}else(s=r.navigationContext).isProfileMembership=a.isProfileMembership,m=s,r.actionBar.title="Add Person Remark",s.isProfileMembership=a.isProfileMembership,r.bindingContext=m}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{r.getViewById("visitDateDatePicker").on("dateChange",(function(e){r.getViewById("visitDateLabel").text=u(e.value,"MM/DD/YYYY")}))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutRemarkLevelTap=function(e){try{g()
const e={moduleName:"people/person/remarks/remarkadd/remarklevel/remarklevel-page",context:m,clearHistory:!1}
c.topmost().navigate(e)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutRemarkTypeTap=function(e){try{g()
const e={moduleName:"people/person/remarks/remarkadd/remarktype/remarktype-page",context:m,clearHistory:!1}
c.topmost().navigate(e)}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutCreationDateTap=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutCompletionDateTap=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutVisitDateTap=function(e){try{var t=r.getViewById("visitDateGridLayout")
"collapse"===t.visibility?(t.visibility="visible",r.addCss("#visitDateLabel {color: #cc2d30;}")):(t.visibility="collapse",r.addCss("#visitDateLabel {color: #666;}"))}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onStackLayoutCreatedByTap=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onTextViewFocus=function(e){try{g()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onCancelTap=function(e){try{i.isAndroid?l.confirm({title:"Save",message:"Would you like to save the remark?",okButtonText:"Yes",cancelButtonText:"No"}).then((function(e){e?d():c.topmost().goBack()})):i.isIOS&&l.action({cancelButtonText:"Cancel",actions:["Save Remark"]}).then((function(e){"Save Remark"===e?d():c.topmost().goBack()}))}catch(e){l.alert(e)}},t.onSaveTap=function(e){try{g(),d()}catch(e){l.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarkadd-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/remarks/remarkadd/remarkadd-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarkadd-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <ActionItem tap="onCancelTap" android.systemIcon="ic_menu_close_clear_cancel" ios.systemIcon="1" ios.position="left" />\n        <ActionItem tap="onSaveTap" ios.systemIcon="3" android.systemIcon="ic_menu_save" ios.position="right" />\n    </ActionBar>\n\n    <GridLayout columns="*" rows="*" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top">\n            <StackLayout verticalAlignment="top" horizontalAlignment="center" class="view-title">\n                <Label id="fullName" text="{{ fullName }}" verticalAlignment="center" horizontalAlignment="center" />\n            </StackLayout>\n            <StackLayout tap="onStackLayoutRemarkLevelTap">\n                <GridLayout columns="auto, *, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Remark Level" class="list-view-item-left" />\n                    <Label id="remarkLevelLabel" row="0" col="1" text="{{ publicPrivate }}" class="list-view-item-right" />\n                    <Label row="0" col="2" text="&#xf105;" class="fn-list-view-item" />\n                </GridLayout>\n            </StackLayout>\n            <StackLayout tap="onStackLayoutRemarkTypeTap">\n                <GridLayout columns="auto, *, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Remark Type" class="list-view-item-left" />\n                    <Label id="remarkTypeLabel" row="0" col="1" text="{{ remarkType }}" class="list-view-item-right" />\n                    <Label row="0" col="2" text="&#xf105;" class="fn-list-view-item" />\n                </GridLayout>\n            </StackLayout>\n            <StackLayout tap="onStackLayoutCreationDateTap">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Creation Date" class="list-view-item-left" />\n                    <Label id="creationDateLabel" row="0" col="1" text="{{ creationDate | dateConverter(dateFormat) }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            <StackLayout id="completionDateStackLayout" tap="onStackLayoutCompletionDateTap" visibility="{{ completionDate === null ? \'collapse\' : \'visible\' }}">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Completion Date" class="list-view-item-left" />\n                    <Label id="completionDateLabel" row="0" col="1" text="{{ completionDate | dateConverter(dateFormat) }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            \x3c!-- visibility="{{ isProfileMembership ? \'visible\' : \'collapse\' }}" - Previously applied to the below StackLayout to hide the Visit Date in certain instances. --\x3e\n            <StackLayout tap="onStackLayoutVisitDateTap">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Visit Date" class="list-view-item-left" />\n                    <Label id="visitDateLabel" row="0" col="1" text="{{ visitDate | dateConverter(dateFormat) }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            <GridLayout id="visitDateGridLayout" columns="*" rows="auto" class="list-view-item-form" visibility="collapse">\n                <DatePicker id="visitDateDatePicker" row="0" col="0" date="{{ visitDate }}" horizontalAlignment="center" class="list-view-item-picker"></DatePicker>\n            </GridLayout>\n            <StackLayout tap="onStackLayoutCreatedByTap">\n                <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                    <Label row="0" col="0" text="Created By" class="list-view-item-left" />\n                    <Label row="0" col="1" text="{{ userName }}" class="list-view-item-right" />\n                </GridLayout>\n            </StackLayout>\n            \x3c!-- <GridLayout columns="*" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Comment" class="list-view-item-left" />\n            </GridLayout> --\x3e\n            <GridLayout columns="*" rows="*" class="list-view-item-form">\n                <TextView text="{{ comment }}" focus="onTextViewFocus" hint="Comment" class="list-view-item-textview" />\n            </GridLayout>\n        </StackLayout>\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarkadd-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/remarks/remarkadd/remarkadd-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js":function(e,t,o){(function(a){const i=o("./people/person/remarks/remarkadd/remarklevel/remarklevel-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=0,d=new n.fromObject({boundData:null,remarkLevelIndex:m,remarkLevelList:null,isLoading:!1})
t.onNavigatingTo=function(e){try{if((r=e.object).actionBar.title="Type",s=r.navigationContext,d.boundData=s,void 0===a.remarkLevelList)d.set("isLoading",!0),l.load(a.isProfileExecutive).then((function(){var e
if(a.remarkLevelList=l,d.remarkLevelList=a.remarkLevelList,m=0,null!==d.boundData.publicPrivate&&d.boundData.publicPrivate.toString().length>0)for(e=0;e<d.remarkLevelList.List.length;e++)d.remarkLevelList.List.getItem(e).remarkLevelCode===d.boundData.publicPrivate&&(m=e)
d.remarkLevelIndex=m,d.set("isLoading",!1),r.bindingContext=d}))
else{var t
if(d.remarkLevelList=a.remarkLevelList,m=0,null!==d.boundData.publicPrivate&&d.boundData.publicPrivate.toString().length>0)for(t=0;t<d.remarkLevelList.List.length;t++)d.remarkLevelList.List.getItem(t).remarkLevelCode===d.boundData.publicPrivate&&(m=t)
d.remarkLevelIndex=m,r.bindingContext=d}}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{r.getViewById("remarkLevelListPicker").on("selectedIndexChange",(function(e){var t=d.remarkLevelList.List.getItem(e.object.selectedIndex)
d.boundData.publicPrivate=t.remarkLevel}))}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *">\n        <StackLayout row="0" col="0" class="list-view-section-header"></StackLayout>\n        <GridLayout row="1" col="0" columns="*" rows="auto" class="list-view-item-form">\n            <ListPicker id="remarkLevelListPicker" row="0" col="0" items="{{ remarkLevelList.Items }}" selectedIndex="{{ remarkLevelIndex }}" \n                horizontalAlignment="center" class="list-view-item-picker"></ListPicker>\n        </GridLayout>\n        <StackLayout row="2" col="0" height="100%" class="list-view-section-header"></StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/remarks/remarkadd/remarklevel/remarklevel-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarklevel/remarklevel-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/data/observable/index.js").Observable
var i=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,n=o("../node_modules/@nativescript/core/http/index.js"),r=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(){const e=new a
return e.Items=new i,e.List=new i,e.load=function(o){return n.request({url:t.apiBaseServiceUrl+"remark/remarklevels?isExecutive="+o,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(t){var o=t.content.toString()
JSON.parse(o).forEach((function(t){e.Items.push(t.RemarkLevelDescription),e.List.push({remarkLevelCode:t.RemarkLevelDescription,remarkLevel:t.RemarkLevelDescription})}))}),(function(e){r.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},e.empty=function(){for(;e.Items.length;)e.Items.pop()
for(;e.List.length;)e.List.pop()},e},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarklevel/remarklevel-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/remarks/remarkadd/remarklevel/remarklevel-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarktype/remarktype-page.js":function(e,t,o){(function(a){const i=o("./people/person/remarks/remarkadd/remarktype/remarktype-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=0,d=new n.fromObject({boundData:null,remarkTypeIndex:m,remarkTypeList:null,isLoading:!1})
t.onNavigatingTo=function(e){try{if((r=e.object).actionBar.title="Type",s=r.navigationContext,d.boundData=s,void 0===a.remarkTypeList)d.set("isLoading",!0),l.load().then((function(){var e
if(a.remarkTypeList=l,d.remarkTypeList=a.remarkTypeList,m=0,null!==d.boundData.remarkTypeCode&&d.boundData.remarkTypeCode.toString().length>0)for(e=0;e<d.remarkTypeList.List.length;e++)d.remarkTypeList.List.getItem(e).remarkTypeCode===d.boundData.remarkTypeCode&&(m=e)
d.remarkTypeIndex=m,d.set("isLoading",!1),r.bindingContext=d}))
else{var t
if(d.remarkTypeList=a.remarkTypeList,m=0,null!==d.boundData.remarkTypeCode&&d.boundData.remarkTypeCode.toString().length>0)for(t=0;t<d.remarkTypeList.List.length;t++)d.remarkTypeList.List.getItem(t).remarkTypeCode===d.boundData.remarkTypeCode&&(m=t)
d.remarkTypeIndex=m,r.bindingContext=d}}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoaded=function(e){try{r.getViewById("remarkTypeListPicker").on("selectedIndexChange",(function(e){var t=d.remarkTypeList.List.getItem(e.object.selectedIndex)
d.boundData.remarkTypeCode=t.remarkTypeCode,d.boundData.remarkType=t.remarkType}))}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarktype/remarktype-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/remarks/remarkadd/remarktype/remarktype-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarktype/remarktype-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" loaded="onLoaded" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *">\n        <StackLayout row="0" col="0" class="list-view-section-header"></StackLayout>\n        <GridLayout row="1" col="0" columns="*" rows="auto" class="list-view-item-form">\n            <ListPicker id="remarkTypeListPicker" row="0" col="0" items="{{ remarkTypeList.Items }}" selectedIndex="{{ remarkTypeIndex }}" \n                horizontalAlignment="center" class="list-view-item-picker"></ListPicker>\n        </GridLayout>\n        <StackLayout row="2" col="0" height="100%" class="list-view-section-header"></StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarktype/remarktype-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/remarks/remarkadd/remarktype/remarktype-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarkadd/remarktype/remarktype-view-model.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/data/observable/index.js").Observable
var i=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,n=o("../node_modules/@nativescript/core/http/index.js"),r=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(){const e=new a
return e.Items=new i,e.List=new i,e.load=function(){return n.request({url:t.apiBaseServiceUrl+"remark/remarktypes",method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(t){var o=t.content.toString()
JSON.parse(o).forEach((function(t){e.Items.push(t.RemarkTypeDescription),e.List.push({remarkTypeCode:t.RemarkTypeCode,remarkType:t.RemarkTypeDescription})}))}),(function(e){r.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},e.empty=function(){for(;e.Items.length;)e.Items.pop()
for(;e.List.length;)e.List.pop()},e},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarkadd/remarktype/remarktype-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/remarks/remarkadd/remarktype/remarktype-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarks-page.js":function(e,t,o){(function(a){const i=o("./people/person/remarks/remarks-view-model.js"),n=o("../node_modules/@nativescript/core/platform/index.js"),r=o("../node_modules/@nativescript/core/data/observable/index.js")
var s,p,c,l,m=o("../node_modules/@nativescript/core/http/index.js"),d=o("../node_modules/@nativescript/core/ui/frame/index.js"),u=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),g="",y=!1,v=new i([]),h=new r.fromObject({remarksList:v,isLoading:!1})
function b(){const e={moduleName:"people/person/remarks/remarkadd/remarkadd-page",context:{remarksId:0,personId:p.personId,fullName:p.fullName,publicPrivate:"Public",remarkTypeCode:"8",remarkType:"System Update",creationDate:new Date,completionDate:null,visitDate:null,userName:a.logonId,commentAbbreviated:null,comment:null,copyToCompanyFlag:"true"},clearHistory:!1}
d.topmost().navigate(e)}t.onNavigatingTo=function(e){try{if(s=e.object,p=s.navigationContext,s.getViewById("fullName").text=p.fullName,l=p.personId,s.actionBar.title="Remarks",""!==(g=a.remarksSearchText))s.getViewById("searchBar").text=g,y=!0
e.isBackNavigation?a.refreshRemarks&&(v.empty(),h.set("isLoading",!0),v.load(g,l,a.isProfileExecutive,1,25,a.personId).then((function(){h.set("isLoading",!1)})),s.bindingContext=h):(a.refreshRemarks=!1,v.empty(),h.set("isLoading",!0),v.load(g,l,a.isProfileExecutive,1,25,a.personId).then((function(){h.set("isLoading",!1)})),s.bindingContext=h)}catch(e){u.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{d.topmost().goBack()}catch(e){u.alert(e)}},t.onAddTap=function(e){try{if(null===a.logonId)return m.request({url:a.apiBaseServiceUrl+"person/personinfo?personId="+a.personId,method:"GET",headers:{"Content-Type":"application/json",Authorization:a.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){a.logonId=e.LogonId})),b()}),(function(e){u.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))
b()}catch(e){u.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onSearchBarLoaded=function(e){c=e.object,n.isAndroid?c.android.clearFocus():n.isIOS&&(c.ios.searchBarStyle=UISearchBarStyle.UISearchBarStyleMinimal,c.ios.showsCancelButton=!0)},t.onSubmit=function(e){c=e.object,a.remarksSearchText=c.text.trim(),g=c.text.trim(),v.empty(),h.set("isLoading",!0),v.load(g,l,a.isProfileExecutive,1,25,a.personId).then((function(){h.set("isLoading",!1),y=!0,c.dismissSoftInput()}))},t.onClear=function(e){c.text="",g="",a.remarksSearchText="",y&&(v.empty(),h.set("isLoading",!0),v.load(g,l,a.isProfileExecutive,1,25,a.personId).then((function(){h.set("isLoading",!1),y=!1,c.dismissSoftInput()})))},t.onItemTap=function(e){try{const t={moduleName:"people/person/remarks/remark/remark-page",context:e.view.bindingContext,clearHistory:!1}
d.topmost().navigate(t)}catch(e){u.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onLoadMoreItems=function(e){try{var t=v.length,o=Math.ceil(t/25)+1,i=t%25
if(0!==i&&i<25)return
h.set("isLoading",!0),v.load(g,l,a.isProfileExecutive,o,25,a.personId).then((function(){h.set("isLoading",!1)}))}catch(e){u.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/remarks/remarks-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/remarks/remarks-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarks-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n        <ActionItem tap="onAddTap" ios.systemIcon="4" android.systemIcon="ic_menu_add" ios.position="right" />\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top" horizontalAlignment="center" direction="horizontal">\n            <SearchBar id="searchBar" hint="Search" text="" loaded="onSearchBarLoaded" submit="onSubmit" clear="onClear" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ remarksList }}" itemTap="onItemTap" loadMoreItems="onLoadMoreItems" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <StackLayout row="0" col="0" verticalAlignment="middle">\n                                <GridLayout columns="*, auto" rows="*">\n                                    <Label row="0" col="0" text="{{ remarkType }}" textWrap="true" class="list-view-item-main-top" />\n                                    <Label row="0" col="1" text="{{ creationDate }}" class="list-view-item-main-top" />\n                                </GridLayout>\n                                <Label text="{{ commentAbbreviated }}" textWrap="true" class="list-view-item-sub" />\n                            </StackLayout>\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarks-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/remarks/remarks-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/remarks/remarks-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a,r,s,p,c){return i.request({url:t.apiBaseServiceUrl+"person/personremarksfilter?filter="+e.replace(/ /g,"%20")+"&personId="+a+"&isExecutive"+r+"&page="+s+"&pageSize="+p+"&creatorId="+c,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){null!==e.PersonId&&o.push({remarksId:e.RemarksId,personId:e.PersonId,fullName:e.FullName,creationDate:e.CreationDate.substring(0,e.CreationDate.indexOf(" ")),completionDate:e.CompletionDate.substring(0,e.CompletionDate.indexOf(" ")),remarkTypeCode:e.RemarkTypeCode,remarkType:e.RemarkType,commentAbbreviated:e.CommentAbbreviated,comment:e.Comment,userName:e.UserName,publicPrivate:e.PublicPrivate,visitDate:e.VisitDate.substring(0,e.VisitDate.indexOf(" ")),copyToCompany:e.CopyToCompany})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/remarks/remarks-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/remarks/remarks-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptions/states/states-page.js":function(e,t,o){(function(a){const i=o("./people/person/subscriptiontypes/subscriptions/states/states-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({statesList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Subscription States"
var t=r.getViewById("fullName"),o=r.getViewById("publication")
t.text=s.fullName,o.text=s.publication,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.personId,s.publicationCode).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptions/states/states-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/subscriptiontypes/subscriptions/states/states-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptions/states/states-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" class="view-subtitle">\n            <Label id="publication" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ statesList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ state }}" class="list-view-item-main-top" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptions/states/states-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/subscriptiontypes/subscriptions/states/states-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptions/states/states-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"person/personsubscriptionstates?personId="+e+"&publicationCode="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){var t
t=0===e.State.length?"All States":e.State,o.push({personId:e.PersonId,fullName:e.FullName,subscriptionTypeId:e.SubscriptionTypeId,subscriptionType:e.SubscriptionType,publicationCode:e.PublicationCode,publication:e.Publication,stateCode:e.StateCode,state:t})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptions/states/states-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/subscriptiontypes/subscriptions/states/states-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptions/subscriptions-page.js":function(e,t,o){(function(a){const i=o("./people/person/subscriptiontypes/subscriptions/subscriptions-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({subscriptionsList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Subscriptions"
var t=r.getViewById("fullName"),o=r.getViewById("subscriptionType")
t.text=s.fullName,o.text=s.subscriptionType,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.personId,s.subscriptionTypeId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},t.onItemTap=function(e){try{var t=e.view.bindingContext
if(2===t.subscriptionTypeId){const e={moduleName:"people/person/subscriptiontypes/subscriptions/states/states-page",context:t,clearHistory:!1}
p.topmost().navigate(e)}}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptions/subscriptions-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/subscriptiontypes/subscriptions/subscriptions-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="center" horizontalAlignment="center" class="view-subtitle">\n            <Label id="subscriptionType" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ subscriptionsList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout>\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ publication }}" textWrap="true" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle"\n                                visibility="{{ subscriptionTypeId === 2 ? \'visible\' : \'collapse\' }}" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/subscriptiontypes/subscriptions/subscriptions-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptions/subscriptions-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e,a){return i.request({url:t.apiBaseServiceUrl+"person/personsubscriptions?personId="+e+"&subscriptionTypeId="+a,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({personId:e.PersonId,fullName:e.FullName,subscriptionTypeId:e.SubscriptionTypeId,subscriptionType:e.SubscriptionType,publicationCode:e.PublicationCode,publication:e.Publication})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptions/subscriptions-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/subscriptiontypes/subscriptions/subscriptions-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptiontypes-page.js":function(e,t,o){(function(a){const i=o("./people/person/subscriptiontypes/subscriptiontypes-view-model.js"),n=(o("../node_modules/@nativescript/core/platform/index.js"),o("../node_modules/@nativescript/core/data/observable/index.js"))
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({subscriptionTypesList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Subscription Types",r.getViewById("fullName").text=s.fullName,l.empty(),m.set("isLoading",!0),l.load(s.personId).then((function(){m.set("isLoading",!1)})),r.bindingContext=m}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},t.onItemTap=function(e){try{var t=e.view.bindingContext
if(0!==t.subscriptionTypeId){const e={moduleName:"people/person/subscriptiontypes/subscriptions/subscriptions-page",context:t,clearHistory:!1}
p.topmost().navigate(e)}}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptiontypes-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/subscriptiontypes/subscriptiontypes-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptiontypes-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n    \n    <GridLayout columns="*" rows="auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <ListView items="{{ subscriptionTypesList }}" itemTap="onItemTap" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout backgroundColor="white" width="100%">\n                        <GridLayout columns="*, auto" rows="*" class="list-view-item">\n                            <Label row="0" col="0" text="{{ subscriptionType }}" class="list-view-item-main-top" />\n                            <Label row="0" col="1" text="&#xf105;" class="fn-list-view-item" verticalAlignment="middle" \n                                visibility="{{ subscriptionTypeId === 0 ? \'collapse\' : \'visible\' }}" />\n                        </GridLayout>\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="2" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptiontypes-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/subscriptiontypes/subscriptiontypes-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/subscriptiontypes/subscriptiontypes-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"person/personsubscriptiontypes?personId="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){o.push({personId:e.PersonId,fullName:e.FullName,subscriptionTypeId:e.SubscriptionTypeId,subscriptionType:e.SubscriptionType})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/subscriptiontypes/subscriptiontypes-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/subscriptiontypes/subscriptiontypes-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/webaccess/webaccess-page.js":function(e,t,o){(function(a){const i=o("./people/person/webaccess/webaccess-view-model.js"),n=o("../node_modules/@nativescript/core/data/observable/index.js")
var r,s,p=o("../node_modules/@nativescript/core/ui/frame/index.js"),c=o("../node_modules/@nativescript/core/ui/dialogs/index.js"),l=new i([]),m=new n.fromObject({details:null,webAccessList:l,isLoading:!1})
t.onNavigatingTo=function(e){try{r=e.object,s=r.navigationContext,r.actionBar.title="Web Access",r.getViewById("fullName").text=s.fullName,e.isBackNavigation||(l.empty(),m.set("isLoading",!0),l.load(s.personId).then((function(){m.set("isLoading",!1)})),m.details=s,r.bindingContext=m)}catch(e){c.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}},t.onBackTap=function(e){try{p.topmost().goBack()}catch(e){c.alert(e)}},a._isModuleLoadedForUI&&a._isModuleLoadedForUI("./people/person/webaccess/webaccess-page.js")&&(e.hot.accept(),e.hot.dispose(()=>{a.hmrRefresh({type:"script",path:"./people/person/webaccess/webaccess-page.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/webaccess/webaccess-page.xml":function(e,t,o){(function(t){e.exports='<Page navigatingTo="onNavigatingTo" class="page" xmlns="http://schemas.nativescript.org/tns.xsd" >\n    <ActionBar class="action-bar">\n        <android>\n            <NavigationButton android.systemIcon="ic_menu_back" tap="onBackTap" />\n        </android>\n    </ActionBar>\n\n    <GridLayout columns="*" rows="auto, auto, *" height="100%" width="100%">\n        <StackLayout row="0" col="0" verticalAlignment="top" horizontalAlignment="center" class="view-title">\n            <Label id="fullName" text="" verticalAlignment="center" horizontalAlignment="center" />\n        </StackLayout>\n        <StackLayout row="1" col="0" verticalAlignment="top">\n            <GridLayout columns="*, auto" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Web Access?" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ details.webAccess === \'Y\' ? \'Yes\' : \'No\' }}" horizontalAlignment="right" class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="auto, *" rows="auto" class="list-view-item-form">\n                <Label row="0" col="0" text="Web Access End Date" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ details.webAccessEndDate }}" textWrap="true" horizontalAlignment="right" class="list-view-item-right" />\n            </GridLayout>\n            <GridLayout columns="auto, *" rows="auto" class="list-view-item-form-bottom">\n                <Label row="0" col="0" text="Registered for Website?" class="list-view-item-left" />\n                <Label row="0" col="1" text="{{ details.webRegistered === \'Y\' ? \'Yes\' : \'No\' }}" textWrap="true" horizontalAlignment="right" class="list-view-item-right" />\n            </GridLayout>\n            <StackLayout verticalAlignment="bottom" class="list-view-section-header">\n                <Label text="WEB ACCESS SECURITY ROLES" verticalAlignment="bottom" />\n            </StackLayout>\n        </StackLayout>\n        <StackLayout row="2" col="0" verticalAlignment="top">\n            <ListView items="{{ webAccessList }}" height="100%">\n                <ListView.itemTemplate>\n                    <StackLayout class="list-view-item">\n                        <Label text="{{ webAccess }}" textWrap="true" class="list-view-item-main-top" />\n                    </StackLayout>\n                </ListView.itemTemplate>\n            </ListView>\n        </StackLayout>\n        <ActivityIndicator busy="{{ isLoading }}" android:height="25%" android:width="25%" ios.activityIndicatorViewStyle="whiteLarge" rowSpan="3" colSpan="1" />\n    </GridLayout>\n</Page>\n',t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/webaccess/webaccess-page.xml")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"markup",path:"./people/person/webaccess/webaccess-page.xml"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./people/person/webaccess/webaccess-view-model.js":function(e,t,o){(function(t){o("../node_modules/@nativescript/core/data/observable/index.js")
var a=o("../node_modules/@nativescript/core/data/observable-array/index.js").ObservableArray,i=o("../node_modules/@nativescript/core/http/index.js"),n=o("../node_modules/@nativescript/core/ui/dialogs/index.js")
e.exports=function(e){const o=new a(e)
return o.load=function(e){return i.request({url:t.apiBaseServiceUrl+"person/personwebaccess?personId="+e,method:"GET",headers:{"Content-Type":"application/json",Authorization:t.token}}).then((function(e){var t=e.content.toString()
JSON.parse(t).forEach((function(e){null!==e.PersonId&&o.push({personId:e.PersonId,fullName:e.FullName,webAccessCode:e.WebAccessCode,webAccess:e.WebAccess,description:e.Description,sortOrder:e.SortOrder})}))}),(function(e){n.alert({title:"Error",message:e.toString(),okButtonText:"OK"})}))},o.empty=function(){for(;o.length;)o.pop()},o},t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./people/person/webaccess/webaccess-view-model.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./people/person/webaccess/webaccess-view-model.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./vendor-platform.js":function(e,t,o){(function(t){t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./vendor-platform.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./vendor-platform.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"./vendor.js":function(e,t,o){(function(t){const a=o("../node_modules/@nativescript/core/application/index.js")
o("../node_modules/@nativescript/core/ui/styling/style-scope.js")
const i=o("./ sync ^\\.\\/app\\.(css|scss|less|sass)$")
t.registerWebpackModules(i),a.loadAppCss(),o("./vendor-platform.js"),o("../node_modules/@nativescript/core/bundle-entry-points.js"),t._isModuleLoadedForUI&&t._isModuleLoadedForUI("./vendor.js")&&(e.hot.accept(),e.hot.dispose(()=>{t.hmrRefresh({type:"script",path:"./vendor.js"})}))}).call(this,o("../node_modules/webpack/buildin/global.js"))},"~/package.json":function(e,t){e.exports=require("~/package.json")}},[["./app.js","runtime","vendor"]]])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,