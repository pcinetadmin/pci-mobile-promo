(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@nativescript/angular'), require('nativescript-ui-chart'), require('@nativescript/core')) :
    typeof define === 'function' && define.amd ? define('nativescript-ui-chart-angular', ['exports', '@angular/core', '@nativescript/angular', 'nativescript-ui-chart', '@nativescript/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['nativescript-ui-chart-angular'] = {}, global.ng.core, global['ns-angular'], global['ns-ui-chart'], global['ns-core']));
}(this, (function (exports, core, angular, chartModule, core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var SeriesComponentBase = /** @class */ (function () {
        function SeriesComponentBase() {
        }
        Object.defineProperty(SeriesComponentBase.prototype, "nativeSeries", {
            get: function () {
                return this._nativeSeries;
            },
            enumerable: false,
            configurable: true
        });
        return SeriesComponentBase;
    }());
    var RadCartesianChartComponent = /** @class */ (function () {
        function RadCartesianChartComponent(_elementRef) {
            this._elementRef = _elementRef;
            this._nativeChart = _elementRef.nativeElement;
        }
        Object.defineProperty(RadCartesianChartComponent.prototype, "nativeElement", {
            get: function () {
                return this._nativeChart;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RadCartesianChartComponent.prototype, "cartesianChart", {
            get: function () {
                return this._nativeChart;
            },
            enumerable: false,
            configurable: true
        });
        return RadCartesianChartComponent;
    }());
    RadCartesianChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "RadCartesianChart",
                    template: ""
                },] }
    ];
    RadCartesianChartComponent.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var RadPieChartComponent = /** @class */ (function () {
        function RadPieChartComponent(_elementRef) {
            this._elementRef = _elementRef;
            this._nativeChart = _elementRef.nativeElement;
        }
        Object.defineProperty(RadPieChartComponent.prototype, "nativeElement", {
            get: function () {
                return this._nativeChart;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RadPieChartComponent.prototype, "pieChart", {
            get: function () {
                return this._nativeChart;
            },
            enumerable: false,
            configurable: true
        });
        return RadPieChartComponent;
    }());
    RadPieChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "RadPieChart",
                    template: ""
                },] }
    ];
    RadPieChartComponent.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var RadLegendViewDirective = /** @class */ (function () {
        function RadLegendViewDirective() {
        }
        return RadLegendViewDirective;
    }());
    RadLegendViewDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "RadLegendView"
                },] }
    ];
    RadLegendViewDirective.ctorParameters = function () { return []; };
    var CategoricalAxisDirective = /** @class */ (function () {
        function CategoricalAxisDirective() {
        }
        return CategoricalAxisDirective;
    }());
    CategoricalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "CategoricalAxis"
                },] }
    ];
    CategoricalAxisDirective.ctorParameters = function () { return []; };
    var LinearAxisDirective = /** @class */ (function () {
        function LinearAxisDirective() {
        }
        return LinearAxisDirective;
    }());
    LinearAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "LinearAxis"
                },] }
    ];
    LinearAxisDirective.ctorParameters = function () { return []; };
    var DateTimeCategoricalAxisDirective = /** @class */ (function () {
        function DateTimeCategoricalAxisDirective() {
        }
        return DateTimeCategoricalAxisDirective;
    }());
    DateTimeCategoricalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "DateTimeCategoricalAxis"
                },] }
    ];
    DateTimeCategoricalAxisDirective.ctorParameters = function () { return []; };
    var DateTimeContinuousAxisDirective = /** @class */ (function () {
        function DateTimeContinuousAxisDirective() {
        }
        return DateTimeContinuousAxisDirective;
    }());
    DateTimeContinuousAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "DateTimeContinuousAxis"
                },] }
    ];
    DateTimeContinuousAxisDirective.ctorParameters = function () { return []; };
    var LogarithmicAxisDirective = /** @class */ (function () {
        function LogarithmicAxisDirective() {
        }
        return LogarithmicAxisDirective;
    }());
    LogarithmicAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "LogarithmicAxis"
                },] }
    ];
    LogarithmicAxisDirective.ctorParameters = function () { return []; };
    var LineSeriesDirective = /** @class */ (function (_super) {
        __extends(LineSeriesDirective, _super);
        function LineSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return LineSeriesDirective;
    }(SeriesComponentBase));
    LineSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "LineSeries"
                },] }
    ];
    LineSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var AreaSeriesDirective = /** @class */ (function (_super) {
        __extends(AreaSeriesDirective, _super);
        function AreaSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return AreaSeriesDirective;
    }(SeriesComponentBase));
    AreaSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "AreaSeries"
                },] }
    ];
    AreaSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var SplineSeriesDirective = /** @class */ (function (_super) {
        __extends(SplineSeriesDirective, _super);
        function SplineSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return SplineSeriesDirective;
    }(SeriesComponentBase));
    SplineSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "SplineSeries"
                },] }
    ];
    SplineSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var SplineAreaSeriesDirective = /** @class */ (function (_super) {
        __extends(SplineAreaSeriesDirective, _super);
        function SplineAreaSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return SplineAreaSeriesDirective;
    }(SeriesComponentBase));
    SplineAreaSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "SplineAreaSeries"
                },] }
    ];
    SplineAreaSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var BarSeriesDirective = /** @class */ (function (_super) {
        __extends(BarSeriesDirective, _super);
        function BarSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return BarSeriesDirective;
    }(SeriesComponentBase));
    BarSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "BarSeries"
                },] }
    ];
    BarSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var RangeBarSeriesDirective = /** @class */ (function (_super) {
        __extends(RangeBarSeriesDirective, _super);
        function RangeBarSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return RangeBarSeriesDirective;
    }(SeriesComponentBase));
    RangeBarSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "RangeBarSeries"
                },] }
    ];
    RangeBarSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var BubbleSeriesDirective = /** @class */ (function (_super) {
        __extends(BubbleSeriesDirective, _super);
        function BubbleSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return BubbleSeriesDirective;
    }(SeriesComponentBase));
    BubbleSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "BubbleSeries"
                },] }
    ];
    BubbleSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var ScatterBubbleSeriesDirective = /** @class */ (function (_super) {
        __extends(ScatterBubbleSeriesDirective, _super);
        function ScatterBubbleSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return ScatterBubbleSeriesDirective;
    }(SeriesComponentBase));
    ScatterBubbleSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "ScatterBubbleSeries"
                },] }
    ];
    ScatterBubbleSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var ScatterSeriesDirective = /** @class */ (function (_super) {
        __extends(ScatterSeriesDirective, _super);
        function ScatterSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return ScatterSeriesDirective;
    }(SeriesComponentBase));
    ScatterSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "ScatterSeries"
                },] }
    ];
    ScatterSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var PaletteDirective = /** @class */ (function (_super) {
        __extends(PaletteDirective, _super);
        function PaletteDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return PaletteDirective;
    }(SeriesComponentBase));
    PaletteDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "Palette"
                },] }
    ];
    PaletteDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var PieSeriesDirective = /** @class */ (function (_super) {
        __extends(PieSeriesDirective, _super);
        function PieSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return PieSeriesDirective;
    }(SeriesComponentBase));
    PieSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "PieSeries"
                },] }
    ];
    PieSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var DonutSeriesDirective = /** @class */ (function (_super) {
        __extends(DonutSeriesDirective, _super);
        function DonutSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return DonutSeriesDirective;
    }(SeriesComponentBase));
    DonutSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "DonutSeries"
                },] }
    ];
    DonutSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var CandlestickSeriesDirective = /** @class */ (function (_super) {
        __extends(CandlestickSeriesDirective, _super);
        function CandlestickSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return CandlestickSeriesDirective;
    }(SeriesComponentBase));
    CandlestickSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "CandlestickSeries"
                },] }
    ];
    CandlestickSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var OhlcSeriesDirective = /** @class */ (function (_super) {
        __extends(OhlcSeriesDirective, _super);
        function OhlcSeriesDirective(_elementRef) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this._nativeSeries = _this._elementRef.nativeElement;
            return _this;
        }
        return OhlcSeriesDirective;
    }(SeriesComponentBase));
    OhlcSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "OhlcSeries"
                },] }
    ];
    OhlcSeriesDirective.ctorParameters = function () { return [
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var RadCartesianChartGridDirective = /** @class */ (function () {
        function RadCartesianChartGridDirective() {
        }
        return RadCartesianChartGridDirective;
    }());
    RadCartesianChartGridDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "RadCartesianChartGrid"
                },] }
    ];
    RadCartesianChartGridDirective.ctorParameters = function () { return []; };
    var ChartGridLineAnnotationDirective = /** @class */ (function () {
        function ChartGridLineAnnotationDirective() {
        }
        return ChartGridLineAnnotationDirective;
    }());
    ChartGridLineAnnotationDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "ChartGridLineAnnotation"
                },] }
    ];
    ChartGridLineAnnotationDirective.ctorParameters = function () { return []; };
    var ChartPlotBandAnnotationDirective = /** @class */ (function () {
        function ChartPlotBandAnnotationDirective() {
        }
        return ChartPlotBandAnnotationDirective;
    }());
    ChartPlotBandAnnotationDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "ChartPlotBandAnnotation"
                },] }
    ];
    ChartPlotBandAnnotationDirective.ctorParameters = function () { return []; };
    var TrackballDirective = /** @class */ (function () {
        function TrackballDirective() {
        }
        return TrackballDirective;
    }());
    TrackballDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "Trackball"
                },] }
    ];
    TrackballDirective.ctorParameters = function () { return []; };
    var PointLabelStyleDirective = /** @class */ (function () {
        function PointLabelStyleDirective() {
        }
        return PointLabelStyleDirective;
    }());
    PointLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "PointLabelStyle"
                },] }
    ];
    PointLabelStyleDirective.ctorParameters = function () { return []; };
    var TKPieLabelStyleDirective = /** @class */ (function () {
        function TKPieLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKPieLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKPieLabelStyleDirective;
    }());
    TKPieLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkPieLabelStyle]"
                },] }
    ];
    TKPieLabelStyleDirective.ctorParameters = function () { return [
        { type: PieSeriesDirective, decorators: [{ type: core.Inject, args: [PieSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKDonutLabelStyleDirective = /** @class */ (function () {
        function TKDonutLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKDonutLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKDonutLabelStyleDirective;
    }());
    TKDonutLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkDonutLabelStyle]"
                },] }
    ];
    TKDonutLabelStyleDirective.ctorParameters = function () { return [
        { type: DonutSeriesDirective, decorators: [{ type: core.Inject, args: [DonutSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKLineLabelStyleDirective = /** @class */ (function () {
        function TKLineLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKLineLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKLineLabelStyleDirective;
    }());
    TKLineLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkLineLabelStyle]"
                },] }
    ];
    TKLineLabelStyleDirective.ctorParameters = function () { return [
        { type: LineSeriesDirective, decorators: [{ type: core.Inject, args: [LineSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKBarLabelStyleDirective = /** @class */ (function () {
        function TKBarLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKBarLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKBarLabelStyleDirective;
    }());
    TKBarLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkBarLabelStyle]"
                },] }
    ];
    TKBarLabelStyleDirective.ctorParameters = function () { return [
        { type: BarSeriesDirective, decorators: [{ type: core.Inject, args: [BarSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKRangeBarLabelStyleDirective = /** @class */ (function () {
        function TKRangeBarLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKRangeBarLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKRangeBarLabelStyleDirective;
    }());
    TKRangeBarLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkRangeBarLabelStyle]"
                },] }
    ];
    TKRangeBarLabelStyleDirective.ctorParameters = function () { return [
        { type: RangeBarSeriesDirective, decorators: [{ type: core.Inject, args: [RangeBarSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKAreaLabelStyleDirective = /** @class */ (function () {
        function TKAreaLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKAreaLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKAreaLabelStyleDirective;
    }());
    TKAreaLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkAreaLabelStyle]"
                },] }
    ];
    TKAreaLabelStyleDirective.ctorParameters = function () { return [
        { type: AreaSeriesDirective, decorators: [{ type: core.Inject, args: [AreaSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKSplineLabelStyleDirective = /** @class */ (function () {
        function TKSplineLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKSplineLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKSplineLabelStyleDirective;
    }());
    TKSplineLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkSplineLabelStyle]",
                },] }
    ];
    TKSplineLabelStyleDirective.ctorParameters = function () { return [
        { type: SplineSeriesDirective, decorators: [{ type: core.Inject, args: [SplineSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKSplineAreaLabelStyleDirective = /** @class */ (function () {
        function TKSplineAreaLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKSplineAreaLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKSplineAreaLabelStyleDirective;
    }());
    TKSplineAreaLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkSplineAreaLabelStyle]",
                },] }
    ];
    TKSplineAreaLabelStyleDirective.ctorParameters = function () { return [
        { type: SplineAreaSeriesDirective, decorators: [{ type: core.Inject, args: [SplineAreaSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKBubbleLabelStyleDirective = /** @class */ (function () {
        function TKBubbleLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKBubbleLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKBubbleLabelStyleDirective;
    }());
    TKBubbleLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkBubbleLabelStyle]"
                },] }
    ];
    TKBubbleLabelStyleDirective.ctorParameters = function () { return [
        { type: BubbleSeriesDirective, decorators: [{ type: core.Inject, args: [BubbleSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKScatterBubbleLabelStyleDirective = /** @class */ (function () {
        function TKScatterBubbleLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKScatterBubbleLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKScatterBubbleLabelStyleDirective;
    }());
    TKScatterBubbleLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkScatterBubbleLabelStyle]"
                },] }
    ];
    TKScatterBubbleLabelStyleDirective.ctorParameters = function () { return [
        { type: ScatterBubbleSeriesDirective, decorators: [{ type: core.Inject, args: [ScatterBubbleSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCandlestickLabelStyleDirective = /** @class */ (function () {
        function TKCandlestickLabelStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCandlestickLabelStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKCandlestickLabelStyleDirective;
    }());
    TKCandlestickLabelStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCandlestickLabelStyle]"
                },] }
    ];
    TKCandlestickLabelStyleDirective.ctorParameters = function () { return [
        { type: CandlestickSeriesDirective, decorators: [{ type: core.Inject, args: [CandlestickSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKOhlcStyleDirective = /** @class */ (function () {
        function TKOhlcStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKOhlcStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKOhlcStyleDirective;
    }());
    TKOhlcStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkOhlcLabelStyle]"
                },] }
    ];
    TKOhlcStyleDirective.ctorParameters = function () { return [
        { type: OhlcSeriesDirective, decorators: [{ type: core.Inject, args: [OhlcSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKScatterStyleDirective = /** @class */ (function () {
        function TKScatterStyleDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKScatterStyleDirective.prototype.ngOnInit = function () {
            var labelStyle = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.labelStyle = labelStyle;
        };
        return TKScatterStyleDirective;
    }());
    TKScatterStyleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkScatterLabelStyle]"
                },] }
    ];
    TKScatterStyleDirective.ctorParameters = function () { return [
        { type: ScatterSeriesDirective, decorators: [{ type: core.Inject, args: [ScatterSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianGridDirective = /** @class */ (function () {
        function TKCartesianGridDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianGridDirective.prototype.ngOnInit = function () {
            var grid = this._elementRef.nativeElement;
            var cartesianChart = this.owner.cartesianChart;
            cartesianChart.grid = grid;
        };
        return TKCartesianGridDirective;
    }());
    TKCartesianGridDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianGrid]"
                },] }
    ];
    TKCartesianGridDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianSeriesDirective = /** @class */ (function () {
        function TKCartesianSeriesDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianSeriesDirective.prototype.ngOnInit = function () {
            var series = this._elementRef.nativeElement;
            if (this.owner.cartesianChart.series) {
                this.owner.cartesianChart.series.push(series);
            }
            else {
                this.owner.cartesianChart.series = new core$1.ObservableArray([series]);
            }
        };
        return TKCartesianSeriesDirective;
    }());
    TKCartesianSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianSeries]"
                },] }
    ];
    TKCartesianSeriesDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKPieChartSeriesDirective = /** @class */ (function () {
        function TKPieChartSeriesDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKPieChartSeriesDirective.prototype.ngOnInit = function () {
            var series = this._elementRef.nativeElement;
            if (this.owner.pieChart.series) {
                this.owner.pieChart.series.push(series);
            }
            else {
                this.owner.pieChart.series = new core$1.ObservableArray([series]);
            }
        };
        return TKPieChartSeriesDirective;
    }());
    TKPieChartSeriesDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkPieSeries]"
                },] }
    ];
    TKPieChartSeriesDirective.ctorParameters = function () { return [
        { type: RadPieChartComponent, decorators: [{ type: core.Inject, args: [RadPieChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianPaletteDirective = /** @class */ (function () {
        function TKCartesianPaletteDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianPaletteDirective.prototype.ngOnInit = function () {
            this._nativePalette = this._elementRef.nativeElement;
            if (this.owner.cartesianChart.palettes) {
                this.owner.cartesianChart.palettes.push(this._nativePalette);
            }
            else {
                this.owner.cartesianChart.palettes = new core$1.ObservableArray([this._nativePalette]);
            }
        };
        Object.defineProperty(TKCartesianPaletteDirective.prototype, "nativePalette", {
            get: function () {
                return this._nativePalette;
            },
            enumerable: false,
            configurable: true
        });
        return TKCartesianPaletteDirective;
    }());
    TKCartesianPaletteDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianPalette]"
                },] }
    ];
    TKCartesianPaletteDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKPiePaletteDirective = /** @class */ (function () {
        function TKPiePaletteDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKPiePaletteDirective.prototype.ngOnInit = function () {
            this._nativePalette = this._elementRef.nativeElement;
            if (this.owner.pieChart.palettes) {
                this.owner.pieChart.palettes.push(this._nativePalette);
            }
            else {
                this.owner.pieChart.palettes = new core$1.ObservableArray([this._nativePalette]);
            }
        };
        Object.defineProperty(TKPiePaletteDirective.prototype, "nativePalette", {
            get: function () {
                return this._nativePalette;
            },
            enumerable: false,
            configurable: true
        });
        return TKPiePaletteDirective;
    }());
    TKPiePaletteDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkPiePalette]"
                },] }
    ];
    TKPiePaletteDirective.ctorParameters = function () { return [
        { type: RadPieChartComponent, decorators: [{ type: core.Inject, args: [RadPieChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianPaletteEntryDirective = /** @class */ (function () {
        function TKCartesianPaletteEntryDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianPaletteEntryDirective.prototype.ngOnInit = function () {
            var entry = this._elementRef.nativeElement;
            if (this.owner.nativePalette.entries) {
                this.owner.nativePalette.entries.push(entry);
                this.owner.nativePalette.updateOwner();
            }
            else {
                this.owner.nativePalette.entries = new core$1.ObservableArray([entry]);
            }
        };
        return TKCartesianPaletteEntryDirective;
    }());
    TKCartesianPaletteEntryDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianPaletteEntry]"
                },] }
    ];
    TKCartesianPaletteEntryDirective.ctorParameters = function () { return [
        { type: TKCartesianPaletteDirective, decorators: [{ type: core.Inject, args: [TKCartesianPaletteDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKPiePaletteEntryDirective = /** @class */ (function () {
        function TKPiePaletteEntryDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKPiePaletteEntryDirective.prototype.ngOnInit = function () {
            var entry = this._elementRef.nativeElement;
            if (this.owner.nativePalette.entries) {
                this.owner.nativePalette.entries.push(entry);
                this.owner.nativePalette.updateOwner();
            }
            else {
                this.owner.nativePalette.entries = new core$1.ObservableArray([entry]);
            }
        };
        return TKPiePaletteEntryDirective;
    }());
    TKPiePaletteEntryDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkPiePaletteEntry]"
                },] }
    ];
    TKPiePaletteEntryDirective.ctorParameters = function () { return [
        { type: TKPiePaletteDirective, decorators: [{ type: core.Inject, args: [TKPiePaletteDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianHorizontalAxisDirective = /** @class */ (function () {
        function TKCartesianHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianHorizontalAxisDirective.prototype.ngOnInit = function () {
            var axis = this._elementRef.nativeElement;
            var cartesianChart = this.owner.cartesianChart;
            cartesianChart.horizontalAxis = axis;
        };
        return TKCartesianHorizontalAxisDirective;
    }());
    TKCartesianHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianHorizontalAxis]"
                },] }
    ];
    TKCartesianHorizontalAxisDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianVerticalAxisDirective = /** @class */ (function () {
        function TKCartesianVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianVerticalAxisDirective.prototype.ngOnInit = function () {
            var axis = this._elementRef.nativeElement;
            var cartesianChart = this.owner.cartesianChart;
            cartesianChart.verticalAxis = axis;
        };
        return TKCartesianVerticalAxisDirective;
    }());
    TKCartesianVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianVerticalAxis]"
                },] }
    ];
    TKCartesianVerticalAxisDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKLineVerticalAxisDirective = /** @class */ (function () {
        function TKLineVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKLineVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKLineVerticalAxisDirective;
    }());
    TKLineVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkLineVerticalAxis]"
                },] }
    ];
    TKLineVerticalAxisDirective.ctorParameters = function () { return [
        { type: LineSeriesDirective, decorators: [{ type: core.Inject, args: [LineSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKLineHorizontalAxisDirective = /** @class */ (function () {
        function TKLineHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKLineHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKLineHorizontalAxisDirective;
    }());
    TKLineHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkLineHorizontalAxis]"
                },] }
    ];
    TKLineHorizontalAxisDirective.ctorParameters = function () { return [
        { type: LineSeriesDirective, decorators: [{ type: core.Inject, args: [LineSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKBarVerticalAxisDirective = /** @class */ (function () {
        function TKBarVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKBarVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKBarVerticalAxisDirective;
    }());
    TKBarVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkBarVerticalAxis]"
                },] }
    ];
    TKBarVerticalAxisDirective.ctorParameters = function () { return [
        { type: BarSeriesDirective, decorators: [{ type: core.Inject, args: [BarSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKBarHorizontalAxisDirective = /** @class */ (function () {
        function TKBarHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKBarHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKBarHorizontalAxisDirective;
    }());
    TKBarHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkBarHorizontalAxis]"
                },] }
    ];
    TKBarHorizontalAxisDirective.ctorParameters = function () { return [
        { type: BarSeriesDirective, decorators: [{ type: core.Inject, args: [BarSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKRangeBarVerticalAxisDirective = /** @class */ (function () {
        function TKRangeBarVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKRangeBarVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKRangeBarVerticalAxisDirective;
    }());
    TKRangeBarVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkRangeBarVerticalAxis]"
                },] }
    ];
    TKRangeBarVerticalAxisDirective.ctorParameters = function () { return [
        { type: RangeBarSeriesDirective, decorators: [{ type: core.Inject, args: [RangeBarSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKRangeBarHorizontalAxisDirective = /** @class */ (function () {
        function TKRangeBarHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKRangeBarHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKRangeBarHorizontalAxisDirective;
    }());
    TKRangeBarHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkRangeBarHorizontalAxis]"
                },] }
    ];
    TKRangeBarHorizontalAxisDirective.ctorParameters = function () { return [
        { type: RangeBarSeriesDirective, decorators: [{ type: core.Inject, args: [RangeBarSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKAreaVerticalAxisDirective = /** @class */ (function () {
        function TKAreaVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKAreaVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKAreaVerticalAxisDirective;
    }());
    TKAreaVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkAreaVerticalAxis]"
                },] }
    ];
    TKAreaVerticalAxisDirective.ctorParameters = function () { return [
        { type: AreaSeriesDirective, decorators: [{ type: core.Inject, args: [AreaSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKAreaHorizontalAxisDirective = /** @class */ (function () {
        function TKAreaHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKAreaHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKAreaHorizontalAxisDirective;
    }());
    TKAreaHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkAreaHorizontalAxis]"
                },] }
    ];
    TKAreaHorizontalAxisDirective.ctorParameters = function () { return [
        { type: AreaSeriesDirective, decorators: [{ type: core.Inject, args: [AreaSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKSplineVerticalAxisDirective = /** @class */ (function () {
        function TKSplineVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKSplineVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKSplineVerticalAxisDirective;
    }());
    TKSplineVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkSplineVerticalAxis]"
                },] }
    ];
    TKSplineVerticalAxisDirective.ctorParameters = function () { return [
        { type: SplineSeriesDirective, decorators: [{ type: core.Inject, args: [SplineSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKSplineHorizontalAxisDirective = /** @class */ (function () {
        function TKSplineHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKSplineHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKSplineHorizontalAxisDirective;
    }());
    TKSplineHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkSplineHorizontalAxis]"
                },] }
    ];
    TKSplineHorizontalAxisDirective.ctorParameters = function () { return [
        { type: SplineSeriesDirective, decorators: [{ type: core.Inject, args: [SplineSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKSplineAreaVerticalAxisDirective = /** @class */ (function () {
        function TKSplineAreaVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKSplineAreaVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKSplineAreaVerticalAxisDirective;
    }());
    TKSplineAreaVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkSplineAreaVerticalAxis]"
                },] }
    ];
    TKSplineAreaVerticalAxisDirective.ctorParameters = function () { return [
        { type: SplineAreaSeriesDirective, decorators: [{ type: core.Inject, args: [SplineAreaSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKSplineAreaHorizontalAxisDirective = /** @class */ (function () {
        function TKSplineAreaHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKSplineAreaHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKSplineAreaHorizontalAxisDirective;
    }());
    TKSplineAreaHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkSplineAreaHorizontalAxis]"
                },] }
    ];
    TKSplineAreaHorizontalAxisDirective.ctorParameters = function () { return [
        { type: SplineAreaSeriesDirective, decorators: [{ type: core.Inject, args: [SplineAreaSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKBubbleVerticalAxisDirective = /** @class */ (function () {
        function TKBubbleVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKBubbleVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKBubbleVerticalAxisDirective;
    }());
    TKBubbleVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkBubbleVerticalAxis]"
                },] }
    ];
    TKBubbleVerticalAxisDirective.ctorParameters = function () { return [
        { type: BubbleSeriesDirective, decorators: [{ type: core.Inject, args: [BubbleSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKBubbleHorizontalAxisDirective = /** @class */ (function () {
        function TKBubbleHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKBubbleHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKBubbleHorizontalAxisDirective;
    }());
    TKBubbleHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkBubbleHorizontalAxis]"
                },] }
    ];
    TKBubbleHorizontalAxisDirective.ctorParameters = function () { return [
        { type: BubbleSeriesDirective, decorators: [{ type: core.Inject, args: [BubbleSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKScatterBubbleVerticalAxisDirective = /** @class */ (function () {
        function TKScatterBubbleVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKScatterBubbleVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKScatterBubbleVerticalAxisDirective;
    }());
    TKScatterBubbleVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkScatterBubbleVerticalAxis]"
                },] }
    ];
    TKScatterBubbleVerticalAxisDirective.ctorParameters = function () { return [
        { type: ScatterBubbleSeriesDirective, decorators: [{ type: core.Inject, args: [ScatterBubbleSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKScatterBubbleHorizontalAxisDirective = /** @class */ (function () {
        function TKScatterBubbleHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKScatterBubbleHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKScatterBubbleHorizontalAxisDirective;
    }());
    TKScatterBubbleHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkScatterBubbleHorizontalAxis]"
                },] }
    ];
    TKScatterBubbleHorizontalAxisDirective.ctorParameters = function () { return [
        { type: ScatterBubbleSeriesDirective, decorators: [{ type: core.Inject, args: [ScatterBubbleSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCandlestickVerticalAxisDirective = /** @class */ (function () {
        function TKCandlestickVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCandlestickVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKCandlestickVerticalAxisDirective;
    }());
    TKCandlestickVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCandlestickVerticalAxis]"
                },] }
    ];
    TKCandlestickVerticalAxisDirective.ctorParameters = function () { return [
        { type: CandlestickSeriesDirective, decorators: [{ type: core.Inject, args: [CandlestickSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCandlestickHorizontalAxisDirective = /** @class */ (function () {
        function TKCandlestickHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCandlestickHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKCandlestickHorizontalAxisDirective;
    }());
    TKCandlestickHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCandlestickHorizontalAxis]"
                },] }
    ];
    TKCandlestickHorizontalAxisDirective.ctorParameters = function () { return [
        { type: CandlestickSeriesDirective, decorators: [{ type: core.Inject, args: [CandlestickSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKOhlcVerticalAxisDirective = /** @class */ (function () {
        function TKOhlcVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKOhlcVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKOhlcVerticalAxisDirective;
    }());
    TKOhlcVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkOhlcVerticalAxis]"
                },] }
    ];
    TKOhlcVerticalAxisDirective.ctorParameters = function () { return [
        { type: OhlcSeriesDirective, decorators: [{ type: core.Inject, args: [OhlcSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKOhlcHorizontalAxisDirective = /** @class */ (function () {
        function TKOhlcHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKOhlcHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKOhlcHorizontalAxisDirective;
    }());
    TKOhlcHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkOhlcHorizontalAxis]"
                },] }
    ];
    TKOhlcHorizontalAxisDirective.ctorParameters = function () { return [
        { type: OhlcSeriesDirective, decorators: [{ type: core.Inject, args: [OhlcSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKScatterVerticalAxisDirective = /** @class */ (function () {
        function TKScatterVerticalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKScatterVerticalAxisDirective.prototype.ngOnInit = function () {
            var verticalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.verticalAxis = verticalAxis;
        };
        return TKScatterVerticalAxisDirective;
    }());
    TKScatterVerticalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkScatterVerticalAxis]"
                },] }
    ];
    TKScatterVerticalAxisDirective.ctorParameters = function () { return [
        { type: ScatterSeriesDirective, decorators: [{ type: core.Inject, args: [ScatterSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKScatterHorizontalAxisDirective = /** @class */ (function () {
        function TKScatterHorizontalAxisDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKScatterHorizontalAxisDirective.prototype.ngOnInit = function () {
            var horizontalAxis = this._elementRef.nativeElement;
            var series = this.owner.nativeSeries;
            series.horizontalAxis = horizontalAxis;
        };
        return TKScatterHorizontalAxisDirective;
    }());
    TKScatterHorizontalAxisDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkScatterHorizontalAxis]"
                },] }
    ];
    TKScatterHorizontalAxisDirective.ctorParameters = function () { return [
        { type: ScatterSeriesDirective, decorators: [{ type: core.Inject, args: [ScatterSeriesDirective,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKPieLegendDirective = /** @class */ (function () {
        function TKPieLegendDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKPieLegendDirective.prototype.ngOnInit = function () {
            var legend = this._elementRef.nativeElement;
            var pieChart = this.owner.pieChart;
            pieChart.legend = legend;
        };
        return TKPieLegendDirective;
    }());
    TKPieLegendDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkPieLegend]",
                },] }
    ];
    TKPieLegendDirective.ctorParameters = function () { return [
        { type: RadPieChartComponent, decorators: [{ type: core.Inject, args: [RadPieChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianLegendDirective = /** @class */ (function () {
        function TKCartesianLegendDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianLegendDirective.prototype.ngOnInit = function () {
            var legend = this._elementRef.nativeElement;
            var cartesianChart = this.owner.cartesianChart;
            cartesianChart.legend = legend;
        };
        return TKCartesianLegendDirective;
    }());
    TKCartesianLegendDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianLegend]",
                },] }
    ];
    TKCartesianLegendDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianTrackballDirective = /** @class */ (function () {
        function TKCartesianTrackballDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianTrackballDirective.prototype.ngOnInit = function () {
            var trackball = this._elementRef.nativeElement;
            var cartesianChart = this.owner.cartesianChart;
            cartesianChart.trackball = trackball;
        };
        return TKCartesianTrackballDirective;
    }());
    TKCartesianTrackballDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianTrackball]"
                },] }
    ];
    TKCartesianTrackballDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var TKCartesianAnnotationsDirective = /** @class */ (function () {
        function TKCartesianAnnotationsDirective(owner, _elementRef) {
            this.owner = owner;
            this._elementRef = _elementRef;
        }
        TKCartesianAnnotationsDirective.prototype.ngOnInit = function () {
            var annotation = this._elementRef.nativeElement;
            if (this.owner.cartesianChart.annotations) {
                this.owner.cartesianChart.annotations.push(annotation);
            }
            else {
                this.owner.cartesianChart.annotations = new core$1.ObservableArray([annotation]);
            }
        };
        return TKCartesianAnnotationsDirective;
    }());
    TKCartesianAnnotationsDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: "[tkCartesianAnnotations]"
                },] }
    ];
    TKCartesianAnnotationsDirective.ctorParameters = function () { return [
        { type: RadCartesianChartComponent, decorators: [{ type: core.Inject, args: [RadCartesianChartComponent,] }] },
        { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }
    ]; };
    var CHART_DIRECTIVES = [RadCartesianChartComponent, RadPieChartComponent, LineSeriesDirective, AreaSeriesDirective, SplineSeriesDirective, SplineAreaSeriesDirective, BarSeriesDirective, RangeBarSeriesDirective, BubbleSeriesDirective, ScatterBubbleSeriesDirective, ScatterSeriesDirective, PieSeriesDirective, TKPieChartSeriesDirective, TKCartesianSeriesDirective, PieSeriesDirective, TKCartesianHorizontalAxisDirective, TKCartesianVerticalAxisDirective, LinearAxisDirective, DateTimeCategoricalAxisDirective, CategoricalAxisDirective, RadCartesianChartGridDirective, TKCartesianGridDirective, PaletteDirective, TKCartesianPaletteDirective, CandlestickSeriesDirective, OhlcSeriesDirective, RadLegendViewDirective, DonutSeriesDirective, TKPieLegendDirective, TKCartesianLegendDirective, ChartGridLineAnnotationDirective, TKCartesianAnnotationsDirective, ChartPlotBandAnnotationDirective, TKCartesianTrackballDirective, TrackballDirective, PointLabelStyleDirective, TKPieLabelStyleDirective, TKLineLabelStyleDirective, TKBarLabelStyleDirective, TKRangeBarLabelStyleDirective, TKAreaLabelStyleDirective, TKSplineLabelStyleDirective, TKBubbleLabelStyleDirective, TKScatterBubbleLabelStyleDirective, TKCandlestickLabelStyleDirective, TKOhlcStyleDirective, TKScatterStyleDirective, TKDonutLabelStyleDirective, DateTimeContinuousAxisDirective, TKCartesianPaletteEntryDirective, LogarithmicAxisDirective, TKLineVerticalAxisDirective, TKLineHorizontalAxisDirective, TKBarVerticalAxisDirective, TKBarHorizontalAxisDirective, TKRangeBarVerticalAxisDirective, TKRangeBarHorizontalAxisDirective, TKAreaVerticalAxisDirective, TKAreaHorizontalAxisDirective, TKSplineVerticalAxisDirective, TKSplineHorizontalAxisDirective, TKSplineAreaVerticalAxisDirective, TKSplineAreaHorizontalAxisDirective, TKBubbleVerticalAxisDirective, TKBubbleHorizontalAxisDirective, TKScatterBubbleVerticalAxisDirective, TKScatterBubbleHorizontalAxisDirective, TKCandlestickVerticalAxisDirective, TKCandlestickHorizontalAxisDirective, TKOhlcVerticalAxisDirective, TKOhlcHorizontalAxisDirective, TKScatterVerticalAxisDirective, TKScatterHorizontalAxisDirective, TKPiePaletteDirective, TKPiePaletteEntryDirective, TKSplineAreaLabelStyleDirective];
    angular.registerElement("RadCartesianChart", function () { return chartModule.RadCartesianChart; });
    angular.registerElement("RadPieChart", function () { return chartModule.RadPieChart; });
    angular.registerElement("RadLegendView", function () { return chartModule.RadLegendView; });
    angular.registerElement("LineSeries", function () { return chartModule.LineSeries; });
    angular.registerElement("PieSeries", function () { return chartModule.PieSeries; });
    angular.registerElement("DonutSeries", function () { return chartModule.DonutSeries; });
    angular.registerElement("AreaSeries", function () { return chartModule.AreaSeries; });
    angular.registerElement("CategoricalAxis", function () { return chartModule.CategoricalAxis; });
    angular.registerElement("LinearAxis", function () { return chartModule.LinearAxis; });
    angular.registerElement("DateTimeCategoricalAxis", function () { return chartModule.DateTimeCategoricalAxis; });
    angular.registerElement("SplineSeries", function () { return chartModule.SplineSeries; });
    angular.registerElement("BarSeries", function () { return chartModule.BarSeries; });
    angular.registerElement("RangeBarSeries", function () { return chartModule.RangeBarSeries; });
    angular.registerElement("BubbleSeries", function () { return chartModule.BubbleSeries; });
    angular.registerElement("ScatterBubbleSeries", function () { return chartModule.ScatterBubbleSeries; });
    angular.registerElement("ScatterSeries", function () { return chartModule.ScatterSeries; });
    angular.registerElement("OhlcSeries", function () { return chartModule.OhlcSeries; });
    angular.registerElement("CandlestickSeries", function () { return chartModule.CandlestickSeries; });
    angular.registerElement("RadCartesianChartGrid", function () { return chartModule.RadCartesianChartGrid; });
    angular.registerElement("Palette", function () { return chartModule.Palette; });
    angular.registerElement("PaletteEntry", function () { return chartModule.PaletteEntry; });
    angular.registerElement("ChartGridLineAnnotation", function () { return chartModule.ChartGridLineAnnotation; });
    angular.registerElement("ChartPlotBandAnnotation", function () { return chartModule.ChartPlotBandAnnotation; });
    angular.registerElement("Trackball", function () { return chartModule.Trackball; });
    angular.registerElement("PointLabelStyle", function () { return chartModule.PointLabelStyle; });
    angular.registerElement("DateTimeContinuousAxis", function () { return chartModule.DateTimeContinuousAxis; });
    angular.registerElement("LogarithmicAxis", function () { return chartModule.LogarithmicAxis; });
    angular.registerElement("SplineAreaSeries", function () { return chartModule.SplineAreaSeries; });
    var NativeScriptUIChartModule = /** @class */ (function () {
        function NativeScriptUIChartModule() {
        }
        return NativeScriptUIChartModule;
    }());
    NativeScriptUIChartModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [CHART_DIRECTIVES],
                    exports: [CHART_DIRECTIVES]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AreaSeriesDirective = AreaSeriesDirective;
    exports.BarSeriesDirective = BarSeriesDirective;
    exports.BubbleSeriesDirective = BubbleSeriesDirective;
    exports.CHART_DIRECTIVES = CHART_DIRECTIVES;
    exports.CandlestickSeriesDirective = CandlestickSeriesDirective;
    exports.CategoricalAxisDirective = CategoricalAxisDirective;
    exports.ChartGridLineAnnotationDirective = ChartGridLineAnnotationDirective;
    exports.ChartPlotBandAnnotationDirective = ChartPlotBandAnnotationDirective;
    exports.DateTimeCategoricalAxisDirective = DateTimeCategoricalAxisDirective;
    exports.DateTimeContinuousAxisDirective = DateTimeContinuousAxisDirective;
    exports.DonutSeriesDirective = DonutSeriesDirective;
    exports.LineSeriesDirective = LineSeriesDirective;
    exports.LinearAxisDirective = LinearAxisDirective;
    exports.LogarithmicAxisDirective = LogarithmicAxisDirective;
    exports.NativeScriptUIChartModule = NativeScriptUIChartModule;
    exports.OhlcSeriesDirective = OhlcSeriesDirective;
    exports.PaletteDirective = PaletteDirective;
    exports.PieSeriesDirective = PieSeriesDirective;
    exports.PointLabelStyleDirective = PointLabelStyleDirective;
    exports.RadCartesianChartComponent = RadCartesianChartComponent;
    exports.RadCartesianChartGridDirective = RadCartesianChartGridDirective;
    exports.RadLegendViewDirective = RadLegendViewDirective;
    exports.RadPieChartComponent = RadPieChartComponent;
    exports.RangeBarSeriesDirective = RangeBarSeriesDirective;
    exports.ScatterBubbleSeriesDirective = ScatterBubbleSeriesDirective;
    exports.ScatterSeriesDirective = ScatterSeriesDirective;
    exports.SeriesComponentBase = SeriesComponentBase;
    exports.SplineAreaSeriesDirective = SplineAreaSeriesDirective;
    exports.SplineSeriesDirective = SplineSeriesDirective;
    exports.TKAreaHorizontalAxisDirective = TKAreaHorizontalAxisDirective;
    exports.TKAreaLabelStyleDirective = TKAreaLabelStyleDirective;
    exports.TKAreaVerticalAxisDirective = TKAreaVerticalAxisDirective;
    exports.TKBarHorizontalAxisDirective = TKBarHorizontalAxisDirective;
    exports.TKBarLabelStyleDirective = TKBarLabelStyleDirective;
    exports.TKBarVerticalAxisDirective = TKBarVerticalAxisDirective;
    exports.TKBubbleHorizontalAxisDirective = TKBubbleHorizontalAxisDirective;
    exports.TKBubbleLabelStyleDirective = TKBubbleLabelStyleDirective;
    exports.TKBubbleVerticalAxisDirective = TKBubbleVerticalAxisDirective;
    exports.TKCandlestickHorizontalAxisDirective = TKCandlestickHorizontalAxisDirective;
    exports.TKCandlestickLabelStyleDirective = TKCandlestickLabelStyleDirective;
    exports.TKCandlestickVerticalAxisDirective = TKCandlestickVerticalAxisDirective;
    exports.TKCartesianAnnotationsDirective = TKCartesianAnnotationsDirective;
    exports.TKCartesianGridDirective = TKCartesianGridDirective;
    exports.TKCartesianHorizontalAxisDirective = TKCartesianHorizontalAxisDirective;
    exports.TKCartesianLegendDirective = TKCartesianLegendDirective;
    exports.TKCartesianPaletteDirective = TKCartesianPaletteDirective;
    exports.TKCartesianPaletteEntryDirective = TKCartesianPaletteEntryDirective;
    exports.TKCartesianSeriesDirective = TKCartesianSeriesDirective;
    exports.TKCartesianTrackballDirective = TKCartesianTrackballDirective;
    exports.TKCartesianVerticalAxisDirective = TKCartesianVerticalAxisDirective;
    exports.TKDonutLabelStyleDirective = TKDonutLabelStyleDirective;
    exports.TKLineHorizontalAxisDirective = TKLineHorizontalAxisDirective;
    exports.TKLineLabelStyleDirective = TKLineLabelStyleDirective;
    exports.TKLineVerticalAxisDirective = TKLineVerticalAxisDirective;
    exports.TKOhlcHorizontalAxisDirective = TKOhlcHorizontalAxisDirective;
    exports.TKOhlcStyleDirective = TKOhlcStyleDirective;
    exports.TKOhlcVerticalAxisDirective = TKOhlcVerticalAxisDirective;
    exports.TKPieChartSeriesDirective = TKPieChartSeriesDirective;
    exports.TKPieLabelStyleDirective = TKPieLabelStyleDirective;
    exports.TKPieLegendDirective = TKPieLegendDirective;
    exports.TKPiePaletteDirective = TKPiePaletteDirective;
    exports.TKPiePaletteEntryDirective = TKPiePaletteEntryDirective;
    exports.TKRangeBarHorizontalAxisDirective = TKRangeBarHorizontalAxisDirective;
    exports.TKRangeBarLabelStyleDirective = TKRangeBarLabelStyleDirective;
    exports.TKRangeBarVerticalAxisDirective = TKRangeBarVerticalAxisDirective;
    exports.TKScatterBubbleHorizontalAxisDirective = TKScatterBubbleHorizontalAxisDirective;
    exports.TKScatterBubbleLabelStyleDirective = TKScatterBubbleLabelStyleDirective;
    exports.TKScatterBubbleVerticalAxisDirective = TKScatterBubbleVerticalAxisDirective;
    exports.TKScatterHorizontalAxisDirective = TKScatterHorizontalAxisDirective;
    exports.TKScatterStyleDirective = TKScatterStyleDirective;
    exports.TKScatterVerticalAxisDirective = TKScatterVerticalAxisDirective;
    exports.TKSplineAreaHorizontalAxisDirective = TKSplineAreaHorizontalAxisDirective;
    exports.TKSplineAreaLabelStyleDirective = TKSplineAreaLabelStyleDirective;
    exports.TKSplineAreaVerticalAxisDirective = TKSplineAreaVerticalAxisDirective;
    exports.TKSplineHorizontalAxisDirective = TKSplineHorizontalAxisDirective;
    exports.TKSplineLabelStyleDirective = TKSplineLabelStyleDirective;
    exports.TKSplineVerticalAxisDirective = TKSplineVerticalAxisDirective;
    exports.TrackballDirective = TrackballDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=nativescript-ui-chart-angular.umd.js.map
