import { Component, ElementRef, Inject, Directive, NgModule } from '@angular/core';
import { registerElement } from '@nativescript/angular';
import * as chartModule from 'nativescript-ui-chart';
import { ObservableArray } from "@nativescript/core";
export class SeriesComponentBase {
    get nativeSeries() {
        return this._nativeSeries;
    }
}
export class RadCartesianChartComponent {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._nativeChart = _elementRef.nativeElement;
    }
    get nativeElement() {
        return this._nativeChart;
    }
    get cartesianChart() {
        return this._nativeChart;
    }
}
RadCartesianChartComponent.decorators = [
    { type: Component, args: [{
                selector: "RadCartesianChart",
                template: ``
            },] }
];
RadCartesianChartComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class RadPieChartComponent {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._nativeChart = _elementRef.nativeElement;
    }
    get nativeElement() {
        return this._nativeChart;
    }
    get pieChart() {
        return this._nativeChart;
    }
}
RadPieChartComponent.decorators = [
    { type: Component, args: [{
                selector: "RadPieChart",
                template: ``
            },] }
];
RadPieChartComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class RadLegendViewDirective {
    constructor() { }
}
RadLegendViewDirective.decorators = [
    { type: Directive, args: [{
                selector: "RadLegendView"
            },] }
];
RadLegendViewDirective.ctorParameters = () => [];
export class CategoricalAxisDirective {
    constructor() { }
}
CategoricalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "CategoricalAxis"
            },] }
];
CategoricalAxisDirective.ctorParameters = () => [];
export class LinearAxisDirective {
    constructor() { }
}
LinearAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "LinearAxis"
            },] }
];
LinearAxisDirective.ctorParameters = () => [];
export class DateTimeCategoricalAxisDirective {
    constructor() { }
}
DateTimeCategoricalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "DateTimeCategoricalAxis"
            },] }
];
DateTimeCategoricalAxisDirective.ctorParameters = () => [];
export class DateTimeContinuousAxisDirective {
    constructor() { }
}
DateTimeContinuousAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "DateTimeContinuousAxis"
            },] }
];
DateTimeContinuousAxisDirective.ctorParameters = () => [];
export class LogarithmicAxisDirective {
    constructor() { }
}
LogarithmicAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "LogarithmicAxis"
            },] }
];
LogarithmicAxisDirective.ctorParameters = () => [];
export class LineSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
LineSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "LineSeries"
            },] }
];
LineSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class AreaSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
AreaSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "AreaSeries"
            },] }
];
AreaSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class SplineSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
SplineSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "SplineSeries"
            },] }
];
SplineSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class SplineAreaSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
SplineAreaSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "SplineAreaSeries"
            },] }
];
SplineAreaSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class BarSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
BarSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "BarSeries"
            },] }
];
BarSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class RangeBarSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
RangeBarSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "RangeBarSeries"
            },] }
];
RangeBarSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class BubbleSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
BubbleSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "BubbleSeries"
            },] }
];
BubbleSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class ScatterBubbleSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
ScatterBubbleSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "ScatterBubbleSeries"
            },] }
];
ScatterBubbleSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class ScatterSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
ScatterSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "ScatterSeries"
            },] }
];
ScatterSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class PaletteDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
PaletteDirective.decorators = [
    { type: Directive, args: [{
                selector: "Palette"
            },] }
];
PaletteDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class PieSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
PieSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "PieSeries"
            },] }
];
PieSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class DonutSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
DonutSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "DonutSeries"
            },] }
];
DonutSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class CandlestickSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
CandlestickSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "CandlestickSeries"
            },] }
];
CandlestickSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class OhlcSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
OhlcSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "OhlcSeries"
            },] }
];
OhlcSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class RadCartesianChartGridDirective {
    constructor() { }
}
RadCartesianChartGridDirective.decorators = [
    { type: Directive, args: [{
                selector: "RadCartesianChartGrid"
            },] }
];
RadCartesianChartGridDirective.ctorParameters = () => [];
export class ChartGridLineAnnotationDirective {
    constructor() { }
}
ChartGridLineAnnotationDirective.decorators = [
    { type: Directive, args: [{
                selector: "ChartGridLineAnnotation"
            },] }
];
ChartGridLineAnnotationDirective.ctorParameters = () => [];
export class ChartPlotBandAnnotationDirective {
    constructor() { }
}
ChartPlotBandAnnotationDirective.decorators = [
    { type: Directive, args: [{
                selector: "ChartPlotBandAnnotation"
            },] }
];
ChartPlotBandAnnotationDirective.ctorParameters = () => [];
export class TrackballDirective {
    constructor() { }
}
TrackballDirective.decorators = [
    { type: Directive, args: [{
                selector: "Trackball"
            },] }
];
TrackballDirective.ctorParameters = () => [];
export class PointLabelStyleDirective {
    constructor() { }
}
PointLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "PointLabelStyle"
            },] }
];
PointLabelStyleDirective.ctorParameters = () => [];
export class TKPieLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKPieLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPieLabelStyle]"
            },] }
];
TKPieLabelStyleDirective.ctorParameters = () => [
    { type: PieSeriesDirective, decorators: [{ type: Inject, args: [PieSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKDonutLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKDonutLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkDonutLabelStyle]"
            },] }
];
TKDonutLabelStyleDirective.ctorParameters = () => [
    { type: DonutSeriesDirective, decorators: [{ type: Inject, args: [DonutSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKLineLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKLineLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkLineLabelStyle]"
            },] }
];
TKLineLabelStyleDirective.ctorParameters = () => [
    { type: LineSeriesDirective, decorators: [{ type: Inject, args: [LineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKBarLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKBarLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBarLabelStyle]"
            },] }
];
TKBarLabelStyleDirective.ctorParameters = () => [
    { type: BarSeriesDirective, decorators: [{ type: Inject, args: [BarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKRangeBarLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKRangeBarLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkRangeBarLabelStyle]"
            },] }
];
TKRangeBarLabelStyleDirective.ctorParameters = () => [
    { type: RangeBarSeriesDirective, decorators: [{ type: Inject, args: [RangeBarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKAreaLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKAreaLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkAreaLabelStyle]"
            },] }
];
TKAreaLabelStyleDirective.ctorParameters = () => [
    { type: AreaSeriesDirective, decorators: [{ type: Inject, args: [AreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKSplineLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKSplineLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineLabelStyle]",
            },] }
];
TKSplineLabelStyleDirective.ctorParameters = () => [
    { type: SplineSeriesDirective, decorators: [{ type: Inject, args: [SplineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKSplineAreaLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKSplineAreaLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineAreaLabelStyle]",
            },] }
];
TKSplineAreaLabelStyleDirective.ctorParameters = () => [
    { type: SplineAreaSeriesDirective, decorators: [{ type: Inject, args: [SplineAreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKBubbleLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKBubbleLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBubbleLabelStyle]"
            },] }
];
TKBubbleLabelStyleDirective.ctorParameters = () => [
    { type: BubbleSeriesDirective, decorators: [{ type: Inject, args: [BubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKScatterBubbleLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKScatterBubbleLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterBubbleLabelStyle]"
            },] }
];
TKScatterBubbleLabelStyleDirective.ctorParameters = () => [
    { type: ScatterBubbleSeriesDirective, decorators: [{ type: Inject, args: [ScatterBubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCandlestickLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKCandlestickLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCandlestickLabelStyle]"
            },] }
];
TKCandlestickLabelStyleDirective.ctorParameters = () => [
    { type: CandlestickSeriesDirective, decorators: [{ type: Inject, args: [CandlestickSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKOhlcStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKOhlcStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkOhlcLabelStyle]"
            },] }
];
TKOhlcStyleDirective.ctorParameters = () => [
    { type: OhlcSeriesDirective, decorators: [{ type: Inject, args: [OhlcSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKScatterStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKScatterStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterLabelStyle]"
            },] }
];
TKScatterStyleDirective.ctorParameters = () => [
    { type: ScatterSeriesDirective, decorators: [{ type: Inject, args: [ScatterSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianGridDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const grid = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.grid = grid;
    }
}
TKCartesianGridDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianGrid]"
            },] }
];
TKCartesianGridDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianSeriesDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const series = this._elementRef.nativeElement;
        if (this.owner.cartesianChart.series) {
            this.owner.cartesianChart.series.push(series);
        }
        else {
            this.owner.cartesianChart.series = new ObservableArray([series]);
        }
    }
}
TKCartesianSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianSeries]"
            },] }
];
TKCartesianSeriesDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKPieChartSeriesDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const series = this._elementRef.nativeElement;
        if (this.owner.pieChart.series) {
            this.owner.pieChart.series.push(series);
        }
        else {
            this.owner.pieChart.series = new ObservableArray([series]);
        }
    }
}
TKPieChartSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPieSeries]"
            },] }
];
TKPieChartSeriesDirective.ctorParameters = () => [
    { type: RadPieChartComponent, decorators: [{ type: Inject, args: [RadPieChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianPaletteDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        this._nativePalette = this._elementRef.nativeElement;
        if (this.owner.cartesianChart.palettes) {
            this.owner.cartesianChart.palettes.push(this._nativePalette);
        }
        else {
            this.owner.cartesianChart.palettes = new ObservableArray([this._nativePalette]);
        }
    }
    get nativePalette() {
        return this._nativePalette;
    }
}
TKCartesianPaletteDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianPalette]"
            },] }
];
TKCartesianPaletteDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKPiePaletteDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        this._nativePalette = this._elementRef.nativeElement;
        if (this.owner.pieChart.palettes) {
            this.owner.pieChart.palettes.push(this._nativePalette);
        }
        else {
            this.owner.pieChart.palettes = new ObservableArray([this._nativePalette]);
        }
    }
    get nativePalette() {
        return this._nativePalette;
    }
}
TKPiePaletteDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPiePalette]"
            },] }
];
TKPiePaletteDirective.ctorParameters = () => [
    { type: RadPieChartComponent, decorators: [{ type: Inject, args: [RadPieChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianPaletteEntryDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const entry = this._elementRef.nativeElement;
        if (this.owner.nativePalette.entries) {
            this.owner.nativePalette.entries.push(entry);
            this.owner.nativePalette.updateOwner();
        }
        else {
            this.owner.nativePalette.entries = new ObservableArray([entry]);
        }
    }
}
TKCartesianPaletteEntryDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianPaletteEntry]"
            },] }
];
TKCartesianPaletteEntryDirective.ctorParameters = () => [
    { type: TKCartesianPaletteDirective, decorators: [{ type: Inject, args: [TKCartesianPaletteDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKPiePaletteEntryDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const entry = this._elementRef.nativeElement;
        if (this.owner.nativePalette.entries) {
            this.owner.nativePalette.entries.push(entry);
            this.owner.nativePalette.updateOwner();
        }
        else {
            this.owner.nativePalette.entries = new ObservableArray([entry]);
        }
    }
}
TKPiePaletteEntryDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPiePaletteEntry]"
            },] }
];
TKPiePaletteEntryDirective.ctorParameters = () => [
    { type: TKPiePaletteDirective, decorators: [{ type: Inject, args: [TKPiePaletteDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const axis = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.horizontalAxis = axis;
    }
}
TKCartesianHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianHorizontalAxis]"
            },] }
];
TKCartesianHorizontalAxisDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const axis = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.verticalAxis = axis;
    }
}
TKCartesianVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianVerticalAxis]"
            },] }
];
TKCartesianVerticalAxisDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKLineVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKLineVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkLineVerticalAxis]"
            },] }
];
TKLineVerticalAxisDirective.ctorParameters = () => [
    { type: LineSeriesDirective, decorators: [{ type: Inject, args: [LineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKLineHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKLineHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkLineHorizontalAxis]"
            },] }
];
TKLineHorizontalAxisDirective.ctorParameters = () => [
    { type: LineSeriesDirective, decorators: [{ type: Inject, args: [LineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKBarVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKBarVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBarVerticalAxis]"
            },] }
];
TKBarVerticalAxisDirective.ctorParameters = () => [
    { type: BarSeriesDirective, decorators: [{ type: Inject, args: [BarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKBarHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKBarHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBarHorizontalAxis]"
            },] }
];
TKBarHorizontalAxisDirective.ctorParameters = () => [
    { type: BarSeriesDirective, decorators: [{ type: Inject, args: [BarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKRangeBarVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKRangeBarVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkRangeBarVerticalAxis]"
            },] }
];
TKRangeBarVerticalAxisDirective.ctorParameters = () => [
    { type: RangeBarSeriesDirective, decorators: [{ type: Inject, args: [RangeBarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKRangeBarHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKRangeBarHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkRangeBarHorizontalAxis]"
            },] }
];
TKRangeBarHorizontalAxisDirective.ctorParameters = () => [
    { type: RangeBarSeriesDirective, decorators: [{ type: Inject, args: [RangeBarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKAreaVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKAreaVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkAreaVerticalAxis]"
            },] }
];
TKAreaVerticalAxisDirective.ctorParameters = () => [
    { type: AreaSeriesDirective, decorators: [{ type: Inject, args: [AreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKAreaHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKAreaHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkAreaHorizontalAxis]"
            },] }
];
TKAreaHorizontalAxisDirective.ctorParameters = () => [
    { type: AreaSeriesDirective, decorators: [{ type: Inject, args: [AreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKSplineVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKSplineVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineVerticalAxis]"
            },] }
];
TKSplineVerticalAxisDirective.ctorParameters = () => [
    { type: SplineSeriesDirective, decorators: [{ type: Inject, args: [SplineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKSplineHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKSplineHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineHorizontalAxis]"
            },] }
];
TKSplineHorizontalAxisDirective.ctorParameters = () => [
    { type: SplineSeriesDirective, decorators: [{ type: Inject, args: [SplineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKSplineAreaVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKSplineAreaVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineAreaVerticalAxis]"
            },] }
];
TKSplineAreaVerticalAxisDirective.ctorParameters = () => [
    { type: SplineAreaSeriesDirective, decorators: [{ type: Inject, args: [SplineAreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKSplineAreaHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKSplineAreaHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineAreaHorizontalAxis]"
            },] }
];
TKSplineAreaHorizontalAxisDirective.ctorParameters = () => [
    { type: SplineAreaSeriesDirective, decorators: [{ type: Inject, args: [SplineAreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKBubbleVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKBubbleVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBubbleVerticalAxis]"
            },] }
];
TKBubbleVerticalAxisDirective.ctorParameters = () => [
    { type: BubbleSeriesDirective, decorators: [{ type: Inject, args: [BubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKBubbleHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKBubbleHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBubbleHorizontalAxis]"
            },] }
];
TKBubbleHorizontalAxisDirective.ctorParameters = () => [
    { type: BubbleSeriesDirective, decorators: [{ type: Inject, args: [BubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKScatterBubbleVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKScatterBubbleVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterBubbleVerticalAxis]"
            },] }
];
TKScatterBubbleVerticalAxisDirective.ctorParameters = () => [
    { type: ScatterBubbleSeriesDirective, decorators: [{ type: Inject, args: [ScatterBubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKScatterBubbleHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKScatterBubbleHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterBubbleHorizontalAxis]"
            },] }
];
TKScatterBubbleHorizontalAxisDirective.ctorParameters = () => [
    { type: ScatterBubbleSeriesDirective, decorators: [{ type: Inject, args: [ScatterBubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCandlestickVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKCandlestickVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCandlestickVerticalAxis]"
            },] }
];
TKCandlestickVerticalAxisDirective.ctorParameters = () => [
    { type: CandlestickSeriesDirective, decorators: [{ type: Inject, args: [CandlestickSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCandlestickHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKCandlestickHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCandlestickHorizontalAxis]"
            },] }
];
TKCandlestickHorizontalAxisDirective.ctorParameters = () => [
    { type: CandlestickSeriesDirective, decorators: [{ type: Inject, args: [CandlestickSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKOhlcVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKOhlcVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkOhlcVerticalAxis]"
            },] }
];
TKOhlcVerticalAxisDirective.ctorParameters = () => [
    { type: OhlcSeriesDirective, decorators: [{ type: Inject, args: [OhlcSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKOhlcHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKOhlcHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkOhlcHorizontalAxis]"
            },] }
];
TKOhlcHorizontalAxisDirective.ctorParameters = () => [
    { type: OhlcSeriesDirective, decorators: [{ type: Inject, args: [OhlcSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKScatterVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKScatterVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterVerticalAxis]"
            },] }
];
TKScatterVerticalAxisDirective.ctorParameters = () => [
    { type: ScatterSeriesDirective, decorators: [{ type: Inject, args: [ScatterSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKScatterHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKScatterHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterHorizontalAxis]"
            },] }
];
TKScatterHorizontalAxisDirective.ctorParameters = () => [
    { type: ScatterSeriesDirective, decorators: [{ type: Inject, args: [ScatterSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKPieLegendDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const legend = this._elementRef.nativeElement;
        const pieChart = this.owner.pieChart;
        pieChart.legend = legend;
    }
}
TKPieLegendDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPieLegend]",
            },] }
];
TKPieLegendDirective.ctorParameters = () => [
    { type: RadPieChartComponent, decorators: [{ type: Inject, args: [RadPieChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianLegendDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const legend = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.legend = legend;
    }
}
TKCartesianLegendDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianLegend]",
            },] }
];
TKCartesianLegendDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianTrackballDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const trackball = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.trackball = trackball;
    }
}
TKCartesianTrackballDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianTrackball]"
            },] }
];
TKCartesianTrackballDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export class TKCartesianAnnotationsDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const annotation = this._elementRef.nativeElement;
        if (this.owner.cartesianChart.annotations) {
            this.owner.cartesianChart.annotations.push(annotation);
        }
        else {
            this.owner.cartesianChart.annotations = new ObservableArray([annotation]);
        }
    }
}
TKCartesianAnnotationsDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianAnnotations]"
            },] }
];
TKCartesianAnnotationsDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
export const CHART_DIRECTIVES = [RadCartesianChartComponent, RadPieChartComponent, LineSeriesDirective, AreaSeriesDirective, SplineSeriesDirective, SplineAreaSeriesDirective, BarSeriesDirective, RangeBarSeriesDirective, BubbleSeriesDirective, ScatterBubbleSeriesDirective, ScatterSeriesDirective, PieSeriesDirective, TKPieChartSeriesDirective, TKCartesianSeriesDirective, PieSeriesDirective, TKCartesianHorizontalAxisDirective, TKCartesianVerticalAxisDirective, LinearAxisDirective, DateTimeCategoricalAxisDirective, CategoricalAxisDirective, RadCartesianChartGridDirective, TKCartesianGridDirective, PaletteDirective, TKCartesianPaletteDirective, CandlestickSeriesDirective, OhlcSeriesDirective, RadLegendViewDirective, DonutSeriesDirective, TKPieLegendDirective, TKCartesianLegendDirective, ChartGridLineAnnotationDirective, TKCartesianAnnotationsDirective, ChartPlotBandAnnotationDirective, TKCartesianTrackballDirective, TrackballDirective, PointLabelStyleDirective, TKPieLabelStyleDirective, TKLineLabelStyleDirective, TKBarLabelStyleDirective, TKRangeBarLabelStyleDirective, TKAreaLabelStyleDirective, TKSplineLabelStyleDirective, TKBubbleLabelStyleDirective, TKScatterBubbleLabelStyleDirective, TKCandlestickLabelStyleDirective, TKOhlcStyleDirective, TKScatterStyleDirective, TKDonutLabelStyleDirective, DateTimeContinuousAxisDirective, TKCartesianPaletteEntryDirective, LogarithmicAxisDirective, TKLineVerticalAxisDirective, TKLineHorizontalAxisDirective, TKBarVerticalAxisDirective, TKBarHorizontalAxisDirective, TKRangeBarVerticalAxisDirective, TKRangeBarHorizontalAxisDirective, TKAreaVerticalAxisDirective, TKAreaHorizontalAxisDirective, TKSplineVerticalAxisDirective, TKSplineHorizontalAxisDirective, TKSplineAreaVerticalAxisDirective, TKSplineAreaHorizontalAxisDirective, TKBubbleVerticalAxisDirective, TKBubbleHorizontalAxisDirective, TKScatterBubbleVerticalAxisDirective, TKScatterBubbleHorizontalAxisDirective, TKCandlestickVerticalAxisDirective, TKCandlestickHorizontalAxisDirective, TKOhlcVerticalAxisDirective, TKOhlcHorizontalAxisDirective, TKScatterVerticalAxisDirective, TKScatterHorizontalAxisDirective, TKPiePaletteDirective, TKPiePaletteEntryDirective, TKSplineAreaLabelStyleDirective];
registerElement("RadCartesianChart", () => chartModule.RadCartesianChart);
registerElement("RadPieChart", () => chartModule.RadPieChart);
registerElement("RadLegendView", () => chartModule.RadLegendView);
registerElement("LineSeries", () => chartModule.LineSeries);
registerElement("PieSeries", () => chartModule.PieSeries);
registerElement("DonutSeries", () => chartModule.DonutSeries);
registerElement("AreaSeries", () => chartModule.AreaSeries);
registerElement("CategoricalAxis", () => chartModule.CategoricalAxis);
registerElement("LinearAxis", () => chartModule.LinearAxis);
registerElement("DateTimeCategoricalAxis", () => chartModule.DateTimeCategoricalAxis);
registerElement("SplineSeries", () => chartModule.SplineSeries);
registerElement("BarSeries", () => chartModule.BarSeries);
registerElement("RangeBarSeries", () => chartModule.RangeBarSeries);
registerElement("BubbleSeries", () => chartModule.BubbleSeries);
registerElement("ScatterBubbleSeries", () => chartModule.ScatterBubbleSeries);
registerElement("ScatterSeries", () => chartModule.ScatterSeries);
registerElement("OhlcSeries", () => chartModule.OhlcSeries);
registerElement("CandlestickSeries", () => chartModule.CandlestickSeries);
registerElement("RadCartesianChartGrid", () => chartModule.RadCartesianChartGrid);
registerElement("Palette", () => chartModule.Palette);
registerElement("PaletteEntry", () => chartModule.PaletteEntry);
registerElement("ChartGridLineAnnotation", () => chartModule.ChartGridLineAnnotation);
registerElement("ChartPlotBandAnnotation", () => chartModule.ChartPlotBandAnnotation);
registerElement("Trackball", () => chartModule.Trackball);
registerElement("PointLabelStyle", () => chartModule.PointLabelStyle);
registerElement("DateTimeContinuousAxis", () => chartModule.DateTimeContinuousAxis);
registerElement("LogarithmicAxis", () => chartModule.LogarithmicAxis);
registerElement("SplineAreaSeries", () => chartModule.SplineAreaSeries);
export class NativeScriptUIChartModule {
}
NativeScriptUIChartModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CHART_DIRECTIVES],
                exports: [CHART_DIRECTIVES]
            },] }
];
//# sourceMappingURL=data:application/json;base64,