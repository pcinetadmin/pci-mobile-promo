import { Component, ElementRef, Inject, Directive, NgModule } from '@angular/core';
import { registerElement } from '@nativescript/angular';
import { RadCartesianChart, RadPieChart, RadLegendView, LineSeries, PieSeries, DonutSeries, AreaSeries, CategoricalAxis, LinearAxis, DateTimeCategoricalAxis, SplineSeries, BarSeries, RangeBarSeries, BubbleSeries, ScatterBubbleSeries, ScatterSeries, OhlcSeries, CandlestickSeries, RadCartesianChartGrid, Palette, PaletteEntry, ChartGridLineAnnotation, ChartPlotBandAnnotation, Trackball, PointLabelStyle, DateTimeContinuousAxis, LogarithmicAxis, SplineAreaSeries } from 'nativescript-ui-chart';
import { ObservableArray } from '@nativescript/core';

class SeriesComponentBase {
    get nativeSeries() {
        return this._nativeSeries;
    }
}
class RadCartesianChartComponent {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._nativeChart = _elementRef.nativeElement;
    }
    get nativeElement() {
        return this._nativeChart;
    }
    get cartesianChart() {
        return this._nativeChart;
    }
}
RadCartesianChartComponent.decorators = [
    { type: Component, args: [{
                selector: "RadCartesianChart",
                template: ``
            },] }
];
RadCartesianChartComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class RadPieChartComponent {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._nativeChart = _elementRef.nativeElement;
    }
    get nativeElement() {
        return this._nativeChart;
    }
    get pieChart() {
        return this._nativeChart;
    }
}
RadPieChartComponent.decorators = [
    { type: Component, args: [{
                selector: "RadPieChart",
                template: ``
            },] }
];
RadPieChartComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class RadLegendViewDirective {
    constructor() { }
}
RadLegendViewDirective.decorators = [
    { type: Directive, args: [{
                selector: "RadLegendView"
            },] }
];
RadLegendViewDirective.ctorParameters = () => [];
class CategoricalAxisDirective {
    constructor() { }
}
CategoricalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "CategoricalAxis"
            },] }
];
CategoricalAxisDirective.ctorParameters = () => [];
class LinearAxisDirective {
    constructor() { }
}
LinearAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "LinearAxis"
            },] }
];
LinearAxisDirective.ctorParameters = () => [];
class DateTimeCategoricalAxisDirective {
    constructor() { }
}
DateTimeCategoricalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "DateTimeCategoricalAxis"
            },] }
];
DateTimeCategoricalAxisDirective.ctorParameters = () => [];
class DateTimeContinuousAxisDirective {
    constructor() { }
}
DateTimeContinuousAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "DateTimeContinuousAxis"
            },] }
];
DateTimeContinuousAxisDirective.ctorParameters = () => [];
class LogarithmicAxisDirective {
    constructor() { }
}
LogarithmicAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "LogarithmicAxis"
            },] }
];
LogarithmicAxisDirective.ctorParameters = () => [];
class LineSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
LineSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "LineSeries"
            },] }
];
LineSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class AreaSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
AreaSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "AreaSeries"
            },] }
];
AreaSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class SplineSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
SplineSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "SplineSeries"
            },] }
];
SplineSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class SplineAreaSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
SplineAreaSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "SplineAreaSeries"
            },] }
];
SplineAreaSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class BarSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
BarSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "BarSeries"
            },] }
];
BarSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class RangeBarSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
RangeBarSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "RangeBarSeries"
            },] }
];
RangeBarSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class BubbleSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
BubbleSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "BubbleSeries"
            },] }
];
BubbleSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class ScatterBubbleSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
ScatterBubbleSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "ScatterBubbleSeries"
            },] }
];
ScatterBubbleSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class ScatterSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
ScatterSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "ScatterSeries"
            },] }
];
ScatterSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class PaletteDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
PaletteDirective.decorators = [
    { type: Directive, args: [{
                selector: "Palette"
            },] }
];
PaletteDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class PieSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
PieSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "PieSeries"
            },] }
];
PieSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class DonutSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
DonutSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "DonutSeries"
            },] }
];
DonutSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class CandlestickSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
CandlestickSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "CandlestickSeries"
            },] }
];
CandlestickSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class OhlcSeriesDirective extends SeriesComponentBase {
    constructor(_elementRef) {
        super();
        this._elementRef = _elementRef;
        this._nativeSeries = this._elementRef.nativeElement;
    }
}
OhlcSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "OhlcSeries"
            },] }
];
OhlcSeriesDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class RadCartesianChartGridDirective {
    constructor() { }
}
RadCartesianChartGridDirective.decorators = [
    { type: Directive, args: [{
                selector: "RadCartesianChartGrid"
            },] }
];
RadCartesianChartGridDirective.ctorParameters = () => [];
class ChartGridLineAnnotationDirective {
    constructor() { }
}
ChartGridLineAnnotationDirective.decorators = [
    { type: Directive, args: [{
                selector: "ChartGridLineAnnotation"
            },] }
];
ChartGridLineAnnotationDirective.ctorParameters = () => [];
class ChartPlotBandAnnotationDirective {
    constructor() { }
}
ChartPlotBandAnnotationDirective.decorators = [
    { type: Directive, args: [{
                selector: "ChartPlotBandAnnotation"
            },] }
];
ChartPlotBandAnnotationDirective.ctorParameters = () => [];
class TrackballDirective {
    constructor() { }
}
TrackballDirective.decorators = [
    { type: Directive, args: [{
                selector: "Trackball"
            },] }
];
TrackballDirective.ctorParameters = () => [];
class PointLabelStyleDirective {
    constructor() { }
}
PointLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "PointLabelStyle"
            },] }
];
PointLabelStyleDirective.ctorParameters = () => [];
class TKPieLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKPieLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPieLabelStyle]"
            },] }
];
TKPieLabelStyleDirective.ctorParameters = () => [
    { type: PieSeriesDirective, decorators: [{ type: Inject, args: [PieSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKDonutLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKDonutLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkDonutLabelStyle]"
            },] }
];
TKDonutLabelStyleDirective.ctorParameters = () => [
    { type: DonutSeriesDirective, decorators: [{ type: Inject, args: [DonutSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKLineLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKLineLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkLineLabelStyle]"
            },] }
];
TKLineLabelStyleDirective.ctorParameters = () => [
    { type: LineSeriesDirective, decorators: [{ type: Inject, args: [LineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKBarLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKBarLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBarLabelStyle]"
            },] }
];
TKBarLabelStyleDirective.ctorParameters = () => [
    { type: BarSeriesDirective, decorators: [{ type: Inject, args: [BarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKRangeBarLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKRangeBarLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkRangeBarLabelStyle]"
            },] }
];
TKRangeBarLabelStyleDirective.ctorParameters = () => [
    { type: RangeBarSeriesDirective, decorators: [{ type: Inject, args: [RangeBarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKAreaLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKAreaLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkAreaLabelStyle]"
            },] }
];
TKAreaLabelStyleDirective.ctorParameters = () => [
    { type: AreaSeriesDirective, decorators: [{ type: Inject, args: [AreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKSplineLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKSplineLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineLabelStyle]",
            },] }
];
TKSplineLabelStyleDirective.ctorParameters = () => [
    { type: SplineSeriesDirective, decorators: [{ type: Inject, args: [SplineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKSplineAreaLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKSplineAreaLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineAreaLabelStyle]",
            },] }
];
TKSplineAreaLabelStyleDirective.ctorParameters = () => [
    { type: SplineAreaSeriesDirective, decorators: [{ type: Inject, args: [SplineAreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKBubbleLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKBubbleLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBubbleLabelStyle]"
            },] }
];
TKBubbleLabelStyleDirective.ctorParameters = () => [
    { type: BubbleSeriesDirective, decorators: [{ type: Inject, args: [BubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKScatterBubbleLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKScatterBubbleLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterBubbleLabelStyle]"
            },] }
];
TKScatterBubbleLabelStyleDirective.ctorParameters = () => [
    { type: ScatterBubbleSeriesDirective, decorators: [{ type: Inject, args: [ScatterBubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCandlestickLabelStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKCandlestickLabelStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCandlestickLabelStyle]"
            },] }
];
TKCandlestickLabelStyleDirective.ctorParameters = () => [
    { type: CandlestickSeriesDirective, decorators: [{ type: Inject, args: [CandlestickSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKOhlcStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKOhlcStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkOhlcLabelStyle]"
            },] }
];
TKOhlcStyleDirective.ctorParameters = () => [
    { type: OhlcSeriesDirective, decorators: [{ type: Inject, args: [OhlcSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKScatterStyleDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const labelStyle = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.labelStyle = labelStyle;
    }
}
TKScatterStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterLabelStyle]"
            },] }
];
TKScatterStyleDirective.ctorParameters = () => [
    { type: ScatterSeriesDirective, decorators: [{ type: Inject, args: [ScatterSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianGridDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const grid = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.grid = grid;
    }
}
TKCartesianGridDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianGrid]"
            },] }
];
TKCartesianGridDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianSeriesDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const series = this._elementRef.nativeElement;
        if (this.owner.cartesianChart.series) {
            this.owner.cartesianChart.series.push(series);
        }
        else {
            this.owner.cartesianChart.series = new ObservableArray([series]);
        }
    }
}
TKCartesianSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianSeries]"
            },] }
];
TKCartesianSeriesDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKPieChartSeriesDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const series = this._elementRef.nativeElement;
        if (this.owner.pieChart.series) {
            this.owner.pieChart.series.push(series);
        }
        else {
            this.owner.pieChart.series = new ObservableArray([series]);
        }
    }
}
TKPieChartSeriesDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPieSeries]"
            },] }
];
TKPieChartSeriesDirective.ctorParameters = () => [
    { type: RadPieChartComponent, decorators: [{ type: Inject, args: [RadPieChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianPaletteDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        this._nativePalette = this._elementRef.nativeElement;
        if (this.owner.cartesianChart.palettes) {
            this.owner.cartesianChart.palettes.push(this._nativePalette);
        }
        else {
            this.owner.cartesianChart.palettes = new ObservableArray([this._nativePalette]);
        }
    }
    get nativePalette() {
        return this._nativePalette;
    }
}
TKCartesianPaletteDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianPalette]"
            },] }
];
TKCartesianPaletteDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKPiePaletteDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        this._nativePalette = this._elementRef.nativeElement;
        if (this.owner.pieChart.palettes) {
            this.owner.pieChart.palettes.push(this._nativePalette);
        }
        else {
            this.owner.pieChart.palettes = new ObservableArray([this._nativePalette]);
        }
    }
    get nativePalette() {
        return this._nativePalette;
    }
}
TKPiePaletteDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPiePalette]"
            },] }
];
TKPiePaletteDirective.ctorParameters = () => [
    { type: RadPieChartComponent, decorators: [{ type: Inject, args: [RadPieChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianPaletteEntryDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const entry = this._elementRef.nativeElement;
        if (this.owner.nativePalette.entries) {
            this.owner.nativePalette.entries.push(entry);
            this.owner.nativePalette.updateOwner();
        }
        else {
            this.owner.nativePalette.entries = new ObservableArray([entry]);
        }
    }
}
TKCartesianPaletteEntryDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianPaletteEntry]"
            },] }
];
TKCartesianPaletteEntryDirective.ctorParameters = () => [
    { type: TKCartesianPaletteDirective, decorators: [{ type: Inject, args: [TKCartesianPaletteDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKPiePaletteEntryDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const entry = this._elementRef.nativeElement;
        if (this.owner.nativePalette.entries) {
            this.owner.nativePalette.entries.push(entry);
            this.owner.nativePalette.updateOwner();
        }
        else {
            this.owner.nativePalette.entries = new ObservableArray([entry]);
        }
    }
}
TKPiePaletteEntryDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPiePaletteEntry]"
            },] }
];
TKPiePaletteEntryDirective.ctorParameters = () => [
    { type: TKPiePaletteDirective, decorators: [{ type: Inject, args: [TKPiePaletteDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const axis = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.horizontalAxis = axis;
    }
}
TKCartesianHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianHorizontalAxis]"
            },] }
];
TKCartesianHorizontalAxisDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const axis = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.verticalAxis = axis;
    }
}
TKCartesianVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianVerticalAxis]"
            },] }
];
TKCartesianVerticalAxisDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKLineVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKLineVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkLineVerticalAxis]"
            },] }
];
TKLineVerticalAxisDirective.ctorParameters = () => [
    { type: LineSeriesDirective, decorators: [{ type: Inject, args: [LineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKLineHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKLineHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkLineHorizontalAxis]"
            },] }
];
TKLineHorizontalAxisDirective.ctorParameters = () => [
    { type: LineSeriesDirective, decorators: [{ type: Inject, args: [LineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKBarVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKBarVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBarVerticalAxis]"
            },] }
];
TKBarVerticalAxisDirective.ctorParameters = () => [
    { type: BarSeriesDirective, decorators: [{ type: Inject, args: [BarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKBarHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKBarHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBarHorizontalAxis]"
            },] }
];
TKBarHorizontalAxisDirective.ctorParameters = () => [
    { type: BarSeriesDirective, decorators: [{ type: Inject, args: [BarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKRangeBarVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKRangeBarVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkRangeBarVerticalAxis]"
            },] }
];
TKRangeBarVerticalAxisDirective.ctorParameters = () => [
    { type: RangeBarSeriesDirective, decorators: [{ type: Inject, args: [RangeBarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKRangeBarHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKRangeBarHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkRangeBarHorizontalAxis]"
            },] }
];
TKRangeBarHorizontalAxisDirective.ctorParameters = () => [
    { type: RangeBarSeriesDirective, decorators: [{ type: Inject, args: [RangeBarSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKAreaVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKAreaVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkAreaVerticalAxis]"
            },] }
];
TKAreaVerticalAxisDirective.ctorParameters = () => [
    { type: AreaSeriesDirective, decorators: [{ type: Inject, args: [AreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKAreaHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKAreaHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkAreaHorizontalAxis]"
            },] }
];
TKAreaHorizontalAxisDirective.ctorParameters = () => [
    { type: AreaSeriesDirective, decorators: [{ type: Inject, args: [AreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKSplineVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKSplineVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineVerticalAxis]"
            },] }
];
TKSplineVerticalAxisDirective.ctorParameters = () => [
    { type: SplineSeriesDirective, decorators: [{ type: Inject, args: [SplineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKSplineHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKSplineHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineHorizontalAxis]"
            },] }
];
TKSplineHorizontalAxisDirective.ctorParameters = () => [
    { type: SplineSeriesDirective, decorators: [{ type: Inject, args: [SplineSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKSplineAreaVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKSplineAreaVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineAreaVerticalAxis]"
            },] }
];
TKSplineAreaVerticalAxisDirective.ctorParameters = () => [
    { type: SplineAreaSeriesDirective, decorators: [{ type: Inject, args: [SplineAreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKSplineAreaHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKSplineAreaHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkSplineAreaHorizontalAxis]"
            },] }
];
TKSplineAreaHorizontalAxisDirective.ctorParameters = () => [
    { type: SplineAreaSeriesDirective, decorators: [{ type: Inject, args: [SplineAreaSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKBubbleVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKBubbleVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBubbleVerticalAxis]"
            },] }
];
TKBubbleVerticalAxisDirective.ctorParameters = () => [
    { type: BubbleSeriesDirective, decorators: [{ type: Inject, args: [BubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKBubbleHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKBubbleHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkBubbleHorizontalAxis]"
            },] }
];
TKBubbleHorizontalAxisDirective.ctorParameters = () => [
    { type: BubbleSeriesDirective, decorators: [{ type: Inject, args: [BubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKScatterBubbleVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKScatterBubbleVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterBubbleVerticalAxis]"
            },] }
];
TKScatterBubbleVerticalAxisDirective.ctorParameters = () => [
    { type: ScatterBubbleSeriesDirective, decorators: [{ type: Inject, args: [ScatterBubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKScatterBubbleHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKScatterBubbleHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterBubbleHorizontalAxis]"
            },] }
];
TKScatterBubbleHorizontalAxisDirective.ctorParameters = () => [
    { type: ScatterBubbleSeriesDirective, decorators: [{ type: Inject, args: [ScatterBubbleSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCandlestickVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKCandlestickVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCandlestickVerticalAxis]"
            },] }
];
TKCandlestickVerticalAxisDirective.ctorParameters = () => [
    { type: CandlestickSeriesDirective, decorators: [{ type: Inject, args: [CandlestickSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCandlestickHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKCandlestickHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCandlestickHorizontalAxis]"
            },] }
];
TKCandlestickHorizontalAxisDirective.ctorParameters = () => [
    { type: CandlestickSeriesDirective, decorators: [{ type: Inject, args: [CandlestickSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKOhlcVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKOhlcVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkOhlcVerticalAxis]"
            },] }
];
TKOhlcVerticalAxisDirective.ctorParameters = () => [
    { type: OhlcSeriesDirective, decorators: [{ type: Inject, args: [OhlcSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKOhlcHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKOhlcHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkOhlcHorizontalAxis]"
            },] }
];
TKOhlcHorizontalAxisDirective.ctorParameters = () => [
    { type: OhlcSeriesDirective, decorators: [{ type: Inject, args: [OhlcSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKScatterVerticalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const verticalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.verticalAxis = verticalAxis;
    }
}
TKScatterVerticalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterVerticalAxis]"
            },] }
];
TKScatterVerticalAxisDirective.ctorParameters = () => [
    { type: ScatterSeriesDirective, decorators: [{ type: Inject, args: [ScatterSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKScatterHorizontalAxisDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const horizontalAxis = this._elementRef.nativeElement;
        const series = this.owner.nativeSeries;
        series.horizontalAxis = horizontalAxis;
    }
}
TKScatterHorizontalAxisDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkScatterHorizontalAxis]"
            },] }
];
TKScatterHorizontalAxisDirective.ctorParameters = () => [
    { type: ScatterSeriesDirective, decorators: [{ type: Inject, args: [ScatterSeriesDirective,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKPieLegendDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const legend = this._elementRef.nativeElement;
        const pieChart = this.owner.pieChart;
        pieChart.legend = legend;
    }
}
TKPieLegendDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkPieLegend]",
            },] }
];
TKPieLegendDirective.ctorParameters = () => [
    { type: RadPieChartComponent, decorators: [{ type: Inject, args: [RadPieChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianLegendDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const legend = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.legend = legend;
    }
}
TKCartesianLegendDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianLegend]",
            },] }
];
TKCartesianLegendDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianTrackballDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const trackball = this._elementRef.nativeElement;
        const cartesianChart = this.owner.cartesianChart;
        cartesianChart.trackball = trackball;
    }
}
TKCartesianTrackballDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianTrackball]"
            },] }
];
TKCartesianTrackballDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
class TKCartesianAnnotationsDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const annotation = this._elementRef.nativeElement;
        if (this.owner.cartesianChart.annotations) {
            this.owner.cartesianChart.annotations.push(annotation);
        }
        else {
            this.owner.cartesianChart.annotations = new ObservableArray([annotation]);
        }
    }
}
TKCartesianAnnotationsDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCartesianAnnotations]"
            },] }
];
TKCartesianAnnotationsDirective.ctorParameters = () => [
    { type: RadCartesianChartComponent, decorators: [{ type: Inject, args: [RadCartesianChartComponent,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
const CHART_DIRECTIVES = [RadCartesianChartComponent, RadPieChartComponent, LineSeriesDirective, AreaSeriesDirective, SplineSeriesDirective, SplineAreaSeriesDirective, BarSeriesDirective, RangeBarSeriesDirective, BubbleSeriesDirective, ScatterBubbleSeriesDirective, ScatterSeriesDirective, PieSeriesDirective, TKPieChartSeriesDirective, TKCartesianSeriesDirective, PieSeriesDirective, TKCartesianHorizontalAxisDirective, TKCartesianVerticalAxisDirective, LinearAxisDirective, DateTimeCategoricalAxisDirective, CategoricalAxisDirective, RadCartesianChartGridDirective, TKCartesianGridDirective, PaletteDirective, TKCartesianPaletteDirective, CandlestickSeriesDirective, OhlcSeriesDirective, RadLegendViewDirective, DonutSeriesDirective, TKPieLegendDirective, TKCartesianLegendDirective, ChartGridLineAnnotationDirective, TKCartesianAnnotationsDirective, ChartPlotBandAnnotationDirective, TKCartesianTrackballDirective, TrackballDirective, PointLabelStyleDirective, TKPieLabelStyleDirective, TKLineLabelStyleDirective, TKBarLabelStyleDirective, TKRangeBarLabelStyleDirective, TKAreaLabelStyleDirective, TKSplineLabelStyleDirective, TKBubbleLabelStyleDirective, TKScatterBubbleLabelStyleDirective, TKCandlestickLabelStyleDirective, TKOhlcStyleDirective, TKScatterStyleDirective, TKDonutLabelStyleDirective, DateTimeContinuousAxisDirective, TKCartesianPaletteEntryDirective, LogarithmicAxisDirective, TKLineVerticalAxisDirective, TKLineHorizontalAxisDirective, TKBarVerticalAxisDirective, TKBarHorizontalAxisDirective, TKRangeBarVerticalAxisDirective, TKRangeBarHorizontalAxisDirective, TKAreaVerticalAxisDirective, TKAreaHorizontalAxisDirective, TKSplineVerticalAxisDirective, TKSplineHorizontalAxisDirective, TKSplineAreaVerticalAxisDirective, TKSplineAreaHorizontalAxisDirective, TKBubbleVerticalAxisDirective, TKBubbleHorizontalAxisDirective, TKScatterBubbleVerticalAxisDirective, TKScatterBubbleHorizontalAxisDirective, TKCandlestickVerticalAxisDirective, TKCandlestickHorizontalAxisDirective, TKOhlcVerticalAxisDirective, TKOhlcHorizontalAxisDirective, TKScatterVerticalAxisDirective, TKScatterHorizontalAxisDirective, TKPiePaletteDirective, TKPiePaletteEntryDirective, TKSplineAreaLabelStyleDirective];
registerElement("RadCartesianChart", () => RadCartesianChart);
registerElement("RadPieChart", () => RadPieChart);
registerElement("RadLegendView", () => RadLegendView);
registerElement("LineSeries", () => LineSeries);
registerElement("PieSeries", () => PieSeries);
registerElement("DonutSeries", () => DonutSeries);
registerElement("AreaSeries", () => AreaSeries);
registerElement("CategoricalAxis", () => CategoricalAxis);
registerElement("LinearAxis", () => LinearAxis);
registerElement("DateTimeCategoricalAxis", () => DateTimeCategoricalAxis);
registerElement("SplineSeries", () => SplineSeries);
registerElement("BarSeries", () => BarSeries);
registerElement("RangeBarSeries", () => RangeBarSeries);
registerElement("BubbleSeries", () => BubbleSeries);
registerElement("ScatterBubbleSeries", () => ScatterBubbleSeries);
registerElement("ScatterSeries", () => ScatterSeries);
registerElement("OhlcSeries", () => OhlcSeries);
registerElement("CandlestickSeries", () => CandlestickSeries);
registerElement("RadCartesianChartGrid", () => RadCartesianChartGrid);
registerElement("Palette", () => Palette);
registerElement("PaletteEntry", () => PaletteEntry);
registerElement("ChartGridLineAnnotation", () => ChartGridLineAnnotation);
registerElement("ChartPlotBandAnnotation", () => ChartPlotBandAnnotation);
registerElement("Trackball", () => Trackball);
registerElement("PointLabelStyle", () => PointLabelStyle);
registerElement("DateTimeContinuousAxis", () => DateTimeContinuousAxis);
registerElement("LogarithmicAxis", () => LogarithmicAxis);
registerElement("SplineAreaSeries", () => SplineAreaSeries);
class NativeScriptUIChartModule {
}
NativeScriptUIChartModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CHART_DIRECTIVES],
                exports: [CHART_DIRECTIVES]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AreaSeriesDirective, BarSeriesDirective, BubbleSeriesDirective, CHART_DIRECTIVES, CandlestickSeriesDirective, CategoricalAxisDirective, ChartGridLineAnnotationDirective, ChartPlotBandAnnotationDirective, DateTimeCategoricalAxisDirective, DateTimeContinuousAxisDirective, DonutSeriesDirective, LineSeriesDirective, LinearAxisDirective, LogarithmicAxisDirective, NativeScriptUIChartModule, OhlcSeriesDirective, PaletteDirective, PieSeriesDirective, PointLabelStyleDirective, RadCartesianChartComponent, RadCartesianChartGridDirective, RadLegendViewDirective, RadPieChartComponent, RangeBarSeriesDirective, ScatterBubbleSeriesDirective, ScatterSeriesDirective, SeriesComponentBase, SplineAreaSeriesDirective, SplineSeriesDirective, TKAreaHorizontalAxisDirective, TKAreaLabelStyleDirective, TKAreaVerticalAxisDirective, TKBarHorizontalAxisDirective, TKBarLabelStyleDirective, TKBarVerticalAxisDirective, TKBubbleHorizontalAxisDirective, TKBubbleLabelStyleDirective, TKBubbleVerticalAxisDirective, TKCandlestickHorizontalAxisDirective, TKCandlestickLabelStyleDirective, TKCandlestickVerticalAxisDirective, TKCartesianAnnotationsDirective, TKCartesianGridDirective, TKCartesianHorizontalAxisDirective, TKCartesianLegendDirective, TKCartesianPaletteDirective, TKCartesianPaletteEntryDirective, TKCartesianSeriesDirective, TKCartesianTrackballDirective, TKCartesianVerticalAxisDirective, TKDonutLabelStyleDirective, TKLineHorizontalAxisDirective, TKLineLabelStyleDirective, TKLineVerticalAxisDirective, TKOhlcHorizontalAxisDirective, TKOhlcStyleDirective, TKOhlcVerticalAxisDirective, TKPieChartSeriesDirective, TKPieLabelStyleDirective, TKPieLegendDirective, TKPiePaletteDirective, TKPiePaletteEntryDirective, TKRangeBarHorizontalAxisDirective, TKRangeBarLabelStyleDirective, TKRangeBarVerticalAxisDirective, TKScatterBubbleHorizontalAxisDirective, TKScatterBubbleLabelStyleDirective, TKScatterBubbleVerticalAxisDirective, TKScatterHorizontalAxisDirective, TKScatterStyleDirective, TKScatterVerticalAxisDirective, TKSplineAreaHorizontalAxisDirective, TKSplineAreaLabelStyleDirective, TKSplineAreaVerticalAxisDirective, TKSplineHorizontalAxisDirective, TKSplineLabelStyleDirective, TKSplineVerticalAxisDirective, TrackballDirective };
//# sourceMappingURL=nativescript-ui-chart-angular.js.map
