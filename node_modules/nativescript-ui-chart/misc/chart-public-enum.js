export const seriesName = 'seriesName';
/*
 * Lists the possible stack modes for chart series.
 */
export var ChartSeriesStackMode;
(function (ChartSeriesStackMode) {
    /**
     * Series are not stacked
     * */
    ChartSeriesStackMode["None"] = "None";
    /**
     *  Stack series
     */
    ChartSeriesStackMode["Stack"] = "Stack";
    /**
     * Stack series up to 100%.
     * */
    ChartSeriesStackMode["Stack100"] = "Stack100";
})(ChartSeriesStackMode || (ChartSeriesStackMode = {}));
/**
 * Font styles
 */
export var ChartFontStyle;
(function (ChartFontStyle) {
    /**
     * Regular font style
     */
    ChartFontStyle["Normal"] = "Normal";
    /**
     * Bold font style
     */
    ChartFontStyle["Bold"] = "Bold";
    /**
     * Italic font style
     */
    ChartFontStyle["Italic"] = "Italic";
    /**
     * Combine Bold and Italic styles
     */
    ChartFontStyle["BoldItalic"] = "BoldItalic";
})(ChartFontStyle || (ChartFontStyle = {}));
/**
 * Defines available options for {@link ChartSeries}'s {@link selectionMode} property
 */
export var ChartSeriesSelectionMode;
(function (ChartSeriesSelectionMode) {
    /**
     * Series selection disabled.
     */
    ChartSeriesSelectionMode["None"] = "Normal";
    /**
     * Series selection not set. The selection mode set to chart will be used.
     */
    ChartSeriesSelectionMode["NotSet"] = "NotSet";
    /**
     * Select the whole series.
     */
    ChartSeriesSelectionMode["Series"] = "Series";
    /**
     * Select a single data point.
     */
    ChartSeriesSelectionMode["DataPoint"] = "DataPoint";
    /**
     * Select multiple points.
     */
    ChartSeriesSelectionMode["DataPointMultiple"] = "DataPointMultiple";
})(ChartSeriesSelectionMode || (ChartSeriesSelectionMode = {}));
/**
 * Defines available options for {@link RadChartBase}'s seriesSelectionMode and pointSelectionMode properties
 */
export var ChartSelectionMode;
(function (ChartSelectionMode) {
    /**
     *  Only a single item (series or point) can be selected at a time.
     */
    ChartSelectionMode["Single"] = "Single";
    /**
     * Multiple series/points can be selected.
     */
    ChartSelectionMode["Multiple"] = "Multiple";
    /**
     * Selection disabled.
     */
    ChartSelectionMode["None"] = "None";
})(ChartSelectionMode || (ChartSelectionMode = {}));
export var ChartTrackballSnapMode;
(function (ChartTrackballSnapMode) {
    /**
     * Only the closest point is selected.
     */
    ChartTrackballSnapMode["ClosestPoint"] = "ClosestPoint";
    /**
     * All points with the same category as the closest point are selected.
     */
    ChartTrackballSnapMode["AllClosestPoints"] = "AllClosestPoints";
})(ChartTrackballSnapMode || (ChartTrackballSnapMode = {}));
/*
 * Defines the different places where the legend can be positioned.
 */
export var ChartLegendPosition;
(function (ChartLegendPosition) {
    /**
     * The legend is positioned at the left side of the chart.
     */
    ChartLegendPosition["Left"] = "Left";
    /**
     * The legend is positioned at the right side of the chart.
     */
    ChartLegendPosition["Right"] = "Right";
    /**
     * The legend is positioned at the top side of the chart.
     */
    ChartLegendPosition["Top"] = "Top";
    /**
     * The legend is positioned at the bottom side of the chart.
     */
    ChartLegendPosition["Bottom"] = "Bottom";
    /**
     * The legend is floating. The default offset origin for this mode is TopLeft with offset values (0,0).
     */
    ChartLegendPosition["Floating"] = "Floating";
})(ChartLegendPosition || (ChartLegendPosition = {}));
/*
 * Defines the possible values of the offsetOrigin property of {@link RadLegendView}.
 * The offsetOrigin has effect only when the legend's position property's value is Floating.
 */
export var ChartLegendOffsetOrigin;
(function (ChartLegendOffsetOrigin) {
    /**
     * The offset is relative to the top left corner.
     */
    ChartLegendOffsetOrigin["TopLeft"] = "TopLeft";
    /**
     * The offset is relative to the top right corner.
     */
    ChartLegendOffsetOrigin["TopRight"] = "TopRight";
    /**
     * The offset is relative to the bottom left corner.
     */
    ChartLegendOffsetOrigin["BottomLeft"] = "BottomLeft";
    /**
     * The offset is relative to the bottom right corner.
     */
    ChartLegendOffsetOrigin["BottomRight"] = "BottomRight";
})(ChartLegendOffsetOrigin || (ChartLegendOffsetOrigin = {}));
/*
 * Lists the possible values for the seriesState property of {@link Palette}.
 */
export var ChartPaletteSeriesState;
(function (ChartPaletteSeriesState) {
    /**
     * The palette will be used when the series are not in selected state
     */
    ChartPaletteSeriesState["Normal"] = "Normal";
    /**
     * The palette will be used when the series are in selected state
     */
    ChartPaletteSeriesState["Selected"] = "Selected";
})(ChartPaletteSeriesState || (ChartPaletteSeriesState = {}));
/*
 * Lists the possible values for the paletteMode property of {@link CartesianSeries}.
 */
export var ChartSeriesPaletteMode;
(function (ChartSeriesPaletteMode) {
    /**
     * The palette item that will be used will be selected depending on the index of the current series.
     */
    ChartSeriesPaletteMode["Series"] = "Series";
    /**
     * The palette item that will be used will be selected depending on the index of the current item.
     */
    ChartSeriesPaletteMode["Item"] = "Item";
})(ChartSeriesPaletteMode || (ChartSeriesPaletteMode = {}));
/*
 * Lists the possible values for the labelFitMode property of {@link CartesianAxis}.
 */
export var ChartAxisLabelFitMode;
(function (ChartAxisLabelFitMode) {
    /**
     * The default single line mode
     */
    ChartAxisLabelFitMode["None"] = "None";
    /**
     * Axis labels are on multiple lines.
     */
    ChartAxisLabelFitMode["Multiline"] = "Multiline";
    /**
     * Axis labels are rotated. Use labelRotationAngle to set the corresponding rotation angle.
     */
    ChartAxisLabelFitMode["Rotate"] = "Rotate";
})(ChartAxisLabelFitMode || (ChartAxisLabelFitMode = {}));
/*
 * Lists the possible values for the labelLayoutMode property of {@link CartesianAxis}.
 */
export var ChartAxisLabelLayoutMode;
(function (ChartAxisLabelLayoutMode) {
    /*
     * The labels will be outside for the chart. Otherwise said, for horizontal axis the label will be on bottom and for vertical on right side of axis.
     */
    ChartAxisLabelLayoutMode["Outer"] = "Outer";
    /*
     * The labels will be inside of the chart. Otherwise said, for horizontal axis the label will be on top and for vertical on left side of axis.
     */
    ChartAxisLabelLayoutMode["Inner"] = "Inner";
})(ChartAxisLabelLayoutMode || (ChartAxisLabelLayoutMode = {}));
/**
 * Lists the possible values for the horizontalLocation property of vertical axes of type {@link CartesianAxis}.
 */
export var ChartAxisHorizontalLocation;
(function (ChartAxisHorizontalLocation) {
    /**
     * The axis is positioned at the left side of the plotting area.
     */
    ChartAxisHorizontalLocation["Left"] = "Left";
    /**
     * The axis is positioned at the right side of the plotting area.
     */
    ChartAxisHorizontalLocation["Right"] = "Right";
})(ChartAxisHorizontalLocation || (ChartAxisHorizontalLocation = {}));
/**
 * Lists the possible values for the verticalLocation property of horizontal axes of type {@link CartesianAxis}.
 */
export var ChartAxisVerticalLocation;
(function (ChartAxisVerticalLocation) {
    /**
     * The axis is positioned at the top of the plotting area.
     */
    ChartAxisVerticalLocation["Top"] = "Top";
    /**
     * The axis is positioned at the bottom of the plotting area.
     */
    ChartAxisVerticalLocation["Bottom"] = "Bottom";
})(ChartAxisVerticalLocation || (ChartAxisVerticalLocation = {}));
/**
 * Lists the possible values of the plotMode property of {@link CategoricalAxis} and {@link DateTimeContinuousAxis}.
 */
export var ChartAxisPlotMode;
(function (ChartAxisPlotMode) {
    /**
     * Data points are plotted between the ticks.
     */
    ChartAxisPlotMode["BetweenTicks"] = "BetweenTicks";
    /**
     * Data points are plotted on the ticks.
     */
    ChartAxisPlotMode["OnTicks"] = "OnTicks";
})(ChartAxisPlotMode || (ChartAxisPlotMode = {}));
/**
 * Lists the possible visibility options for the firstLabelVisibility and lastLabelVisibility properties of {@link CategoricalAxis}.
 */
export var ChartAxisLabelVisibility;
(function (ChartAxisLabelVisibility) {
    /**
     * The axis label is shown.
     */
    ChartAxisLabelVisibility["Visible"] = "Visible";
    /**
     * The axis label is not shown.
     */
    ChartAxisLabelVisibility["Hidden"] = "Hidden";
    /**
     * The axis label is clipped.
     * NOTE: Works only on Android.
     */
    ChartAxisLabelVisibility["Clip"] = "Clip";
})(ChartAxisLabelVisibility || (ChartAxisLabelVisibility = {}));
/**
 * Lists the possible ways to extract a category from a Date object.
 * The proper type should be set as a value of the dateTimeComponent property of {@link DateTimeCategoricalAxis} or
 * the majorStepUnit property of {@link DateTimeContinuousAxis}.
 */
export var ChartAxisDateTimeComponent;
(function (ChartAxisDateTimeComponent) {
    /**
     * The 'seconds' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Second"] = "Second";
    /**
     * The 'minutes' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Minute"] = "Minute";
    /**
     * The 'hours' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Hour"] = "Hour";
    /**
     * The 'days' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Day"] = "Day";
    /**
     * The 'weeks' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Week"] = "Week";
    /**
     * The 'months' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Month"] = "Month";
    /**
     * The 'years' value of the Date object will be considered.
     */
    ChartAxisDateTimeComponent["Year"] = "Year";
})(ChartAxisDateTimeComponent || (ChartAxisDateTimeComponent = {}));
/**
 * Lists the possible values of the zPosition property of {@link CartesianChartAnnotation}.
 */
export var ChartAnnotationZPosition;
(function (ChartAnnotationZPosition) {
    /**
     * The annotation is rendered below the series (default).
     */
    ChartAnnotationZPosition["BelowSeries"] = "BelowSeries";
    /**
     * The annotation is rendered above the series.
     */
    ChartAnnotationZPosition["AboveSeries"] = "AboveSeries";
})(ChartAnnotationZPosition || (ChartAnnotationZPosition = {}));
export function toPascalCase(value) {
    if (!value) {
        return value;
    }
    const words = value.split('-');
    const upperCaseWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));
    return upperCaseWords.join('');
}
//# sourceMappingURL=chart-public-enum.js.map