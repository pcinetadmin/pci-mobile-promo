import { paddingBottomProperty, paddingTopProperty, paddingLeftProperty, paddingRightProperty, Enums, Application } from "@nativescript/core";
import * as commonModule from "./ui-chart.common";
import * as publicEnumModule from "./misc/chart-public-enum";
import * as trackBallCommonModule from "./visualization/parts/chart-track-ball.common";
export * from "./ui-chart.common";
export * from "./misc/chart-public-enum";
export * from './visualization/views/chart-legend-view';
export * from "./visualization/views/chart-axis";
export * from "./misc/chart-event-data.common";
export * from "./visualization/parts/chart-label-style.common";
export * from "./visualization/views/chart-series";
export * from "./visualization/parts/chart-palette.common";
export * from "./visualization/parts/chart-annotation";
export * from "./visualization/parts/chart-cartesian-chart-grid.common";
export { RadCartesianChartGrid } from "./visualization/parts/chart-cartesian-chart-grid";
export * from "./visualization/parts/chart-track-ball";
function getSdkApiLevel() {
    return android.os.Build.VERSION.SDK_INT;
}
let ChartSelectionChangeListener;
let ChartPanZoomListener;
function initializeListeners() {
    if (!ChartSelectionChangeListener) {
        var ChartSelectionChangeListenerImpl = /** @class */ (function (_super) {
    __extends(ChartSelectionChangeListenerImpl, _super);
    function ChartSelectionChangeListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ChartSelectionChangeListenerImpl.prototype.onSelectionChanged = function (selectionContext) {
        var isCartesianChart = this.owner instanceof RadCartesianChart;
        if (selectionContext.selectedSeries()) {
            var args = {
                eventName: commonModule.RadChartBase.seriesSelectedEvent,
                object: this.owner,
                series: isCartesianChart ? this.owner.series.getItem(selectionContext.selectedSeries().getCollectionIndex()) : this.owner.series,
                pointIndex: null,
                pointData: null
            };
            this.owner.notify(args);
        }
        if (selectionContext.deselectedSeries()) {
            var args = {
                eventName: commonModule.RadChartBase.seriesDeselectedEvent,
                object: this.owner,
                series: isCartesianChart ? this.owner.series.getItem(selectionContext.deselectedSeries().getCollectionIndex()) : this.owner.series,
                pointIndex: null,
                pointData: null
            };
            this.owner.notify(args);
        }
        if (selectionContext.selectedDataPoint()) {
            var args = {
                eventName: commonModule.RadChartBase.pointSelectedEvent,
                object: this.owner,
                series: isCartesianChart ? this.owner.series.getItem(selectionContext.selectedDataPoint().getPresenter().getCollectionIndex()) : this.owner.series,
                pointIndex: selectionContext.selectedDataPoint().index(),
                pointData: selectionContext.selectedDataPoint()
            };
            this.owner.notify(args);
        }
        if (selectionContext.deselectedDataPoint()) {
            var args = {
                eventName: commonModule.RadChartBase.pointDeselectedEvent,
                object: this.owner,
                series: isCartesianChart ? this.owner.series.getItem(selectionContext.deselectedDataPoint().getPresenter().getCollectionIndex()) : this.owner.series,
                pointIndex: selectionContext.deselectedDataPoint().index(),
                pointData: selectionContext.deselectedDataPoint()
            };
            this.owner.notify(args);
        }
    };
    ChartSelectionChangeListenerImpl = __decorate([
        Interfaces([com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener])
    ], ChartSelectionChangeListenerImpl);
    return ChartSelectionChangeListenerImpl;
}(java.lang.Object));
        ChartSelectionChangeListener = ChartSelectionChangeListenerImpl;
    }
    if (!ChartPanZoomListener) {
        var ChartPanZoomListenerImpl = /** @class */ (function (_super) {
    __extends(ChartPanZoomListenerImpl, _super);
    function ChartPanZoomListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ChartPanZoomListenerImpl.prototype.onPan = function (panX, panY) {
        var args = {
            eventName: commonModule.RadChartBase.chartPannedEvent,
            object: this.owner,
            pointData: null,
            pointIndex: null,
            series: null
        };
        this.owner.notify(args);
    };
    ChartPanZoomListenerImpl.prototype.onZoom = function (zoomX, zoomY) {
        var args = {
            eventName: commonModule.RadChartBase.chartZoomedEvent,
            object: this.owner,
            pointData: null,
            pointIndex: null,
            series: null
        };
        this.owner.notify(args);
    };
    ChartPanZoomListenerImpl = __decorate([
        Interfaces([com.telerik.widget.chart.visualization.behaviors.PanZoomListener])
    ], ChartPanZoomListenerImpl);
    return ChartPanZoomListenerImpl;
}(java.lang.Object));
        ChartPanZoomListener = ChartPanZoomListenerImpl;
    }
}
export class RadPieChart extends commonModule.RadPieChart {
    constructor() {
        super();
    }
    get androidView() {
        return this._android;
    }
    get rootLayout() {
        return this._rootLayout;
    }
    get _nativeView() {
        return this._rootLayout;
    }
    createNativeView() {
        initializeListeners();
        this._android = new com.telerik.widget.chart.visualization.pieChart.RadPieChartView(this._context, Application.systemAppearance());
        this._rootLayout = new android.widget.RelativeLayout(this._context);
        this._rootLayout.addView(this._android);
        if (this.legend) {
            this.legend.updateLegendView(this);
        }
        this.initializer.loadSeries(this);
        this.initSelectionBehavior();
        this.pieChartSystemAppearanceChangedHandler = (args) => {
            if (!this._android) {
                return;
            }
            this.updatePaletteStyle(args.newValue);
            if (this.legend) {
                this.legend.updateLegendTitle();
                this.legend.updateListViewForTheme();
            }
        };
        Application.on(Application.systemAppearanceChangedEvent, this.pieChartSystemAppearanceChangedHandler);
        return this._rootLayout;
    }
    initNativeView() {
        if (getSdkApiLevel() && getSdkApiLevel() >= 29) {
            this._android.setForceDarkAllowed(false);
            this.nativeViewProtected.setForceDarkAllowed(false);
        }
        if (Application.systemAppearance() === Enums.SystemAppearance.dark && this.legend) {
            this.legend.updateLegendTitle();
        }
    }
    disposeNativeView() {
        Application.off(Application.systemAppearanceChangedEvent, this.pieChartSystemAppearanceChangedHandler);
        this.detachSeries();
        if (this._selectionBehavior) {
            this._android.getBehaviors().remove(this._selectionBehavior);
            this._selectionBehavior = null;
        }
        if (this._android._selectionChangeListener) {
            this._android._selectionChangeListener.owner = null;
        }
    }
    _onDetach(force) {
        this.detachSeries();
        super['_onDetach'](force);
    }
    updatePaletteStyle(appearance) {
        this._android.setPalette(this.getPaletteForSystemAppearance(appearance));
        this._android.setSelectionPalette(this.getSelectedPaletteForSystemAppearance(appearance));
        if (this.palettes) {
            this.initializer.reloadPalettes(this);
        }
    }
    getPaletteForSystemAppearance(appearance) {
        if (appearance === Enums.SystemAppearance.dark) {
            return com.telerik.widget.palettes.ChartPalettes.dark(this._android.getContext());
        }
        return com.telerik.widget.palettes.ChartPalettes.light(this._android.getContext());
    }
    getSelectedPaletteForSystemAppearance(appearance) {
        if (appearance === Enums.SystemAppearance.dark) {
            return com.telerik.widget.palettes.ChartPalettes.darkSelected(this._android.getContext());
        }
        return com.telerik.widget.palettes.ChartPalettes.lightSelected(this._android.getContext());
    }
    detachSeries() {
        const thisAndroid = this._android;
        if (thisAndroid) {
            this._rootLayout = undefined;
            if (this.series) {
                for (let i = 0; i < this.series.length; i++) {
                    if (thisAndroid.getSeries().indexOf(this.series.getItem(i).android) !== -1) {
                        thisAndroid.getSeries().remove(this.series.getItem(i).android);
                    }
                }
            }
        }
    }
    initSelectionBehavior() {
        if (!this._selectionBehavior) {
            this._selectionBehavior = new com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior();
            this._selectionBehavior.setDataPointsSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.NONE);
            this._selectionBehavior.setSeriesSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.NONE);
            this._android._selectionChangeListener = new ChartSelectionChangeListener(this);
            this._selectionBehavior.setSelectionChangeListener(this._android._selectionChangeListener);
            this._android.getBehaviors().add(this._selectionBehavior);
        }
    }
    onLegendChanged(oldValue, newValue) {
        if (this.legend) {
            this.legend.updateLegendView(this);
        }
        this.initializer.onLegendChanged(oldValue, newValue, this);
    }
}
export class RadCartesianChart extends commonModule.RadCartesianChart {
    constructor() {
        super();
    }
    get android() {
        return this._rootLayout;
    }
    get androidView() {
        return this._android;
    }
    get rootLayout() {
        return this._rootLayout;
    }
    get _nativeView() {
        return this._rootLayout;
    }
    createNativeView() {
        initializeListeners();
        this._android = new com.telerik.widget.chart.visualization.cartesianChart.RadCartesianChartView(this._context, Application.systemAppearance());
        if (this._selectionBehavior) {
            this._android.getBehaviors().add(this._selectionBehavior);
        }
        else {
            this.initSelectionBehavior();
        }
        this._android._selectionChangeListener = new ChartSelectionChangeListener(this);
        this._selectionBehavior.setSelectionChangeListener(this._android._selectionChangeListener);
        this._rootLayout = new android.widget.RelativeLayout(this._context);
        this._rootLayout.addView(this._android);
        if (this.grid) {
            this._android.setGrid(null);
            this._android.setGrid(this.grid._android);
        }
        this._ngKey = Object.keys(this).find(key => key.startsWith('_ngcontent'));
        this._vueKey = Object.keys(this).find(key => key.startsWith('data-v'));
        if (this.horizontalAxis) {
            this._android.setHorizontalAxis(null);
            this._android.setHorizontalAxis(this.horizontalAxis.android);
            this.horizontalAxis.owner = this;
        }
        if (this.verticalAxis) {
            this._android.setVerticalAxis(null);
            this._android.setVerticalAxis(this.verticalAxis.android);
            this.verticalAxis.owner = this;
        }
        if (this.series) {
            this.initializer.loadSeries(this);
        }
        if (this.legend) {
            this.legend.updateLegendView(this);
        }
        if (this.annotations) {
            for (let i = 0; i < this.annotations.length; i++) {
                this.initNativeAnnotation(i);
                this.annotations.getItem(i)._onOwnerUICreated();
            }
            this.initializer.loadAnnotations(this);
        }
        this.updatePanZoomBehavior();
        this._syncZoomValues();
        this.setNativeTrackballBehavior(this.trackball);
        this.cartesianChartSystemAppearanceChangedHandler = (args) => {
            if (!this._android) {
                return;
            }
            this.updatePaletteStyle(args.newValue);
            if (this.legend) {
                this.legend.updateLegendTitle();
                this.legend.updateListViewForTheme();
            }
        };
        Application.on(Application.systemAppearanceChangedEvent, this.cartesianChartSystemAppearanceChangedHandler);
        return this._rootLayout;
    }
    initNativeView() {
        if (getSdkApiLevel() && getSdkApiLevel() >= 29) {
            this._android.setForceDarkAllowed(false);
            this.nativeViewProtected.setForceDarkAllowed(false);
        }
        if (Application.systemAppearance() === Enums.SystemAppearance.dark && this.legend) {
            this.legend.updateLegendTitle();
        }
    }
    disposeNativeView() {
        Application.off(Application.systemAppearanceChangedEvent, this.cartesianChartSystemAppearanceChangedHandler);
        this.detachSeries();
        if (this._panZoomBehavior) {
            this._android.getBehaviors().remove(this._panZoomBehavior);
            this._panZoomBehavior = undefined;
        }
        if (this._selectionBehavior) {
            this._android.getBehaviors().remove(this._selectionBehavior);
            this._selectionBehavior = null;
        }
        if (this._android._panZoomListener) {
            this._android._panZoomListener.owner = null;
        }
        if (this._android._selectionChangeListener) {
            this._android._selectionChangeListener.owner = null;
        }
        super.disposeNativeView();
    }
    [paddingLeftProperty.getDefault]() {
        return this._android.getChartPaddingLeft();
    }
    [paddingLeftProperty.setNative](value) {
        const paddingTop = this._android.getChartPaddingTop();
        const paddingRight = this._android.getChartPaddingRight();
        const paddingBottom = this._android.getChartPaddingBottom();
        this._android.setChartPadding(0, paddingTop, paddingRight, paddingBottom);
    }
    [paddingTopProperty.getDefault]() {
        return this._android.getChartPaddingTop();
    }
    [paddingTopProperty.setNative](value) {
        const paddingLeft = this._android.getChartPaddingLeft();
        const paddingRight = this._android.getChartPaddingRight();
        const paddingBottom = this._android.getChartPaddingBottom();
        this._android.setChartPadding(paddingLeft, 0, paddingRight, paddingBottom);
    }
    [paddingRightProperty.getDefault]() {
        return this._android.getChartPaddingRight();
    }
    [paddingRightProperty.setNative](value) {
        const paddingLeft = this._android.getChartPaddingLeft();
        const paddingTop = this._android.getChartPaddingTop();
        const paddingBottom = this._android.getChartPaddingBottom();
        this._android.setChartPadding(paddingLeft, paddingTop, 0, paddingBottom);
    }
    [paddingBottomProperty.getDefault]() {
        return this._android.getChartPaddingBottom();
    }
    [paddingBottomProperty.setNative](value) {
        const paddingLeft = this._android.getChartPaddingLeft();
        const paddingTop = this._android.getChartPaddingTop();
        const paddingRight = this._android.getChartPaddingRight();
        this._android.setChartPadding(paddingLeft, paddingTop, paddingRight, 0);
    }
    onLegendChanged(oldValue, newValue) {
        if (this.legend) {
            this.legend.updateLegendView(this);
        }
        this.initializer.onLegendChanged(oldValue, newValue, this);
    }
    getAxisByID(axisID) {
        if (this.horizontalAxis && this.horizontalAxis.id === axisID) {
            return this.horizontalAxis;
        }
        if (this.verticalAxis && this.verticalAxis.id === axisID) {
            return this.verticalAxis;
        }
        if (this.series) {
            let axis;
            for (let i = 0; i < this.series.length; ++i) {
                axis = this.series.getItem(i).horizontalAxis;
                if (axis && axis.id === axisID) {
                    return axis;
                }
                axis = this.series.getItem(i).verticalAxis;
                if (axis && axis.id === axisID) {
                    return axis;
                }
            }
        }
        return null;
    }
    _onDetach(force) {
        this.detachSeries();
        super['_onDetach'](force);
    }
    updatePaletteStyle(appearance) {
        this._android.setPalette(this.getPaletteForSystemAppearance(appearance));
        this._android.setSelectionPalette(this.getSelectedPaletteForSystemAppearance(appearance));
        if (this.palettes) {
            this.initializer.reloadPalettes(this);
        }
    }
    getPaletteForSystemAppearance(appearance) {
        if (appearance === Enums.SystemAppearance.dark) {
            return com.telerik.widget.palettes.ChartPalettes.dark(this._android.getContext());
        }
        return com.telerik.widget.palettes.ChartPalettes.light(this._android.getContext());
    }
    getSelectedPaletteForSystemAppearance(appearance) {
        if (appearance === Enums.SystemAppearance.dark) {
            return com.telerik.widget.palettes.ChartPalettes.darkSelected(this._android.getContext());
        }
        return com.telerik.widget.palettes.ChartPalettes.lightSelected(this._android.getContext());
    }
    detachSeries() {
        let thisAndroid = this._android;
        if (thisAndroid) {
            this._rootLayout = undefined;
            if (this.series) {
                for (let i = 0; i < this.series.length; i++) {
                    if (thisAndroid.getSeries().indexOf(this.series.getItem(i).android) !== -1) {
                        thisAndroid.getSeries().remove(this.series.getItem(i).android);
                    }
                }
            }
            thisAndroid.setHorizontalAxis(undefined);
            thisAndroid.setVerticalAxis(undefined);
            thisAndroid.setGrid(undefined);
        }
    }
    initNativeAnnotation(index) {
        if (this.androidView) {
            this.annotations.getItem(index)._init(this);
            this.annotations.getItem(index)._createNative();
        }
    }
    // get allowZoom/allowPan from axes and init the chart behavior
    updatePanZoomBehavior() {
        if (!this._android) {
            return;
        }
        let zoomHorizontal = false;
        let zoomVertical = false;
        let panHorizontal = false;
        let panVertical = false;
        let i = 0;
        if (this.series) {
            while ((i < this.series.length) && !(panHorizontal && panVertical && zoomHorizontal && zoomVertical)) {
                if (this.series.getItem(i).horizontalAxis) {
                    panHorizontal = panHorizontal || this.series.getItem(i).horizontalAxis.allowPan;
                    zoomHorizontal = zoomHorizontal || this.series.getItem(i).horizontalAxis.allowZoom;
                }
                if (this.series.getItem(i).verticalAxis) {
                    panVertical = panVertical || this.series.getItem(i).verticalAxis.allowPan;
                    zoomVertical = zoomVertical || this.series.getItem(i).verticalAxis.allowZoom;
                }
                i++;
            }
        }
        if (this.horizontalAxis) {
            panHorizontal = panHorizontal || this.horizontalAxis.allowPan;
            zoomHorizontal = zoomHorizontal || this.horizontalAxis.allowZoom;
        }
        if (this.verticalAxis) {
            panVertical = panVertical || this.verticalAxis.allowPan;
            zoomVertical = zoomVertical || this.verticalAxis.allowZoom;
        }
        if (panHorizontal || panVertical || zoomHorizontal || zoomVertical) {
            if (!this._panZoomBehavior) {
                this._panZoomBehavior = new com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior();
                this._android._panZoomListener = new ChartPanZoomListener(this);
                this._panZoomBehavior.addPanZoomListener(this._android._panZoomListener);
            }
            if (panHorizontal || panVertical) {
                let panMode = com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.NONE;
                if (panHorizontal && panVertical) {
                    panMode = com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.BOTH;
                }
                else {
                    panMode = panHorizontal ? com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.HORIZONTAL : com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.VERTICAL;
                }
                this._panZoomBehavior.setPanMode(panMode);
            }
            if (zoomHorizontal || zoomVertical) {
                let zoomMode = com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.NONE;
                if (zoomHorizontal && zoomVertical) {
                    zoomMode = com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.BOTH;
                }
                else {
                    zoomMode = zoomHorizontal ? com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.HORIZONTAL : com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode.VERTICAL;
                }
                this._panZoomBehavior.setZoomMode(zoomMode);
            }
            this._android.getBehaviors().add(this._panZoomBehavior);
        }
        else {
            if (this._panZoomBehavior) {
                this._android.getBehaviors().remove(this._panZoomBehavior);
                this._panZoomBehavior = null;
            }
        }
    }
    _syncZoomValues() {
        if (this._android) {
            if (this.horizontalZoom || this.verticalZoom) {
                this._android.setZoom(this.horizontalZoom ? this.horizontalZoom : 1, this.verticalZoom ? this.verticalZoom : 1);
            }
        }
    }
    initSelectionBehavior() {
        if (!this._selectionBehavior) {
            this._selectionBehavior = new com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior();
            this._selectionBehavior.setDataPointsSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.NONE);
            this._selectionBehavior.setSeriesSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.NONE);
            if (this._android) {
                this._android.getBehaviors().add(this._selectionBehavior);
            }
        }
    }
    onSeriesChanged(oldValue, newValue) {
        super.onSeriesChanged(oldValue, newValue);
        if (newValue) {
            this.updatePanZoomBehavior();
            this._syncZoomValues();
        }
    }
    onSeriesSelectionModeChanged(oldValue, newValue) {
        this.initSelectionBehavior();
        if (newValue === publicEnumModule.ChartSelectionMode.None) {
            this._selectionBehavior.setSeriesSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.NONE);
        }
        if (newValue === publicEnumModule.ChartSelectionMode.Single) {
            this._selectionBehavior.setSeriesSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.SINGLE);
        }
        if (newValue === publicEnumModule.ChartSelectionMode.Multiple) {
            this._selectionBehavior.setSeriesSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.MULTIPLE);
        }
    }
    onPointSelectionModeChanged(oldValue, newValue) {
        this.initSelectionBehavior();
        if (newValue === publicEnumModule.ChartSelectionMode.None) {
            this._selectionBehavior.setDataPointsSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.NONE);
        }
        if (newValue === publicEnumModule.ChartSelectionMode.Single) {
            this._selectionBehavior.setDataPointsSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.SINGLE);
        }
        if (newValue === publicEnumModule.ChartSelectionMode.Multiple) {
            this._selectionBehavior.setDataPointsSelectionMode(com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.MULTIPLE);
        }
    }
    onHorizontalAxisChanged(oldValue, newValue) {
        super.onHorizontalAxisChanged(oldValue, newValue);
        if (oldValue) {
            this._removeView(oldValue);
        }
        if (newValue) {
            this._addView(newValue);
        }
    }
    [commonModule.RadCartesianChart.horizontalAxisProperty.setNative](value) {
        this._android.setHorizontalAxis(null);
        this._android.setHorizontalAxis(value.android);
        this.updatePanZoomBehavior();
    }
    onVerticalAxisChanged(oldValue, newValue) {
        super.onVerticalAxisChanged(oldValue, newValue);
        if (oldValue) {
            this._removeView(oldValue);
        }
        if (newValue) {
            this._addView(newValue);
        }
    }
    [commonModule.RadCartesianChart.verticalAxisProperty.setNative](value) {
        this._android.setVerticalAxis(null);
        this._android.setVerticalAxis(value.android);
        this.updatePanZoomBehavior();
    }
    onGridChanged(oldValue, newValue) {
        if (this._android && newValue) {
            this._android.setGrid(null);
            this._android.setGrid(newValue._android);
        }
    }
    onAnnotationsChanged(oldValue, newValue) {
        super.onAnnotationsChanged(oldValue, newValue);
        if (newValue) {
            let newArray = newValue;
            for (let i = 0; i < newArray.length; i++) {
                newArray.getItem(i)._init(this);
            }
        }
    }
    onHorizontalZoomChanged(oldValue, newValue) {
        if (!this._android) {
            return;
        }
        if (newValue !== oldValue) {
            this._syncZoomValues();
        }
        else {
            console.log("WARNING: Vertical zoom must be a number greater or equal to 1");
        }
    }
    onVerticalZoomChanged(oldValue, newValue) {
        if (!this._android) {
            return;
        }
        if (newValue !== oldValue) {
            this._syncZoomValues();
        }
        else {
            console.log("WARNING: Vertical zoom must be a number greater or equal to 1");
        }
    }
    onTrackballChanged(oldValue, newValue) {
        super.onTrackballChanged(oldValue, newValue);
        if (!this._android) {
            return;
        }
        this.removeTrackball(oldValue, newValue);
        if (newValue && (newValue instanceof trackBallCommonModule.Trackball)) {
            newValue.android = new com.telerik.widget.chart.visualization.behaviors.ChartTrackBallBehavior(this._context);
            this._android.getBehaviors().add(newValue.android);
        }
    }
    removeTrackball(oldValue, newValue) {
        if (oldValue && this._android.getBehaviors().indexOf(oldValue.android) !== -1) {
            this._android.getBehaviors().remove(oldValue.android);
        }
    }
    setNativeTrackballBehavior(trackball) {
        if (!trackball) {
            return;
        }
        trackball.android = new com.telerik.widget.chart.visualization.behaviors.ChartTrackBallBehavior(this._context);
        this._android.getBehaviors().add(trackball.android);
    }
}
//# sourceMappingURL=ui-chart.android.js.map