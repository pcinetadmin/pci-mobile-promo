import { CSSType, Property, Color } from "@nativescript/core";
import * as seriesCommonModule from "./chart-series.common";
import * as initializersImpl from "../../initializers/chart-initializers";
import * as commonModule from "../../ui-chart.common";
export class PieSeries extends seriesCommonModule.PieSeries {
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    [seriesCommonModule.PieSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class DonutSeries extends seriesCommonModule.DonutSeries {
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    updateOwnerChart() {
        if (this.owner && (this.owner instanceof commonModule.RadPieChart)) {
            this.owner.updateChart();
        }
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.DonutSeriesValueMapper();
        }
        return this._initializer;
    }
    onInnerRadiusFactorChanged(oldValue, newValue) {
        this.initializer.onInnerRadiusFactorChanged(oldValue, newValue, this);
    }
    [seriesCommonModule.DonutSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
////////////////////////////////////////////////////////////////////////
// BarSeries
////////////////////////////////////////////////////////////////////////
export class BarSeries extends seriesCommonModule.BarSeries {
    constructor() {
        super();
    }
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    [seriesCommonModule.BarSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
    updateNative() {
        this.initializer.updateNative(this);
    }
}
////////////////////////////////////////////////////////////////////////
// RangeBarSeries
////////////////////////////////////////////////////////////////////////
export class RangeBarSeries extends seriesCommonModule.RangeBarSeries {
    constructor() {
        super();
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.RangeBarSeriesValueMapper();
        }
        return this._initializer;
    }
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    updateNative() {
        this.initializer.updateNative(this);
    }
    [seriesCommonModule.RangeBarSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
    onHighPropertyNameChanged(oldValue, newValue) {
        this.initializer.onHighPropertyNameChanged(oldValue, newValue, this);
    }
    onLowPropertyNameChanged(oldValue, newValue) {
        this.initializer.onLowPropertyNameChanged(oldValue, newValue, this);
    }
    onValuePropertyChanged(oldValue, newValue) {
        console.log("WARNING: Range bar series doesn't use valueProperty property.");
    }
}
////////////////////////////////////////////////////////////////////////
// LineSeries
////////////////////////////////////////////////////////////////////////
let LineSeries = class LineSeries extends seriesCommonModule.CategoricalSeries {
    constructor() {
        super();
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.LineSeriesValueMapper();
        }
        return this._initializer;
    }
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    [seriesCommonModule.CategoricalSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
LineSeries = __decorate([
    CSSType("LineSeries"),
    __metadata("design:paramtypes", [])
], LineSeries);
export { LineSeries };
let SplineSeries = class SplineSeries extends LineSeries {
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.SplineSeriesValueMapper();
        }
        return this._initializer;
    }
    [LineSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
SplineSeries = __decorate([
    CSSType("SplineSeries")
], SplineSeries);
export { SplineSeries };
let AreaSeries = class AreaSeries extends LineSeries {
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.AreaSeriesValueMapper();
        }
        return this._initializer;
    }
    [LineSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
AreaSeries = __decorate([
    CSSType("AreaSeries")
], AreaSeries);
export { AreaSeries };
let SplineAreaSeries = class SplineAreaSeries extends AreaSeries {
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.SplineAreaSeriesValueMapper();
        }
        return this._initializer;
    }
    [LineSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
SplineAreaSeries = __decorate([
    CSSType("SplineAreaSeries")
], SplineAreaSeries);
export { SplineAreaSeries };
export class BubbleSeries extends seriesCommonModule.BubbleSeries {
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.BubbleSeriesValueMapper();
        }
        return this._initializer;
    }
    onBubbleScaleChanged(oldValue, newValue) {
        this.initializer.onBubbleScalePropertyChanged(oldValue, newValue, this);
    }
    onBubbleSizePropertyChanged(oldValue, newValue) {
        this.initializer.onBubbleSizePropertyChanged(oldValue, newValue, this);
    }
    [seriesCommonModule.BubbleSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class ScatterSeries extends seriesCommonModule.ScatterSeries {
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    [seriesCommonModule.ScatterSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class ScatterBubbleSeries extends seriesCommonModule.ScatterBubbleSeries {
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    [seriesCommonModule.ScatterBubbleSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class OhlcSeries extends seriesCommonModule.OhlcSeries {
    get ios() {
        return this._series;
    }
    set ios(value) {
        this._series = value;
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.OhlcSeriesValueMapper();
        }
        return this._initializer;
    }
    [seriesCommonModule.OhlcSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
    onHighPropertyNameChanged(oldValue, newValue) {
        this.initializer.onHighPropertyNameChanged(oldValue, newValue, this);
    }
    onLowPropertyNameChanged(oldValue, newValue) {
        this.initializer.onLowPropertyNameChanged(oldValue, newValue, this);
    }
    onOpenPropertyNameChanged(oldValue, newValue) {
        this.initializer.onOpenPropertyNameChanged(oldValue, newValue, this);
    }
    onClosePropertyNameChanged(oldValue, newValue) {
        this.initializer.onClosePropertyNameChanged(oldValue, newValue, this);
    }
    onValuePropertyChanged(oldValue, newValue) {
        console.log("WARNING: OHLC series doesn't use valueProperty property.");
    }
}
let CandlestickSeries = class CandlestickSeries extends OhlcSeries {
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    onFillColorsPropertyChanged(oldValue, newValue) {
        this.onFillColorsChanged(oldValue, newValue);
    }
    onFillColorsChanged(oldValue, newValue) {
        this.initializer.onFillColorsChanged(oldValue, newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.CandlestickSeriesValueMapper();
        }
        return this._initializer;
    }
    [OhlcSeries.legendTitleProperty.setNative](newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
CandlestickSeries.fillColorsProperty = new Property({
    name: "fillColors",
    defaultValue: undefined,
    valueConverter: v => v.split(",").map(v1 => new Color(v1)),
    valueChanged: (target, oldValue, newValue) => {
        target.onFillColorsPropertyChanged(oldValue, newValue);
    },
});
CandlestickSeries = __decorate([
    CSSType("CandlestickSeries")
], CandlestickSeries);
export { CandlestickSeries };
CandlestickSeries.fillColorsProperty.register(CandlestickSeries);
//# sourceMappingURL=chart-series.ios.js.map