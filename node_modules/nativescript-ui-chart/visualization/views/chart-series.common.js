import { Observable, ObservableArray, removeWeakEventListener, addWeakEventListener, View, Property, booleanConverter, CSSType, Font, Color } from "@nativescript/core";
import * as initializersImpl from "../../initializers/chart-initializers";
import { ChartSeriesSelectionMode, ChartSeriesStackMode, ChartSeriesPaletteMode, toPascalCase } from "../../misc/chart-public-enum";
import { PointLabelStyle } from "../parts/chart-label-style.common";
import { trimQuotes } from "./chart-axis.common";
import { setupCssScope } from "../../ui-chart.common";
export class ChartSeries extends View {
    constructor() {
        super();
    }
    initNativeView() {
    }
    eachChild(callback) {
        if (this._label) {
            callback(this._label);
        }
    }
    onLoaded() {
        if (!this._label) {
            const label = new ChartSeriesLabel();
            this._label = label;
            setupCssScope(this.owner, this._label);
            this._addView(this._label);
        }
        if (!this.labelStyle) {
            this.labelStyle = new PointLabelStyle();
        }
        super.onLoaded();
        this._labelPropertyChangeHandler = this._labelPropertyChangeHandler || ((args) => {
            this.applyLabelPropertyFromStyle(args.propertyName);
        });
        this.attachLabelChangeListeners();
        this.applyLabelPropertyFromStyle();
    }
    get label() {
        return this._label;
    }
    updateLabelColorFromStyle() {
        const labelTextColor = this._label.style.color;
        if (labelTextColor !== undefined) {
            this.labelStyle.textColor = labelTextColor;
        }
    }
    updateLabelFontFromStyle() {
        const fontInternal = this._label.style.fontInternal;
        if (fontInternal && fontInternal !== Font.default) {
            this.initializer.onFontInternalChanged(null, fontInternal, this);
        }
    }
    updateLabelMarginFromStyle() {
        const labelMargin = this._label.style.marginLeft;
        if (labelMargin !== undefined && !isNaN(+labelMargin)) {
            this.labelStyle.margin = +labelMargin;
        }
    }
    updateLabelFillColorFromStyle() {
        const labelFillColor = this._label.style.backgroundColor;
        if (labelFillColor !== undefined) {
            this.labelStyle.fillColor = labelFillColor;
        }
    }
    updateLabelStrokeWidthFromStyle() {
        const labelStrokeWidth = this._label.style.borderLeftWidth;
        if (labelStrokeWidth !== undefined && !isNaN(+labelStrokeWidth)) {
            this.labelStyle.strokeWidth = +labelStrokeWidth;
        }
    }
    updateLabelStrokeColorFromStyle() {
        const labelStrokeColor = this._label.style.borderLeftColor;
        if (labelStrokeColor !== undefined) {
            this.labelStyle.strokeColor = labelStrokeColor;
        }
    }
    updateLabelFormatFromStyle() {
        const labelFormat = this._label.format;
        if (labelFormat !== undefined) {
            this.labelStyle.textFormat = labelFormat;
        }
    }
    updateLabelPaddingFromStyle(propertyName) {
        this.initializer.onLabelPaddingChanged(null, propertyName, this);
    }
    applyLabelPropertyFromStyle(propertyName) {
        if (!propertyName || propertyName === "color") {
            this.updateLabelColorFromStyle();
        }
        if (!propertyName || propertyName === "fontInternal") {
            this.updateLabelFontFromStyle();
        }
        if (!propertyName || propertyName === "backgroundColor") {
            this.updateLabelFillColorFromStyle();
        }
        if (!propertyName || propertyName === "borderLeftWidth") {
            this.updateLabelStrokeWidthFromStyle();
        }
        if (!propertyName || propertyName === "borderLeftColor") {
            this.updateLabelStrokeColorFromStyle();
        }
        if (!propertyName || propertyName === "marginLeft") {
            this.updateLabelMarginFromStyle();
        }
        if (!propertyName || propertyName === "format") {
            this.updateLabelFormatFromStyle();
        }
        if (!propertyName || propertyName.startsWith("padding")) {
            this.updateLabelPaddingFromStyle(propertyName);
        }
        this.initializer.onLabelStyleChanged(null, this.labelStyle, this);
    }
    attachLabelChangeListeners() {
        this.label.style.on("colorChange", this._labelPropertyChangeHandler);
        this.label.style.on("fontInternalChange", this._labelPropertyChangeHandler);
        this.label.style.on("paddingLeftChange", this._labelPropertyChangeHandler);
        this.label.style.on("paddingTopChange", this._labelPropertyChangeHandler);
        this.label.style.on("paddingRightChange", this._labelPropertyChangeHandler);
        this.label.style.on("paddingBottomChange", this._labelPropertyChangeHandler);
        this.label.style.on("backgroundColorChange", this._labelPropertyChangeHandler);
        this.label.style.on("borderLeftWidthChange", this._labelPropertyChangeHandler);
        this.label.style.on("borderLeftColorChange", this._labelPropertyChangeHandler);
        this.label.style.on("marginLeftChange", this._labelPropertyChangeHandler);
        this.label.on("formatChange", this._labelPropertyChangeHandler);
    }
    detachLabelChangeListeners() {
        this.label.style.off("colorChange", this._labelPropertyChangeHandler);
        this.label.style.off("fontInternalChange", this._labelPropertyChangeHandler);
        this.label.style.off("paddingLeftChange", this._labelPropertyChangeHandler);
        this.label.style.off("paddingTopChange", this._labelPropertyChangeHandler);
        this.label.style.off("paddingRightChange", this._labelPropertyChangeHandler);
        this.label.style.off("paddingBottomChange", this._labelPropertyChangeHandler);
        this.label.style.off("backgroundColorChange", this._labelPropertyChangeHandler);
        this.label.style.off("borderLeftWidthChange", this._labelPropertyChangeHandler);
        this.label.style.off("borderLeftColorChange", this._labelPropertyChangeHandler);
        this.label.style.off("marginLeftChange", this._labelPropertyChangeHandler);
        this.label.off("formatChange", this._labelPropertyChangeHandler);
    }
    onUnloaded() {
        super.onUnloaded();
        this.detachLabelChangeListeners();
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.ChartSeriesValueMapper();
        }
        return this._initializer;
    }
    get owner() {
        return null;
    }
    set owner(value) {
    }
    updateOwnerChart() {
        if (this.owner) {
            this.owner.updateChart();
        }
    }
    get android() {
        return undefined;
    }
    get ios() {
        return undefined;
    }
    set ios(value) {
    }
    onLegendTitlePropertyChanged(oldValue, newValue) {
        this.onLegendTitleChanged(oldValue, newValue);
    }
    onItemsPropertyChanged(oldValue, newValue) {
        this.onItemsChanged(oldValue, newValue);
    }
    onValuePropertyPropertyChanged(oldValue, newValue) {
        this.onValuePropertyChanged(oldValue, newValue);
    }
    onShowLabelsPropertyChanged(oldValue, newValue) {
        this.onShowLabelsChanged(oldValue, newValue);
    }
    onLabelStylePropertyChanged(oldValue, newValue) {
        this.onLabelStyleChanged(oldValue, newValue);
    }
    onSelectionModePropertyChanged(oldValue, newValue) {
        this.onSelectionModeChanged(oldValue, newValue);
    }
    onSelectionModeChanged(oldValue, newValue) {
        this.initializer.onSelectionModeChanged(oldValue, newValue, this);
    }
    onLabelStyleChanged(oldValue, newValue) {
        this.initializer.onLabelStyleChanged(oldValue, newValue, this);
    }
    onShowLabelsChanged(oldValue, newValue) {
        this.initializer.onShowLabelsChanged(oldValue, newValue, this);
    }
    onLegendTitleChanged(oldValue, newValue) {
    }
    onItemsChanged(oldValue, newValue) {
        this.initializer.onItemsChanged(oldValue, newValue, this);
        if (oldValue instanceof Observable) {
            removeWeakEventListener(oldValue, ObservableArray.changeEvent, this.ItemsCollectionChangedInternal, this);
        }
        if (newValue instanceof Observable) {
            addWeakEventListener(newValue, ObservableArray.changeEvent, this.ItemsCollectionChangedInternal, this);
        }
    }
    ItemsCollectionChangedInternal(data) {
        this.initializer.onItemsChanged(null, null, this);
    }
    getItemAtIndex(index) {
        if (this.items.getItem) {
            return this.items.getItem(index);
        }
        return this.items[index];
    }
    onValuePropertyChanged(oldValue, newValue) {
        this.initializer.onValuePropertyChanged(oldValue, newValue, this);
    }
}
ChartSeries.selectionModeProperty = new Property({
    name: "selectionMode",
    defaultValue: ChartSeriesSelectionMode.NotSet,
    valueConverter: (value) => ChartSeriesSelectionMode[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onSelectionModePropertyChanged(oldValue, newValue);
    },
});
ChartSeries.labelStyleProperty = new Property({
    name: "labelStyle",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onLabelStylePropertyChanged(oldValue, newValue);
    },
});
ChartSeries.showLabelsProperty = new Property({
    name: "showLabels",
    defaultValue: false,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onShowLabelsPropertyChanged(oldValue, newValue);
    },
});
ChartSeries.legendTitleProperty = new Property({
    name: "legendTitle",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onLegendTitlePropertyChanged(oldValue, newValue);
    },
});
ChartSeries.valuePropertyProperty = new Property({
    name: "valueProperty",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onValuePropertyPropertyChanged(oldValue, newValue);
    },
});
ChartSeries.itemsProperty = new Property({
    name: "items",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onItemsPropertyChanged(oldValue, newValue);
    },
});
ChartSeries.selectionModeProperty.register(ChartSeries);
ChartSeries.labelStyleProperty.register(ChartSeries);
ChartSeries.showLabelsProperty.register(ChartSeries);
ChartSeries.legendTitleProperty.register(ChartSeries);
ChartSeries.valuePropertyProperty.register(ChartSeries);
ChartSeries.itemsProperty.register(ChartSeries);
export class CartesianSeries extends ChartSeries {
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
        if (this.horizontalAxis) {
            this.horizontalAxis.owner = value;
        }
        if (this.verticalAxis) {
            this.verticalAxis.owner = value;
        }
    }
    eachChild(callback) {
        super.eachChild(callback);
        if (this.horizontalAxis) {
            callback(this.horizontalAxis);
        }
        if (this.verticalAxis) {
            callback(this.verticalAxis);
        }
    }
    onFillColorPropertyChanged(oldValue, newValue) {
        this.onFillColorChanged(oldValue, newValue);
    }
    onStrokeWidthPropertyChanged(oldValue, newValue) {
        this.onStrokeWidthChanged(oldValue, newValue);
    }
    onStrokeColorPropertyChanged(oldValue, newValue) {
        this.onStrokeColorChanged(oldValue, newValue);
    }
    onFillColorChanged(oldValue, newValue) {
        this.initializer.onFillColorChanged(oldValue, newValue, this);
    }
    onStrokeWidthChanged(oldValue, newValue) {
        this.initializer.onStrokeWidthChanged(oldValue, newValue, this);
    }
    onStrokeColorChanged(oldValue, newValue) {
        this.initializer.onStrokeColorChanged(oldValue, newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.CartesianSeriesValueMapper();
        }
        return this._initializer;
    }
    onHorizontalAxisPropertyChanged(oldValue, newValue) {
        if (oldValue) {
            this._removeView(oldValue);
        }
        if (newValue) {
            this._addView(newValue);
            if (this.owner) {
                newValue.owner = this.owner;
            }
        }
        this.onHorizontalAxisChanged(oldValue, newValue);
    }
    onVerticalAxisPropertyChanged(oldValue, newValue) {
        if (oldValue) {
            this._removeView(oldValue);
        }
        if (newValue) {
            this._addView(newValue);
            if (this.owner) {
                newValue.owner = this.owner;
            }
        }
        this.onVerticalAxisChanged(oldValue, newValue);
    }
    onHorizontalAxisChanged(oldValue, newValue) {
        this.updateAxisBindingContext(oldValue, newValue);
        this.initializer.onHorizontalAxisChanged(oldValue, newValue, this);
    }
    onVerticalAxisChanged(oldValue, newValue) {
        this.updateAxisBindingContext(oldValue, newValue);
        this.initializer.onVerticalAxisChanged(oldValue, newValue, this);
    }
    onPaletteModeChanged(oldValue, newValue) {
        this.initializer.onPaletteModeChanged(oldValue, newValue, this);
    }
    updateAxisBindingContext(oldValue, newValue) {
        if (newValue) {
            newValue.bindingContext = this.bindingContext;
        }
        else {
            if (oldValue) {
                oldValue.bindingContext = null;
            }
        }
    }
}
CartesianSeries.horizontalAxisProperty = new Property({
    name: "horizontalAxis",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onHorizontalAxisPropertyChanged(oldValue, newValue);
    },
});
CartesianSeries.verticalAxisProperty = new Property({
    name: "verticalAxis",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onVerticalAxisPropertyChanged(oldValue, newValue);
    },
});
CartesianSeries.paletteModeProperty = new Property({
    name: 'paletteMode',
    defaultValue: undefined,
    valueConverter: (value) => ChartSeriesPaletteMode[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onPaletteModeChanged(oldValue, newValue);
    }
});
CartesianSeries.fillColorProperty = new Property({
    name: "fillColor",
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: (v) => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onFillColorPropertyChanged(oldValue, newValue);
    },
});
CartesianSeries.strokeWidthProperty = new Property({
    name: "strokeWidth",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeWidthPropertyChanged(oldValue, newValue);
    },
});
CartesianSeries.strokeColorProperty = new Property({
    name: "strokeColor",
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: (v) => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeColorPropertyChanged(oldValue, newValue);
    },
});
CartesianSeries.horizontalAxisProperty.register(CartesianSeries);
CartesianSeries.verticalAxisProperty.register(CartesianSeries);
CartesianSeries.paletteModeProperty.register(CartesianSeries);
CartesianSeries.fillColorProperty.register(CartesianSeries);
CartesianSeries.strokeWidthProperty.register(CartesianSeries);
CartesianSeries.strokeColorProperty.register(CartesianSeries);
export class CategoricalSeries extends CartesianSeries {
    onStackModePropertyChanged(oldValue, newValue) {
        this.onStackModeChanged(oldValue, newValue);
    }
    onCategoryPropertyChanged(oldValue, newValue) {
        this.onCategoryChanged(oldValue, newValue);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.CategoricalSeriesValueMapper();
        }
        return this._initializer;
    }
    onStackModeChanged(oldValue, newValue) {
        this.initializer.onStackModePropertyChanged(oldValue, newValue, this);
    }
    onCategoryChanged(oldValue, newValue) {
        this.initializer.onCategoryPropertyChanged(oldValue, newValue, this);
    }
}
CategoricalSeries.categoryPropertyProperty = new Property({
    name: "categoryProperty",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onCategoryPropertyChanged(oldValue, newValue);
    },
});
CategoricalSeries.stackModeProperty = new Property({
    name: "stackMode",
    defaultValue: ChartSeriesStackMode.None,
    valueConverter: (value) => ChartSeriesStackMode[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onStackModePropertyChanged(oldValue, newValue);
    },
});
CategoricalSeries.categoryPropertyProperty.register(CategoricalSeries);
CategoricalSeries.stackModeProperty.register(CategoricalSeries);
let BarSeries = class BarSeries extends CategoricalSeries {
    onMinBarSizeChanged(oldValue, newValue) {
        this.initializer.onMinBarSizeChanged(oldValue, newValue, this);
    }
    onMaxBarSizeChanged(oldValue, newValue) {
        this.initializer.onMaxBarSizeChanged(oldValue, newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.BarSeriesValueMapper();
        }
        return this._initializer;
    }
};
BarSeries.minBarSizeProperty = new Property({
    name: 'minBarSize',
    defaultValue: 0,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onMinBarSizeChanged(oldValue, newValue);
    }
});
BarSeries.maxBarSizeProperty = new Property({
    name: 'maxBarSize',
    defaultValue: 0,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onMaxBarSizeChanged(oldValue, newValue);
    }
});
BarSeries = __decorate([
    CSSType("BarSeries")
], BarSeries);
export { BarSeries };
BarSeries.minBarSizeProperty.register(BarSeries);
BarSeries.maxBarSizeProperty.register(BarSeries);
let RangeBarSeries = class RangeBarSeries extends CategoricalSeries {
    onHighPropertyNamePropertyChanged(oldValue, newValue) {
        this.onHighPropertyNameChanged(oldValue, newValue);
    }
    onLowPropertyNamePropertyChanged(oldValue, newValue) {
        this.onLowPropertyNameChanged(oldValue, newValue);
    }
    onLowPropertyNameChanged(oldValue, newValue) {
    }
    onHighPropertyNameChanged(oldValue, newValue) {
    }
};
RangeBarSeries.highPropertyNameProperty = new Property({
    name: "highPropertyName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onHighPropertyNamePropertyChanged(oldValue, newValue);
    },
});
RangeBarSeries.lowPropertyNameProperty = new Property({
    name: "lowPropertyName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onLowPropertyNamePropertyChanged(oldValue, newValue);
    },
});
RangeBarSeries = __decorate([
    CSSType("RangeBarSeries")
], RangeBarSeries);
export { RangeBarSeries };
RangeBarSeries.highPropertyNameProperty.register(RangeBarSeries);
RangeBarSeries.lowPropertyNameProperty.register(RangeBarSeries);
let OhlcSeries = class OhlcSeries extends CategoricalSeries {
    onOpenPropertyNamePropertyChanged(oldValue, newValue) {
        this.onOpenPropertyNameChanged(oldValue, newValue);
    }
    onClosePropertyNamePropertyChanged(oldValue, newValue) {
        this.onClosePropertyNameChanged(oldValue, newValue);
    }
    onHighPropertyNamePropertyChanged(oldValue, newValue) {
        this.onHighPropertyNameChanged(oldValue, newValue);
    }
    onLowPropertyNamePropertyChanged(oldValue, newValue) {
        this.onLowPropertyNameChanged(oldValue, newValue);
    }
    onStrokeColorsPropertyChanged(oldValue, newValue) {
        this.onStrokeColorsChanged(oldValue, newValue);
    }
    onLowPropertyNameChanged(oldValue, newValue) {
    }
    onHighPropertyNameChanged(oldValue, newValue) {
    }
    onClosePropertyNameChanged(oldValue, newValue) {
    }
    onOpenPropertyNameChanged(oldValue, newValue) {
    }
    onStrokeColorsChanged(oldValue, newValue) {
        this.initializer.onStrokeColorsChanged(oldValue, newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.OhlcSeriesValueMapper();
        }
        return this._initializer;
    }
};
OhlcSeries.openPropertyNameProperty = new Property({
    name: "openPropertyName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onOpenPropertyNamePropertyChanged(oldValue, newValue);
    },
});
OhlcSeries.closePropertyNameProperty = new Property({
    name: "closePropertyName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onClosePropertyNamePropertyChanged(oldValue, newValue);
    },
});
OhlcSeries.highPropertyNameProperty = new Property({
    name: "highPropertyName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onHighPropertyNamePropertyChanged(oldValue, newValue);
    },
});
OhlcSeries.lowPropertyNameProperty = new Property({
    name: "lowPropertyName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onLowPropertyNamePropertyChanged(oldValue, newValue);
    },
});
OhlcSeries.strokeColorsProperty = new Property({
    name: "strokeColors",
    defaultValue: undefined,
    valueConverter: v => v.split(",").map(v1 => new Color(v1)),
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeColorsPropertyChanged(oldValue, newValue);
    },
});
OhlcSeries = __decorate([
    CSSType("OhlcSeries")
], OhlcSeries);
export { OhlcSeries };
OhlcSeries.openPropertyNameProperty.register(OhlcSeries);
OhlcSeries.closePropertyNameProperty.register(OhlcSeries);
OhlcSeries.highPropertyNameProperty.register(OhlcSeries);
OhlcSeries.lowPropertyNameProperty.register(OhlcSeries);
OhlcSeries.strokeColorsProperty.register(OhlcSeries);
let CandlestickSeries = class CandlestickSeries extends OhlcSeries {
};
CandlestickSeries = __decorate([
    CSSType("CandlestickSeries")
], CandlestickSeries);
export { CandlestickSeries };
let BubbleSeries = class BubbleSeries extends CategoricalSeries {
    onBubbleScalePropertyChanged(oldValue, newValue) {
        this.onBubbleScaleChanged(oldValue, newValue);
    }
    onBubbleScaleChanged(oldValue, newValue) {
    }
    onBubbleSizePropertyPropertyChanged(oldValue, newValue) {
        this.onBubbleSizePropertyChanged(oldValue, newValue);
    }
    onBubbleSizePropertyChanged(oldValue, newValue) {
    }
};
BubbleSeries.bubbleScaleProperty = new Property({
    name: "bubbleScale",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onBubbleScalePropertyChanged(oldValue, newValue);
    },
});
BubbleSeries.bubbleSizePropertyProperty = new Property({
    name: "bubbleSizeProperty",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onBubbleSizePropertyPropertyChanged(oldValue, newValue);
    },
});
BubbleSeries = __decorate([
    CSSType("BubbleSeries")
], BubbleSeries);
export { BubbleSeries };
BubbleSeries.bubbleScaleProperty.register(BubbleSeries);
BubbleSeries.bubbleSizePropertyProperty.register(BubbleSeries);
let PieSeries = class PieSeries extends ChartSeries {
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.PieSeriesValueMapper();
        }
        return this._initializer;
    }
    get android() {
        return undefined;
    }
    get ios() {
        return undefined;
    }
    set ios(value) {
    }
    onFillColorsPropertyChanged(oldValue, newValue) {
        this.onFillColorsChanged(oldValue, newValue);
    }
    onStrokeWidthPropertyChanged(oldValue, newValue) {
        this.onStrokeWidthChanged(oldValue, newValue);
    }
    onStrokeColorsPropertyChanged(oldValue, newValue) {
        this.onStrokeColorsChanged(oldValue, newValue);
    }
    onFillColorsChanged(oldValue, newValue) {
        this.initializer.onFillColorsChanged(oldValue, newValue, this);
    }
    onStrokeWidthChanged(oldValue, newValue) {
        this.initializer.onStrokeWidthChanged(oldValue, newValue, this);
    }
    onStrokeColorsChanged(oldValue, newValue) {
        this.initializer.onStrokeColorsChanged(oldValue, newValue, this);
    }
    onLegendLabelPropertyChanged(oldValue, newValue) {
        this.onLegendLabelChanged(oldValue, newValue);
    }
    onExpandRadiusPropertyChanged(oldValue, newValue) {
        this.onExpandRadiusChanged(oldValue, newValue);
    }
    onOuterRadiusFactorPropertyChanged(oldValue, newValue) {
        this.onOuterRadiusFactorChanged(oldValue, newValue);
    }
    onStartAnglePropertyChanged(oldValue, newValue) {
        this.onStartAngleChanged(oldValue, newValue);
    }
    onEndAnglePropertyChanged(oldValue, newValue) {
        this.onEndAngleChanged(oldValue, newValue);
    }
    onShowPercentagePropertyChanged(oldValue, newValue) {
        this.onShowPercentageChanged(oldValue, newValue);
    }
    onLegendLabelChanged(oldValue, newValue) {
        this.initializer.onLabelPropertyChanged(oldValue, newValue, this);
    }
    onExpandRadiusChanged(oldValue, newValue) {
        this.initializer.onExpandRadiusChanged(oldValue, newValue, this);
    }
    onOuterRadiusFactorChanged(oldValue, newValue) {
        this.initializer.onOuterRadiusFactorChanged(oldValue, newValue, this);
    }
    onStartAngleChanged(oldValue, newValue) {
        this.initializer.onStartAngleChanged(oldValue, newValue, this);
    }
    onEndAngleChanged(oldValue, newValue) {
        this.initializer.onEndAngleChanged(oldValue, newValue, this);
    }
    onShowPercentageChanged(oldValue, newValue) {
        this.initializer.onShowPercentageChanged(oldValue, newValue, this);
    }
};
PieSeries.legendLabelProperty = new Property({
    name: "legendLabel",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onLegendLabelPropertyChanged(oldValue, newValue);
    },
});
PieSeries.expandRadiusProperty = new Property({
    name: "expandRadius",
    defaultValue: undefined,
    valueConverter: (v) => parseFloat(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onExpandRadiusPropertyChanged(oldValue, newValue);
    },
});
PieSeries.outerRadiusFactorProperty = new Property({
    name: "outerRadiusFactor",
    defaultValue: undefined,
    valueConverter: (v) => parseFloat(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onOuterRadiusFactorPropertyChanged(oldValue, newValue);
    },
});
PieSeries.startAngleProperty = new Property({
    name: "startAngle",
    defaultValue: undefined,
    valueConverter: (v) => parseFloat(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onStartAnglePropertyChanged(oldValue, newValue);
    },
});
PieSeries.endAngleProperty = new Property({
    name: "endAngle",
    defaultValue: undefined,
    valueConverter: (v) => parseFloat(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onEndAnglePropertyChanged(oldValue, newValue);
    },
});
PieSeries.showPercentageProperty = new Property({
    name: "showPercentage",
    defaultValue: undefined,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onShowPercentagePropertyChanged(oldValue, newValue);
    },
});
PieSeries.fillColorsProperty = new Property({
    name: "fillColors",
    defaultValue: undefined,
    valueConverter: v => v.split(",").map(v1 => new Color(v1)),
    valueChanged: (target, oldValue, newValue) => {
        target.onFillColorsPropertyChanged(oldValue, newValue);
    },
});
PieSeries.strokeWidthProperty = new Property({
    name: "strokeWidth",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeWidthPropertyChanged(oldValue, newValue);
    },
});
PieSeries.strokeColorsProperty = new Property({
    name: "strokeColors",
    defaultValue: undefined,
    valueConverter: v => v.split(",").map(v1 => new Color(v1)),
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeColorsPropertyChanged(oldValue, newValue);
    },
});
PieSeries = __decorate([
    CSSType("PieSeries")
], PieSeries);
export { PieSeries };
PieSeries.legendLabelProperty.register(PieSeries);
PieSeries.expandRadiusProperty.register(PieSeries);
PieSeries.outerRadiusFactorProperty.register(PieSeries);
PieSeries.startAngleProperty.register(PieSeries);
PieSeries.endAngleProperty.register(PieSeries);
PieSeries.showPercentageProperty.register(PieSeries);
PieSeries.fillColorsProperty.register(PieSeries);
PieSeries.strokeWidthProperty.register(PieSeries);
PieSeries.strokeColorsProperty.register(PieSeries);
let DonutSeries = class DonutSeries extends PieSeries {
    onInnerRadiusFactorPropertyChanged(oldValue, newValue) {
        this.onInnerRadiusFactorChanged(oldValue, newValue);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.DonutSeriesValueMapper();
        }
        return this._initializer;
    }
    onInnerRadiusFactorChanged(oldValue, newValue) {
        this.initializer.onInnerRadiusFactorChanged(oldValue, newValue, this);
    }
};
DonutSeries.innerRadiusFactorProperty = new Property({
    name: "innerRadiusFactor",
    defaultValue: undefined,
    valueConverter: (v) => parseFloat(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onInnerRadiusFactorPropertyChanged(oldValue, newValue);
    },
});
DonutSeries = __decorate([
    CSSType("DonutSeries")
], DonutSeries);
export { DonutSeries };
DonutSeries.innerRadiusFactorProperty.register(DonutSeries);
let ScatterSeries = class ScatterSeries extends CartesianSeries {
    onXPropertyPropertyChanged(oldValue, newValue) {
        this.onXPropertyChanged(oldValue, newValue);
    }
    onYPropertyPropertyChanged(oldValue, newValue) {
        this.onYPropertyChanged(oldValue, newValue);
    }
    onXPropertyChanged(oldValue, newValue) {
        this.initializer.onXPropertyChanged(oldValue, newValue, this);
    }
    onYPropertyChanged(oldValue, newValue) {
        this.initializer.onYPropertyChanged(oldValue, newValue, this);
    }
    onValuePropertyChanged(oldValue, newValue) {
        console.log("WARNING: ValueProperty is not used for Scatter this. Use XProperty & YProperty instead.");
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.ScatterSeriesValueMapper();
        }
        return this._initializer;
    }
};
ScatterSeries.xPropertyProperty = new Property({
    name: "xProperty",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onXPropertyPropertyChanged(oldValue, newValue);
    },
});
ScatterSeries.yPropertyProperty = new Property({
    name: "yProperty",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onYPropertyPropertyChanged(oldValue, newValue);
    },
});
ScatterSeries = __decorate([
    CSSType("ScatterSeries")
], ScatterSeries);
export { ScatterSeries };
ScatterSeries.xPropertyProperty.register(ScatterSeries);
ScatterSeries.yPropertyProperty.register(ScatterSeries);
let ScatterBubbleSeries = class ScatterBubbleSeries extends ScatterSeries {
    onBubbleScalePropertyChanged(oldValue, newValue) {
        this.onBubbleScaleChanged(oldValue, newValue);
    }
    onBubbleScaleChanged(oldValue, newValue) {
        this.initializer.onBubbleScaleChanged(oldValue, newValue, this);
    }
    onBubbleSizePropertyPropertyChanged(oldValue, newValue) {
        this.onBubbleSizePropertyChanged(oldValue, newValue);
    }
    onBubbleSizePropertyChanged(oldValue, newValue) {
        this.initializer.onBubbleSizePropertyChanged(oldValue, newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.ScatterBubbleSeriesValueMapper();
        }
        return this._initializer;
    }
};
ScatterBubbleSeries.bubbleScaleProperty = new Property({
    name: "bubbleScale",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onBubbleScalePropertyChanged(oldValue, newValue);
    },
});
ScatterBubbleSeries.bubbleSizePropertyProperty = new Property({
    name: "bubbleSizeProperty",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onBubbleSizePropertyPropertyChanged(oldValue, newValue);
    },
});
ScatterBubbleSeries = __decorate([
    CSSType("ScatterBubbleSeries")
], ScatterBubbleSeries);
export { ScatterBubbleSeries };
ScatterBubbleSeries.bubbleScaleProperty.register(ScatterBubbleSeries);
ScatterBubbleSeries.bubbleSizePropertyProperty.register(ScatterBubbleSeries);
let ChartSeriesLabel = class ChartSeriesLabel extends View {
};
ChartSeriesLabel.formatProperty = new Property({
    name: "format",
    valueConverter: (v) => trimQuotes(v)
});
ChartSeriesLabel = __decorate([
    CSSType("ChartSeriesLabel")
], ChartSeriesLabel);
export { ChartSeriesLabel };
ChartSeriesLabel.formatProperty.register(ChartSeriesLabel);
//# sourceMappingURL=chart-series.common.js.map