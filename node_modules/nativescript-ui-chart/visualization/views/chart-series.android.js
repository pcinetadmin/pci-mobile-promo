import { Utils, CSSType, Property, Color } from '@nativescript/core';
import * as seriesCommonModule from './chart-series.common';
import * as initializersImpl from '../../initializers/chart-initializers';
export class PieSeries extends seriesCommonModule.PieSeries {
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.pieChart.PieSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class DonutSeries extends seriesCommonModule.DonutSeries {
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.pieChart.DoughnutSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
let LineSeries = class LineSeries extends seriesCommonModule.CategoricalSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.LineSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.LineSeriesValueMapper();
        }
        return this._initializer;
    }
};
LineSeries = __decorate([
    CSSType('LineSeries'),
    __metadata("design:paramtypes", [])
], LineSeries);
export { LineSeries };
export class OhlcSeries extends seriesCommonModule.OhlcSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
    // TODO: 'setNative' currently is not raised on Android
    // [seriesCommonModule.OhlcSeries.legendTitleProperty.setNative](newValue: string): void {
    //     this.initializer.onLegendTitleChanged(newValue, this);
    // }
    onValuePropertyChanged(oldValue, newValue) { }
    onHighPropertyNameChanged(oldValue, newValue) {
        if (!newValue) {
            return;
        }
        const highPropertyName = this.highPropertyName;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[highPropertyName];
            }
        }));
        this.android.setHighBinding(binding);
    }
    onLowPropertyNameChanged(oldValue, newValue) {
        const lowPropertyName = this.lowPropertyName;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[lowPropertyName];
            }
        }));
        this.android.setLowBinding(binding);
    }
    onOpenPropertyNameChanged(oldValue, newValue) {
        const openPropertyName = this.openPropertyName;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[openPropertyName];
            }
        }));
        this.android.setOpenBinding(binding);
    }
    onClosePropertyNameChanged(oldValue, newValue) {
        const closePropertyName = this.closePropertyName;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[closePropertyName];
            }
        }));
        this.android.setCloseBinding(binding);
    }
}
let CandlestickSeries = class CandlestickSeries extends OhlcSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CandlestickSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
    onFillColorsPropertyChanged(oldValue, newValue) {
        this.onFillColorsChanged(oldValue, newValue);
    }
    onFillColorsChanged(oldValue, newValue) {
        this.initializer.onFillColorsChanged(oldValue, newValue, this);
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.CandlestickSeriesValueMapper();
        }
        return this._initializer;
    }
};
CandlestickSeries.fillColorsProperty = new Property({
    name: 'fillColors',
    defaultValue: undefined,
    valueConverter: v => v.split(',').map(v1 => new Color(v1)),
    valueChanged: (target, oldValue, newValue) => {
        target.onFillColorsPropertyChanged(oldValue, newValue);
    }
});
CandlestickSeries = __decorate([
    CSSType('CandlestickSeries'),
    __metadata("design:paramtypes", [])
], CandlestickSeries);
export { CandlestickSeries };
CandlestickSeries.fillColorsProperty.register(CandlestickSeries);
let SplineSeries = class SplineSeries extends LineSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.SplineSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
SplineSeries = __decorate([
    CSSType('SplineSeries'),
    __metadata("design:paramtypes", [])
], SplineSeries);
export { SplineSeries };
let AreaSeries = class AreaSeries extends seriesCommonModule.CategoricalSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.AreaSeries();
        }
        return this._android;
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.AreaSeriesValueMapper();
        }
        return this._initializer;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
AreaSeries = __decorate([
    CSSType('AreaSeries'),
    __metadata("design:paramtypes", [])
], AreaSeries);
export { AreaSeries };
let SplineAreaSeries = class SplineAreaSeries extends AreaSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.SplineAreaSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
};
SplineAreaSeries = __decorate([
    CSSType('SplineAreaSeries'),
    __metadata("design:paramtypes", [])
], SplineAreaSeries);
export { SplineAreaSeries };
export class ScatterBubbleSeries extends seriesCommonModule.ScatterBubbleSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterBubbleSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class BubbleSeries extends seriesCommonModule.BubbleSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BubbleSeries();
        }
        return this._android;
    }
    onBubbleScaleChanged(oldValue, newValue) {
        if (newValue) {
            // todo: we use (scale^2) because of bug in Android scale calculation. Update this hack when it is fixed.
            this.android.setBubbleScale(Math.pow(newValue * Utils.layout.getDisplayDensity(), 2));
        }
    }
    onBubbleSizePropertyChanged(oldValue, newValue) {
        if (!this.bubbleSizeProperty) {
            return;
        }
        const propertyName = this.bubbleSizeProperty;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[propertyName];
            }
        }));
        this.android.setBubbleSizeBinding(binding);
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class ScatterSeries extends seriesCommonModule.ScatterSeries {
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries();
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class BarSeries extends seriesCommonModule.BarSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BarSeries();
            this._android.setCombineMode(com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.CLUSTER);
            if (!isNaN(this.minBarSize)) {
                this._android.setMinBarWidth(Utils.layout.toDevicePixels(this.minBarSize));
            }
            else {
                this._android.setMinBarWidth(0);
            }
            if (!isNaN(this.maxBarSize)) {
                this._android.setMaxBarWidth(Utils.layout.toDevicePixels(this.maxBarSize));
            }
            else {
                this._android.setMaxBarWidth(0);
            }
        }
        return this._android;
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
export class RangeBarSeries extends seriesCommonModule.RangeBarSeries {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeries();
        }
        return this._android;
    }
    onValuePropertyChanged(oldValue, newValue) {
        console.log("WARNING: Range bar series doesn't use valueProperty property.");
    }
    onHighPropertyNameChanged(oldValue, newValue) {
        if (!newValue) {
            return;
        }
        const highPropertyName = this.highPropertyName;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[highPropertyName];
            }
        }));
        this.android.setHighBinding(binding);
    }
    onLowPropertyNameChanged(oldValue, newValue) {
        const lowPropertyName = this.lowPropertyName;
        const binding = new com.telerik.widget.chart.engine.databinding.GenericDataPointBinding(new com.telerik.android.common.Function({
            apply: function (arg) {
                const item = JSON.parse(arg);
                return item[lowPropertyName];
            }
        }));
        this.android.setLowBinding(binding);
    }
    onLegendTitleChanged(oldValue, newValue) {
        this.initializer.onLegendTitleChanged(newValue, this);
    }
}
//# sourceMappingURL=chart-series.android.js.map