import { View, Property, booleanConverter, Color } from "@nativescript/core";
import { ChartLegendPosition, ChartLegendOffsetOrigin, toPascalCase } from "../../misc/chart-public-enum";
export class RadLegendView extends View {
    onTitleSizeChanged(oldValue, newValue) {
    }
    onTitleColorChanged(oldValue, newValue) {
    }
    onEnableSelectionChanged(oldValue, newValue) {
    }
    onPositionPropertyChanged(oldValue, newValue) {
        this.onPositionChanged(oldValue, newValue);
    }
    onPositionChanged(oldValue, newValue) {
    }
    onOffsetOriginPropertyChanged(oldValue, newValue) {
        this.onOffsetOriginChanged(oldValue, newValue);
    }
    onOffsetOriginChanged(oldValue, newValue) {
    }
    onHorizontalOffsetPropertyChanged(oldValue, newValue) {
        this.onHorizontalOffsetChanged(oldValue, newValue);
    }
    onHorizontalOffsetChanged(oldValue, newValue) {
    }
    onVerticalOffsetPropertyChanged(oldValue, newValue) {
        this.onVerticalOffsetChanged(oldValue, newValue);
    }
    onVerticalOffsetChanged(oldValue, newValue) {
    }
    onTitlePropertyChanged(oldValue, newValue) {
        this.onTitleChanged(oldValue, newValue);
    }
    onTitleChanged(oldValue, newValue) {
    }
    updateLegendView(chartView) {
    }
    updateLegendTitle() {
    }
    updateListViewForTheme() {
    }
}
RadLegendView.titleSizeProperty = new Property({
    name: 'titleSize',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onTitleSizeChanged(oldValue, newValue);
    }
});
RadLegendView.titleColorProperty = new Property({
    name: 'titleColor',
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: (v) => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onTitleColorChanged(oldValue, newValue);
    }
});
RadLegendView.enableSelectionProperty = new Property({
    name: 'enableSelection',
    defaultValue: false,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onEnableSelectionChanged(oldValue, newValue);
    }
});
RadLegendView.positionProperty = new Property({
    name: "position",
    defaultValue: ChartLegendPosition.Bottom,
    valueConverter: (value) => ChartLegendPosition[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onPositionPropertyChanged(oldValue, newValue);
    },
});
RadLegendView.offsetOriginProperty = new Property({
    name: "offsetOrigin",
    defaultValue: ChartLegendOffsetOrigin.TopLeft,
    valueConverter: (value) => ChartLegendOffsetOrigin[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onOffsetOriginPropertyChanged(oldValue, newValue);
    },
});
RadLegendView.horizontalOffsetProperty = new Property({
    name: "horizontalOffset",
    defaultValue: 0,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onHorizontalOffsetPropertyChanged(oldValue, newValue);
    },
});
RadLegendView.verticalOffsetProperty = new Property({
    name: "verticalOffset",
    defaultValue: 0,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onVerticalOffsetPropertyChanged(oldValue, newValue);
    },
});
RadLegendView.titleProperty = new Property({
    name: "title",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onTitlePropertyChanged(oldValue, newValue);
    },
});
RadLegendView.positionProperty.register(RadLegendView);
RadLegendView.offsetOriginProperty.register(RadLegendView);
RadLegendView.horizontalOffsetProperty.register(RadLegendView);
RadLegendView.verticalOffsetProperty.register(RadLegendView);
RadLegendView.titleProperty.register(RadLegendView);
RadLegendView.titleSizeProperty.register(RadLegendView);
RadLegendView.titleColorProperty.register(RadLegendView);
RadLegendView.enableSelectionProperty.register(RadLegendView);
//# sourceMappingURL=chart-legend-view.common.js.map