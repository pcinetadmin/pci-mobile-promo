import { PercentLength, Color, Enums, Application, Utils } from "@nativescript/core";
import * as legendViewCommonModule from './chart-legend-view.common';
import * as chartModule from "../../ui-chart.common";
import { ChartLegendPosition, ChartLegendOffsetOrigin } from "../../misc/chart-public-enum";
export class RadLegendView extends legendViewCommonModule.RadLegendView {
    get android() {
        return this._android;
    }
    updateListViewForTheme() {
        if (this._android) {
            this._android.setLegendItemViewTextColor(this.getColorForCurrentTheme().android);
            this._android.updateListViewAdapter();
        }
    }
    updateLegendView(chartView) {
        if (!(chartView)) {
            return;
        }
        if (!(chartView instanceof chartModule.RadChartBase)) {
            return;
        }
        if (!chartView._context) {
            return;
        }
        if (!this.position) {
            return;
        }
        if (!this._android) {
            this._android = new com.telerik.widget.primitives.legend.RadLegendView(chartView._context);
            this._android.setLegendItemViewTextColor(this.getColorForCurrentTheme().android);
            let that = new WeakRef(this);
            this._legendItemSelectedListener = new com.telerik.widget.primitives.legend.LegendSelectionListener({
                onLegendItemSelected: function (legendItem) {
                    let legend = that.get();
                    if (!legend.enableSelection) {
                        return;
                    }
                    if (legend._chart) {
                        let nativeChart = legend._chart.androidView;
                        let behaviors = nativeChart.getBehaviors();
                        for (let index = 0; index < behaviors.size(); index++) {
                            let currentBehavior = behaviors.get(index);
                            if (currentBehavior.getClass().getName().indexOf('ChartSelectionBehavior') !== -1) {
                                let typedBehavior = currentBehavior;
                                typedBehavior.select(legendItem);
                                break;
                            }
                        }
                    }
                }
            });
            this._android.addLegendItemSelectedListener(this._legendItemSelectedListener);
        }
        if (!this._chart) {
            this._chart = chartView;
        }
        this._android.setLegendProvider(chartView.androidView);
        this.updateLegendTitle();
        const parent = this._android.getParent();
        if (parent) {
            parent.removeView(this._android);
        }
        let lParams = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
        let cParams = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
        chartView.androidView.setId(android.view.View.generateViewId());
        this._android.setId(android.view.View.generateViewId());
        let widthPixels = PercentLength.toDevicePixels(this.width, 0, this._android.getWidth());
        let heightPixels = PercentLength.toDevicePixels(this.height, 0, this._android.getHeight());
        switch (this.position) {
            case ChartLegendPosition.Left:
                if (isNaN(+widthPixels)) {
                    console.log("WARNING: Width property is required if legend position is set to left.");
                }
                lParams.width = widthPixels;
                lParams.height = (!isNaN(heightPixels) && heightPixels > 0 ? heightPixels : android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
                lParams.addRule(android.widget.RelativeLayout.CENTER_VERTICAL);
                cParams.width = android.widget.RelativeLayout.LayoutParams.FILL_PARENT;
                cParams.height = android.widget.RelativeLayout.LayoutParams.FILL_PARENT;
                cParams.addRule(android.widget.RelativeLayout.RIGHT_OF, this._android.getId());
                cParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
                break;
            case ChartLegendPosition.Right:
                if (isNaN(+widthPixels)) {
                    console.log("WARNING: Width property is required if legend position is set to right.");
                }
                lParams.width = widthPixels;
                lParams.height = (!isNaN(heightPixels) && heightPixels > 0 ? heightPixels : android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT, this._android.getId());
                lParams.addRule(android.widget.RelativeLayout.CENTER_VERTICAL);
                cParams.width = android.widget.RelativeLayout.LayoutParams.FILL_PARENT;
                cParams.height = android.widget.RelativeLayout.LayoutParams.FILL_PARENT;
                cParams.addRule(android.widget.RelativeLayout.LEFT_OF, this._android.getId());
                cParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
                break;
            case ChartLegendPosition.Top:
                lParams.width = android.widget.RelativeLayout.LayoutParams.MATCH_PARENT;
                lParams.height = (!isNaN(heightPixels) && heightPixels > 0 ? heightPixels : android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
                cParams.addRule(android.widget.RelativeLayout.BELOW, this._android.getId());
                break;
            case ChartLegendPosition.Bottom:
                lParams.width = android.widget.RelativeLayout.LayoutParams.MATCH_PARENT;
                lParams.height = (!isNaN(heightPixels) && heightPixels > 0 ? heightPixels : android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
                cParams.addRule(android.widget.RelativeLayout.ABOVE, this._android.getId());
                break;
            case ChartLegendPosition.Floating:
                let params = this.getFloatingPositionParams();
                lParams = params.legendParam;
                cParams = params.chartParam;
                break;
        }
        chartView.androidView.setLayoutParams(cParams);
        this._android.setLayoutParams(lParams);
        chartView.rootLayout.addView(this._android);
    }
    getFloatingPositionParams() {
        let lParams = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
        let cParams = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
        let vertOff = Utils.layout.toDeviceIndependentPixels(this.verticalOffset);
        let horzOff = Utils.layout.toDeviceIndependentPixels(this.horizontalOffset);
        switch (this.offsetOrigin) {
            case ChartLegendOffsetOrigin.TopRight:
                lParams.setMargins(0, vertOff, horzOff, 0);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
                break;
            case ChartLegendOffsetOrigin.BottomLeft:
                lParams.setMargins(horzOff, 0, 0, vertOff);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
                break;
            case ChartLegendOffsetOrigin.BottomRight:
                lParams.setMargins(0, 0, horzOff, vertOff);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
                break;
            case ChartLegendOffsetOrigin.TopLeft:
            default:
                lParams.setMargins(horzOff, vertOff, 0, 0);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
                lParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
                break;
        }
        let widthPixels = PercentLength.toDevicePixels(this.width, 0, this._android.getWidth());
        let heightPixels = PercentLength.toDevicePixels(this.height, 0, this._android.getHeight());
        if (isNaN(widthPixels) || widthPixels === 0) {
            console.log("WARNING: Width property is required if legend position is set to Floating.");
        }
        lParams.width = widthPixels;
        lParams.height = (!isNaN(heightPixels) && heightPixels > 0 ? heightPixels : android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
        cParams.width = android.widget.RelativeLayout.LayoutParams.MATCH_PARENT;
        cParams.height = android.widget.RelativeLayout.LayoutParams.MATCH_PARENT;
        return { legendParam: lParams, chartParam: cParams };
    }
    onTitleChanged(oldValue, newValue) {
        this.updateLegendTitle();
    }
    updateLegendTitle() {
        if (this.android) {
            let nativeTitleView = this.android.getLegendTitleView();
            if (this.title !== undefined) {
                nativeTitleView.setVisibility(android.view.View.VISIBLE);
                nativeTitleView.setText(this.title);
            }
            else {
                nativeTitleView.setVisibility(android.view.View.GONE);
            }
            nativeTitleView.setTextColor(this.getTitleColor().android);
            if (this.titleSize !== undefined && !isNaN(this.titleSize)) {
                let nativeSize = Utils.layout.toDevicePixels(this.titleSize);
                nativeTitleView.setTextSize(nativeSize);
            }
        }
    }
    getTitleColor() {
        if (this.titleColor) {
            return this.titleColor;
        }
        return this.getColorForCurrentTheme();
    }
    getColorForCurrentTheme() {
        if (Application.systemAppearance() === Enums.SystemAppearance.dark) {
            return new Color("white");
        }
        else {
            return new Color("#6a6a6a");
        }
    }
    onPositionChanged(oldValue, newValue) {
        this.updateLegendView(this._chart);
    }
    onOffsetOriginChanged(oldValue, newValue) {
        this.updateLegendView(this._chart);
    }
    onHorizontalOffsetChanged(oldValue, newValue) {
        this.updateLegendView(this._chart);
    }
    onVerticalOffsetChanged(oldValue, newValue) {
        this.updateLegendView(this._chart);
    }
}
//# sourceMappingURL=chart-legend-view.android.js.map