import { Utils } from '@nativescript/core';
import * as legendViewCommonModule from './chart-legend-view.common';
import * as commonModule from '../../common';
import { ChartLegendPosition, ChartLegendOffsetOrigin } from '../../misc/chart-public-enum';
////////////////////////////////////////////////////////////////////////
// RadLegendView
////////////////////////////////////////////////////////////////////////
export class RadLegendView extends legendViewCommonModule.RadLegendView {
    [legendViewCommonModule.RadLegendView.positionProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    [legendViewCommonModule.RadLegendView.verticalOffsetProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    [legendViewCommonModule.RadLegendView.horizontalOffsetProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    [legendViewCommonModule.RadLegendView.offsetOriginProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    [legendViewCommonModule.RadLegendView.titleProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    [legendViewCommonModule.RadLegendView.titleSizeProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    [legendViewCommonModule.RadLegendView.titleColorProperty.setNative](newValue) {
        this.updateLegendView(this._chart);
    }
    updateLegendPosition(chartView) {
        if (!this.position) {
            return;
        }
        switch (this.position) {
            case ChartLegendPosition.Left:
                chartView.ios.legend.style.position = 0 /* TKChartLegendPosition.Left */;
                break;
            case ChartLegendPosition.Right:
                chartView.ios.legend.style.position = 1 /* TKChartLegendPosition.Right */;
                break;
            case ChartLegendPosition.Top:
                chartView.ios.legend.style.position = 2 /* TKChartLegendPosition.Top */;
                break;
            case ChartLegendPosition.Bottom:
                chartView.ios.legend.style.position = 3 /* TKChartLegendPosition.Bottom */;
                break;
            case ChartLegendPosition.Floating:
                chartView.ios.legend.style.position = 4 /* TKChartLegendPosition.Floating */;
                break;
        }
        if (this.position === ChartLegendPosition.Floating) {
            switch (this.offsetOrigin) {
                case ChartLegendOffsetOrigin.TopLeft:
                    chartView.ios.legend.style.offsetOrigin = 0 /* TKChartLegendOffsetOrigin.TopLeft */;
                    break;
                case ChartLegendOffsetOrigin.TopRight:
                    chartView.ios.legend.style.offsetOrigin = 1 /* TKChartLegendOffsetOrigin.TopRight */;
                    break;
                case ChartLegendOffsetOrigin.BottomLeft:
                    chartView.ios.legend.style.offsetOrigin = 2 /* TKChartLegendOffsetOrigin.BottomLeft */;
                    break;
                case ChartLegendOffsetOrigin.BottomRight:
                    chartView.ios.legend.style.offsetOrigin = 3 /* TKChartLegendOffsetOrigin.BottomRight */;
                    break;
                default:
                    chartView.ios.legend.style.offsetOrigin = 0 /* TKChartLegendOffsetOrigin.TopLeft */;
            }
            chartView.ios.legend.style.offset = {
                horizontal: isNaN(this.horizontalOffset) ? 0 : this.horizontalOffset,
                vertical: isNaN(this.verticalOffset) ? 0 : this.verticalOffset
            };
        }
        chartView.ios.setNeedsLayout();
    }
    updateLegendView(chartView) {
        if (!chartView) {
            return;
        }
        if (!(chartView instanceof commonModule.RadChartBase)) {
            return;
        }
        if (!this._chart) {
            this._chart = chartView;
        }
        chartView.nativeView.legend.hidden = false;
        if (this.position) {
            this.updateLegendPosition(chartView);
        }
        if (this.title) {
            chartView.nativeView.legend.titleLabel.text = this.title;
            chartView.nativeView.legend.titleLabel.lineBreakMode = 0 /* NSLineBreakMode.ByWordWrapping */;
            chartView.nativeView.legend.showTitle = true;
        }
        if (this.titleColor !== undefined) {
            chartView.nativeView.legend.titleLabel.textColor = this.titleColor.ios;
        }
        if (this.titleSize !== undefined && !isNaN(this.titleSize)) {
            let currentFontName = chartView.nativeView.legend.titleLabel.font.fontName;
            let nativeSize = Utils.layout.toDevicePixels(this.titleSize);
            if (currentFontName) {
                chartView.nativeView.legend.titleLabel.font = UIFont.fontWithNameSize(currentFontName, nativeSize);
            }
            else {
                chartView.nativeView.legend.titleLabel.font = UIFont.systemFontOfSize(nativeSize);
            }
        }
        chartView.nativeView.legend.allowSelection = this.enableSelection;
        chartView.updateChart();
    }
}
//# sourceMappingURL=chart-legend-view.ios.js.map