import * as axisCommonModule from './chart-axis.common';
import * as publicEnumModule from '../../misc/chart-public-enum';
import * as dateHelperModule from '../../misc/chart-date-helper';
export class CategoricalAxis extends axisCommonModule.CategoricalAxis {
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.axes.CategoricalAxis();
        }
        return this._android;
    }
    onMajorTickIntervalChanged(oldValue, newValue) {
        if (newValue) {
            this.android.setMajorTickInterval(newValue);
        }
    }
}
export class DateTimeContinuousAxis extends axisCommonModule.DateTimeContinuousAxis {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.axes.DateTimeContinuousAxis();
            this._android.setPlotMode(com.telerik.widget.chart.engine.axes.common.AxisPlotMode.BETWEEN_TICKS);
        }
        return this._android;
    }
    onDateFormatChanged(oldValue, newValue) {
        if (newValue) {
            this.android.setDateTimeFormat(new java.text.SimpleDateFormat(newValue));
        }
    }
    onLabelFormatChanged(oldValue, newValue) {
        console.log('WARNING: labelFormat property is not supported for DateTimeCategoricalAxis. Use dateFormat instead.');
    }
    onSourceDateFormatChanged(oldValue, newValue) {
        if (newValue) {
            this.android.setSourceDateTimeFormat(new java.text.SimpleDateFormat(newValue));
        }
    }
    onPlotModeChanged(oldValue, newValue) {
        switch (newValue) {
            case publicEnumModule.ChartAxisPlotMode.BetweenTicks:
                this.android.setPlotMode(com.telerik.widget.chart.engine.axes.common.AxisPlotMode.BETWEEN_TICKS);
                break;
            case publicEnumModule.ChartAxisPlotMode.OnTicks:
                this.android.setPlotMode(com.telerik.widget.chart.engine.axes.common.AxisPlotMode.ON_TICKS);
                break;
            // case publicEnumModule.ChartAxisPlotMode.OnTicksPadded:
            //     axis.android.setPlotMode(com.telerik.widget.chart.engine.axes.common.AxisPlotMode.ON_TICKS_PADDED);
            //     break;
        }
    }
    onMinimumChanged(oldValue, newValue) {
        if (newValue === undefined) {
            this.android.setMinimum(undefined);
            return;
        }
        if (typeof newValue === 'string') {
            let formatter = new java.text.SimpleDateFormat('dd/MM/yyyy');
            let parsedDate = formatter.parse(newValue);
            let millis = parsedDate.getTime();
            let nativeValue = java.util.Calendar.getInstance();
            nativeValue.setTimeInMillis(millis);
            this.android.setMinimum(nativeValue);
        }
        else {
            this.android.setMinimum(dateHelperModule.getCalendarFromDate(newValue));
        }
    }
    onMaximumChanged(oldValue, newValue) {
        if (newValue === undefined) {
            this.android.setMaximum(undefined);
            return;
        }
        if (typeof newValue === 'string') {
            let formatter = new java.text.SimpleDateFormat('dd/MM/yyyy');
            let parsedDate = formatter.parse(newValue);
            let millis = parsedDate.getTime();
            let nativeValue = java.util.Calendar.getInstance();
            nativeValue.setTimeInMillis(millis);
            this.android.setMaximum(nativeValue);
        }
        else {
            this.android.setMaximum(dateHelperModule.getCalendarFromDate(newValue));
        }
    }
    onMajorStepUnitChanged(oldValue, newValue) {
        switch (newValue) {
            case publicEnumModule.ChartAxisDateTimeComponent.Second:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.SECOND);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Minute:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.MINUTE);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Hour:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.HOUR);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Day:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.DAY);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Week:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.WEEK);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Month:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.MONTH);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Year:
                this.android.setMajorStepUnit(com.telerik.widget.chart.engine.axes.common.TimeInterval.YEAR);
                break;
        }
    }
    onMajorStepChanged(oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMajorStep(+newValue);
        }
    }
}
export class DateTimeCategoricalAxis extends axisCommonModule.DateTimeCategoricalAxis {
    constructor() {
        super();
    }
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.axes.DateTimeCategoricalAxis();
        }
        return this._android;
    }
    onDateFormatChanged(oldValue, newValue) {
        if (newValue) {
            this.android.setDateTimeFormat(new java.text.SimpleDateFormat(newValue));
        }
    }
    onLabelFormatChanged(oldValue, newValue) {
        console.log('WARNING: labelFormat property is not supported for DateTimeCategoricalAxis. Use dateFormat instead.');
    }
    onDateTimeComponentChanged(oldValue, newValue) {
        switch (newValue) {
            case publicEnumModule.ChartAxisDateTimeComponent.Second:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.SECOND);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Minute:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.MINUTE);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Hour:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.HOUR);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Day:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.DAY);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Week:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.WEEK);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Month:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.MONTH);
                break;
            case publicEnumModule.ChartAxisDateTimeComponent.Year:
                this.android.setDateTimeComponent(com.telerik.widget.chart.engine.axes.common.DateTimeComponent.YEAR);
                break;
        }
    }
}
////////////////////////////////////////////////////////////////////////
// LogarithmicAxis
////////////////////////////////////////////////////////////////////////
export class LogarithmicAxis extends axisCommonModule.LogarithmicAxis {
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.axes.LogarithmicAxis();
        }
        return this._android;
    }
    onExponentStepChanged(oldValue, newValue) {
        if (!isNaN(+newValue) && newValue > 0) {
            this.android.setExponentStep(newValue);
        }
    }
    onLogarithmBaseChanged(oldValue, newValue) {
        if (!isNaN(newValue)) {
            this.android.setLogarithmBase(newValue);
        }
    }
    onMajorStepChanged(oldValue, newValue) {
        console.log('WARNING: majorStep property is not used for LogarithmicAxis. Use exponentStep property instead.');
    }
    onMinimumChanged(oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMinimum(parseFloat(newValue));
        }
    }
    onMaximumChanged(oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMaximum(parseFloat(newValue));
        }
    }
}
export class LinearAxis extends axisCommonModule.LinearAxis {
    get android() {
        if (!this._android) {
            this._android = new com.telerik.widget.chart.visualization.cartesianChart.axes.LinearAxis();
        }
        return this._android;
    }
    onMajorStepChanged(oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMajorStep(+newValue);
        }
    }
    onMinimumChanged(oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMinimum(parseFloat(newValue));
        }
    }
    onMaximumChanged(oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMaximum(parseFloat(newValue));
        }
    }
}
//# sourceMappingURL=chart-axis.android.js.map