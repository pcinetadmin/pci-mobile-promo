import { ViewBase, Property, booleanConverter } from "@nativescript/core";
import { ChartTrackballSnapMode, toPascalCase } from "../../misc/chart-public-enum";
export class Trackball extends ViewBase {
    constructor() {
        super();
    }
    get android() {
        return this._android;
    }
    set android(value) {
        this._android = value;
    }
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
    }
    onSnapModePropertyChanged(oldValue, newValue) {
        this.onSnapModeChanged(oldValue, newValue);
    }
    onShowIntersectionPointsPropertyChanged(oldValue, newValue) {
        this.onShowIntersectionPointsChanged(oldValue, newValue);
    }
    onSnapModeChanged(oldValue, newValue) { }
    onShowIntersectionPointsChanged(oldValue, newValue) { }
    onOwnerChanged() { }
}
Trackball.trackBallContentRequestedEvent = "trackBallContentRequested";
Trackball.snapModeProperty = new Property({
    name: "snapMode",
    defaultValue: ChartTrackballSnapMode.ClosestPoint,
    valueConverter: (value) => ChartTrackballSnapMode[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onSnapModePropertyChanged(oldValue, newValue);
    },
});
Trackball.showIntersectionPointsProperty = new Property({
    name: "showIntersectionPoints",
    defaultValue: false,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onShowIntersectionPointsPropertyChanged(oldValue, newValue);
    },
});
Trackball.snapModeProperty.register(Trackball);
Trackball.showIntersectionPointsProperty.register(Trackball);
//# sourceMappingURL=chart-track-ball.common.js.map