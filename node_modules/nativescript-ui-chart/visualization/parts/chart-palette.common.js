import { Observable, ObservableArray, removeWeakEventListener, addWeakEventListener, ViewBase, Property, Color } from "@nativescript/core";
import { ChartPaletteSeriesState, toPascalCase } from "../../misc/chart-public-enum";
export class Palette extends ViewBase {
    constructor() {
        super();
        this.entries = new ObservableArray();
    }
    _addArrayFromBuilder(name, value) {
        if (name === "entries") {
            this.entries = new ObservableArray(value);
            for (let i = 0; i < this.entries.length; i++) {
                this.entries.getItem(i).ownerPalette = this;
            }
        }
    }
    onEntriesPropertyChanged(oldValue, newValue) {
        this.onEntriesChanged(oldValue, newValue);
    }
    onEntriesChanged(oldValue, newValue) {
        if (oldValue instanceof Observable) {
            removeWeakEventListener(oldValue, ObservableArray.changeEvent, this.entriesCollectionChangedInternal, this);
        }
        if (newValue instanceof Observable) {
            const collection = newValue;
            if (collection.length >= 0) {
                for (let i = 0; i < collection.length; i++) {
                    this.entries.getItem(i).ownerPalette = this;
                }
                this.updateOwner();
            }
            addWeakEventListener(newValue, ObservableArray.changeEvent, this.entriesCollectionChangedInternal, this);
        }
    }
    entriesCollectionChangedInternal(data) {
        if (data.eventName && data.eventName.toLowerCase() === "change") {
            if (data.action && data.action.toLowerCase() === "add") {
                for (let i = 0; i < data.addedCount; i++) {
                    this.entries.getItem(data.index).ownerPalette = this;
                }
            }
        }
        this.updateOwner();
    }
    seriesNamePropertyChanged(oldValue, newValue) {
        this.onSeriesNamePropertyChanged(oldValue, newValue);
    }
    onSeriesNamePropertyChanged(oldValue, newValue) {
        this.updateOwner();
    }
    seriesStatePropertyChanged(oldValue, newValue) {
        this.onSeriesStatePropertyChanged(oldValue, newValue);
    }
    onSeriesStatePropertyChanged(oldValue, newValue) {
        this.updateOwner();
    }
    updateOwner() {
        if (this.owner && this.owner.reloadPalettes) {
            this.owner.reloadPalettes();
        }
    }
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
    }
}
Palette.entriesProperty = new Property({
    name: "entries",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onEntriesPropertyChanged(oldValue, newValue);
    },
});
Palette.seriesNameProperty = new Property({
    name: "seriesName",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.seriesNamePropertyChanged(oldValue, newValue);
    },
});
Palette.seriesStateProperty = new Property({
    name: "seriesState",
    defaultValue: undefined,
    valueConverter: (value) => ChartPaletteSeriesState[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.seriesStatePropertyChanged(oldValue, newValue);
    },
});
Palette.entriesProperty.register(Palette);
Palette.seriesNameProperty.register(Palette);
Palette.seriesStateProperty.register(Palette);
export class PaletteEntry extends ViewBase {
    fillColorPropertyChanged(oldValue, newValue) {
        this.onFillColorChanged(oldValue, newValue);
    }
    strokeWidthPropertyChanged(oldValue, newValue) {
        this.onStrokeWidthChanged(oldValue, newValue);
    }
    strokeColorPropertyChanged(oldValue, newValue) {
        this.onStrokeColorChanged(oldValue, newValue);
    }
    onFillColorChanged(oldValue, newValue) {
        this.updateOwner();
    }
    onStrokeWidthChanged(oldValue, newValue) {
        this.updateOwner();
    }
    onStrokeColorChanged(oldValue, newValue) {
        this.updateOwner();
    }
    updateOwner() {
        if (this.ownerPalette && this.ownerPalette.owner && this.ownerPalette.owner.reloadPalettes) {
            this.ownerPalette.owner.reloadPalettes();
        }
    }
    get ownerPalette() {
        return this._owner;
    }
    set ownerPalette(value) {
        this._owner = value;
    }
}
PaletteEntry.fillColorProperty = new Property({
    name: "fillColor",
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: (v) => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.fillColorPropertyChanged(oldValue, newValue);
    },
});
PaletteEntry.strokeWidthProperty = new Property({
    name: "strokeWidth",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.strokeWidthPropertyChanged(oldValue, newValue);
    },
});
PaletteEntry.strokeColorProperty = new Property({
    name: "strokeColor",
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: (v) => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.strokeColorPropertyChanged(oldValue, newValue);
    },
});
PaletteEntry.fillColorProperty.register(PaletteEntry);
PaletteEntry.strokeWidthProperty.register(PaletteEntry);
PaletteEntry.strokeColorProperty.register(PaletteEntry);
//# sourceMappingURL=chart-palette.common.js.map