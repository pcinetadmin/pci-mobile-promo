import * as trackBallModule from "./chart-track-ball.common";
import { ChartTrackballSnapMode } from "../../misc/chart-public-enum";
export class Trackball extends trackBallModule.Trackball {
    // private _ios: TKChartTrackball;
    get ios() {
        return this._ios;
    }
    set ios(value) {
        this._ios = value;
        this.updateNativeSnapMode(this.snapMode);
        this.updateShowIntersectionPoints(this.showIntersectionPoints);
    }
    constructor() {
        super();
    }
    onSnapModeChanged(oldValue, newValue) {
        if (!this._ios) {
            return;
        }
        if (newValue) {
            this.updateNativeSnapMode(newValue);
        }
    }
    onShowIntersectionPointsChanged(oldValue, newValue) {
        if (!this._ios) {
            return;
        }
        if (newValue) {
            this.updateShowIntersectionPoints(newValue);
        }
    }
    updateShowIntersectionPoints(value) {
        if (value) {
            this.ios.line.style.pointShape.size = CGSizeMake(4, 4);
        }
        else {
            this.ios.line.style.pointShape.size = CGSizeZero;
        }
    }
    updateNativeSnapMode(snapMode) {
        if (snapMode === ChartTrackballSnapMode.ClosestPoint) {
            this.ios.snapMode = 0 /* ClosestPoint */;
        }
        else if (snapMode === ChartTrackballSnapMode.AllClosestPoints) {
            this.ios.snapMode = 1 /* AllClosestPoints */;
        }
    }
}
//# sourceMappingURL=chart-track-ball.ios.js.map