import { ViewBase, Property, booleanConverter, Color } from '@nativescript/core';
import { ChartAnnotationZPosition, toPascalCase } from '../../misc/chart-public-enum';
export class CartesianChartAnnotation extends ViewBase {
    onAxisIdPropertyChanged(oldValue, newValue) {
        this.onAxisIdChanged(oldValue, newValue);
    }
    onZPositionPropertyChanged(oldValue, newValue) {
        this.onZPositionChanged(oldValue, newValue);
    }
    onHiddenPropertyChanged(oldValue, newValue) {
        this.onHiddenChanged(oldValue, newValue);
    }
    onStrokeWidthPropertyChanged(oldValue, newValue) {
        this.onStrokeWidthChanged(oldValue, newValue);
    }
    onStrokeColorPropertyChanged(oldValue, newValue) {
        this.onStrokeColorChanged(oldValue, newValue);
    }
    onStrokeDashPatternPropertyChanged(oldValue, newValue) {
        this.onStrokeDashPatternChanged(oldValue, newValue);
    }
    onAxisIdChanged(oldValue, newValue) { }
    onZPositionChanged(oldValue, newValue) { }
    onHiddenChanged(oldValue, newValue) { }
    onStrokeWidthChanged(oldValue, newValue) { }
    onStrokeColorChanged(oldValue, newValue) { }
    onStrokeDashPatternChanged(oldValue, newValue) { }
    onOwnerChanged() { }
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
        this.onOwnerChanged();
    }
}
CartesianChartAnnotation.axisIdProperty = new Property({
    name: 'axisId',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onAxisIdPropertyChanged(oldValue, newValue);
    }
});
CartesianChartAnnotation.zPositionProperty = new Property({
    name: 'zPosition',
    defaultValue: undefined,
    valueConverter: value => ChartAnnotationZPosition[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onZPositionPropertyChanged(oldValue, newValue);
    }
});
CartesianChartAnnotation.hiddenProperty = new Property({
    name: 'hidden',
    defaultValue: undefined,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onHiddenPropertyChanged(oldValue, newValue);
    }
});
CartesianChartAnnotation.strokeWidthProperty = new Property({
    name: 'strokeWidth',
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeWidthPropertyChanged(oldValue, newValue);
    }
});
CartesianChartAnnotation.strokeColorProperty = new Property({
    name: 'strokeColor',
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: v => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeColorPropertyChanged(oldValue, newValue);
    }
});
CartesianChartAnnotation.strokeDashPatternProperty = new Property({
    name: 'strokeDashPattern',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onStrokeDashPatternPropertyChanged(oldValue, newValue);
    }
});
CartesianChartAnnotation.axisIdProperty.register(CartesianChartAnnotation);
CartesianChartAnnotation.zPositionProperty.register(CartesianChartAnnotation);
CartesianChartAnnotation.hiddenProperty.register(CartesianChartAnnotation);
CartesianChartAnnotation.strokeWidthProperty.register(CartesianChartAnnotation);
CartesianChartAnnotation.strokeColorProperty.register(CartesianChartAnnotation);
CartesianChartAnnotation.strokeDashPatternProperty.register(CartesianChartAnnotation);
export class ChartGridLineAnnotation extends CartesianChartAnnotation {
    onValuePropertyChanged(oldValue, newValue) {
        this.onValueChanged(oldValue, newValue);
    }
    onValueChanged(oldValue, newValue) { }
}
ChartGridLineAnnotation.valueProperty = new Property({
    name: 'value',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onValuePropertyChanged(oldValue, newValue);
    }
});
ChartGridLineAnnotation.valueProperty.register(ChartGridLineAnnotation);
export class ChartPlotBandAnnotation extends CartesianChartAnnotation {
    onMinValuePropertyChanged(oldValue, newValue) {
        this.onMinValueChanged(oldValue, newValue);
    }
    onMaxValuePropertyChanged(oldValue, newValue) {
        this.onMaxValueChanged(oldValue, newValue);
    }
    onFillColorPropertyChanged(oldValue, newValue) {
        this.onFillColorChanged(oldValue, newValue);
    }
    onMinValueChanged(oldValue, newValue) { }
    onMaxValueChanged(oldValue, newValue) { }
    onFillColorChanged(oldValue, newValue) { }
}
ChartPlotBandAnnotation.minValueProperty = new Property({
    name: 'minValue',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onMinValuePropertyChanged(oldValue, newValue);
    }
});
ChartPlotBandAnnotation.maxValueProperty = new Property({
    name: 'maxValue',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onMaxValuePropertyChanged(oldValue, newValue);
    }
});
ChartPlotBandAnnotation.fillColorProperty = new Property({
    name: 'fillColor',
    defaultValue: undefined,
    equalityComparer: Color.equals,
    valueConverter: v => new Color(v),
    valueChanged: (target, oldValue, newValue) => {
        target.onFillColorPropertyChanged(oldValue, newValue);
    }
});
ChartPlotBandAnnotation.minValueProperty.register(ChartPlotBandAnnotation);
ChartPlotBandAnnotation.maxValueProperty.register(ChartPlotBandAnnotation);
ChartPlotBandAnnotation.fillColorProperty.register(ChartPlotBandAnnotation);
//# sourceMappingURL=chart-annotation.common.js.map