import { ViewBase, Property, booleanConverter, Color } from "@nativescript/core";
export class RadCartesianChartGrid extends ViewBase {
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
        this.onOwnerChanged();
    }
    applyGridStyle() {
    }
    onOwnerChanged() {
    }
    horizontalStripLinesVisibleChanged(oldValue, newValue) {
        this.onHorizontalStripLinesVisibleChanged(oldValue, newValue);
    }
    onHorizontalStripLinesVisibleChanged(oldValue, newValue) {
    }
    verticalStripLinesVisibleChanged(oldValue, newValue) {
        this.onVerticalStripLinesVisibleChanged(oldValue, newValue);
    }
    onVerticalStripLinesVisibleChanged(oldValue, newValue) {
    }
    verticalLinesVisibleChanged(oldValue, newValue) {
        this.onVerticalLinesVisibleChanged(oldValue, newValue);
    }
    onVerticalLinesVisibleChanged(oldValue, newValue) {
    }
    horizontalLinesVisibleChanged(oldValue, newValue) {
        this.onHorizontalLinesVisibleChanged(oldValue, newValue);
    }
    onHorizontalLinesVisibleChanged(oldValue, newValue) {
    }
    verticalStrokeColorChanged(oldValue, newValue) {
        this.onVerticalStrokeColorChanged(oldValue, newValue);
    }
    onVerticalStrokeColorChanged(oldValue, newValue) {
    }
    horizontalStrokeColorChanged(oldValue, newValue) {
        this.onHorizontalStrokeColorChanged(oldValue, newValue);
    }
    onHorizontalStrokeColorChanged(oldValue, newValue) {
    }
    horizontalStrokeWidthChanged(oldValue, newValue) {
        this.onHorizontalStrokeWidthChanged(oldValue, newValue);
    }
    onHorizontalStrokeWidthChanged(oldValue, newValue) {
    }
    verticalStrokeWidthChanged(oldValue, newValue) {
        this.onVerticalStrokeWidthChanged(oldValue, newValue);
    }
    onVerticalStrokeWidthChanged(oldValue, newValue) {
    }
    verticalStripLineColorChanged(oldValue, newValue) {
        this.onVerticalStripLineColorChanged(oldValue, newValue);
    }
    onVerticalStripLineColorChanged(oldValue, newValue) {
    }
    horizontalStripLineColorChanged(oldValue, newValue) {
        this.onHorizontalStripLineColorChanged(oldValue, newValue);
    }
    onHorizontalStripLineColorChanged(oldValue, newValue) {
    }
}
RadCartesianChartGrid.horizontalStrokeColorProperty = new Property({
    name: "horizontalStrokeColor",
    defaultValue: undefined,
    valueConverter: stringColorsConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.horizontalStrokeColorChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.verticalStrokeColorProperty = new Property({
    name: "verticalStrokeColor",
    defaultValue: undefined,
    valueConverter: stringColorsConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.verticalStrokeColorChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.horizontalStrokeWidthProperty = new Property({
    name: "horizontalStrokeWidth",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.horizontalStrokeWidthChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.verticalStrokeWidthProperty = new Property({
    name: "verticalStrokeWidth",
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.verticalStrokeWidthChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.verticalStripLineColorProperty = new Property({
    name: "verticalStripLineColor",
    defaultValue: undefined,
    valueConverter: stringColorsConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.verticalStripLineColorChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.horizontalStripLineColorProperty = new Property({
    name: "horizontalStripLineColor",
    defaultValue: undefined,
    valueConverter: stringColorsConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.horizontalStripLineColorChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.verticalLinesVisibleProperty = new Property({
    name: "verticalLinesVisible",
    defaultValue: undefined,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.verticalLinesVisibleChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.horizontalLinesVisibleProperty = new Property({
    name: "horizontalLinesVisible",
    defaultValue: undefined,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.horizontalLinesVisibleChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.verticalStripLinesVisibleProperty = new Property({
    name: "verticalStripLinesVisible",
    defaultValue: undefined,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.verticalStripLinesVisibleChanged(oldValue, newValue);
    },
});
RadCartesianChartGrid.horizontalStripLinesVisibleProperty = new Property({
    name: "horizontalStripLinesVisible",
    defaultValue: undefined,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.horizontalStripLinesVisibleChanged(oldValue, newValue);
    },
});
export function stringColorsConverter(colorsText) {
    if (colorsText.indexOf(',') > -1) {
        let colorsArray = [];
        let colorsList = colorsText.split(',');
        for (let i = 0; i < colorsList.length; i++) {
            let color = new Color(colorsList[i].trim());
            colorsArray.push(color);
        }
        return colorsArray;
    }
    return new Color(colorsText);
}
RadCartesianChartGrid.horizontalStrokeColorProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.verticalStrokeColorProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.horizontalStrokeWidthProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.verticalStrokeWidthProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.verticalStripLineColorProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.horizontalStripLineColorProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.verticalLinesVisibleProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.horizontalLinesVisibleProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.verticalStripLinesVisibleProperty.register(RadCartesianChartGrid);
RadCartesianChartGrid.horizontalStripLinesVisibleProperty.register(RadCartesianChartGrid);
//# sourceMappingURL=chart-cartesian-chart-grid.common.js.map