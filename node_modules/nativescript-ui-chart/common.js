import { View, Property, booleanConverter, ObservableArray, Observable, removeWeakEventListener, addWeakEventListener, CSSType, Builder } from '@nativescript/core';
import { ChartSelectionMode, toPascalCase } from './misc/chart-public-enum';
import * as initializersImpl from './initializers/chart-initializers';
/*
 * Defines the known properties that are collections. This is used by the XML parser.
 */
Builder.knownCollections
    .add('series')
    .add('entries')
    .add('palettes')
    .add('annotations');
export class RadChartBase extends View {
    constructor() {
        super();
        this.on('bindingContextChange', this.baseBindingContextChanged, this);
    }
    get androidView() {
        return undefined;
    }
    get rootLayout() {
        return undefined;
    }
    reloadPalettes() {
        if (this._initializer) {
            this._initializer.reloadPalettes(this);
        }
    }
    get initializer() {
        if (!this._initializer) {
            this._initializer = new initializersImpl.ChartBaseValueMapper();
        }
        return this._initializer;
    }
    updateChart() { }
    _addArrayFromBuilder(name, value) {
        if (name === 'series') {
            this.series = new ObservableArray(value);
        }
        else if (name === 'palettes') {
            this.palettes = new ObservableArray(value);
        }
        else if (name === 'annotations') {
            this.annotations = new ObservableArray(value);
        }
    }
    baseBindingContextChanged(data) {
        if (this.series) {
            for (let i = 0; i < this.series.length; i++) {
                this.series.getItem(i).bindingContext = data.value;
                if (this.series.getItem(i).horizontalAxis) {
                    this.series.getItem(i).horizontalAxis.bindingContext = data.value;
                }
                if (this.series.getItem(i).verticalAxis) {
                    this.series.getItem(i).verticalAxis.bindingContext = data.value;
                }
            }
        }
    }
    getAxisByID(axisID) {
        return null;
    }
    onLegendPropertyChanged(oldValue, newValue) {
        this.onLegendChanged(oldValue, newValue);
    }
    onLegendChanged(oldValue, newValue) { }
    onPalettesPropertyChanged(oldValue, newValue) {
        this.onPalettesChanged(oldValue, newValue);
    }
    onPalettesChanged(oldValue, newValue) {
        this.initializer.onPalettesPropertyChanged(oldValue, newValue, this);
        if (oldValue instanceof Observable) {
            removeWeakEventListener(oldValue, ObservableArray.changeEvent, this.PalettesCollectionChangedInternal, this);
        }
        if (newValue instanceof Observable) {
            addWeakEventListener(newValue, ObservableArray.changeEvent, this.PalettesCollectionChangedInternal, this);
        }
    }
    PalettesCollectionChangedInternal(data) {
        this.initializer.onPalettesChanged(data, this);
    }
    onSeriesPropertyChanged(oldValue, newValue) {
        this.onSeriesChanged(oldValue, newValue);
    }
    onSeriesChanged(oldValue, newValue) {
        this.initializer.onSeriesPropertyChanged(oldValue, newValue, this);
        if (oldValue instanceof Observable) {
            removeWeakEventListener(oldValue, ObservableArray.changeEvent, this.SeriesCollectionChangedInternal, this);
        }
        if (newValue instanceof Observable) {
            addWeakEventListener(newValue, ObservableArray.changeEvent, this.SeriesCollectionChangedInternal, this);
        }
    }
    SeriesCollectionChangedInternal(data) {
        this.initializer.onSeriesChanged(data, this);
    }
    onAnnotationsPropertyChanged(oldValue, newValue) {
        this.onAnnotationsChanged(oldValue, newValue);
    }
    onAnnotationsChanged(oldValue, newValue) {
        this.initializer.onAnnotationsPropertyChanged(oldValue, newValue, this);
        if (oldValue instanceof Observable) {
            removeWeakEventListener(oldValue, ObservableArray.changeEvent, this.AnnotationsCollectionChangedInternal, this);
        }
        if (newValue instanceof Observable) {
            addWeakEventListener(newValue, ObservableArray.changeEvent, this.AnnotationsCollectionChangedInternal, this);
        }
    }
    AnnotationsCollectionChangedInternal(data) {
        this.initializer.onAnnotationsChanged(data, this);
    }
    onSeriesSelectionModePropertyChanged(oldValue, newValue) {
        this.onSeriesSelectionModeChanged(oldValue, newValue);
    }
    onPointSelectionModePropertyChanged(oldValue, newValue) {
        this.onPointSelectionModeChanged(oldValue, newValue);
    }
    onAllowAnimationsPropertyChanged(oldValue, newValue) {
        this.onAllowAnimationsChanged(oldValue, newValue);
    }
    onSeriesSelectionModeChanged(oldValue, newValue) { }
    onPointSelectionModeChanged(oldValue, newValue) { }
    onAllowAnimationsChanged(oldValue, newValue) { }
}
RadChartBase.seriesSelectedEvent = 'seriesSelected';
RadChartBase.seriesDeselectedEvent = 'seriesDeselected';
RadChartBase.pointSelectedEvent = 'pointSelected';
RadChartBase.pointDeselectedEvent = 'pointDeselected';
RadChartBase.chartZoomedEvent = 'chartZoomed';
RadChartBase.chartPannedEvent = 'chartPanned';
RadChartBase.trackballTrackedSelectionEvent = 'trackballTrackedSelection';
RadChartBase.legendProperty = new Property({
    name: 'legend',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onLegendPropertyChanged(oldValue, newValue);
    }
});
RadChartBase.seriesProperty = new Property({
    name: 'series',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onSeriesPropertyChanged(oldValue, newValue);
    }
});
RadChartBase.palettesProperty = new Property({
    name: 'palettes',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onPalettesPropertyChanged(oldValue, newValue);
    }
});
RadChartBase.annotationsProperty = new Property({
    name: 'annotations',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onAnnotationsPropertyChanged(oldValue, newValue);
    }
});
RadChartBase.seriesSelectionModeProperty = new Property({
    name: 'seriesSelectionMode',
    defaultValue: ChartSelectionMode.None,
    valueConverter: value => ChartSelectionMode[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onSeriesSelectionModePropertyChanged(oldValue, newValue);
    }
});
RadChartBase.pointSelectionModeProperty = new Property({
    name: 'pointSelectionMode',
    defaultValue: ChartSelectionMode.None,
    valueConverter: value => ChartSelectionMode[toPascalCase(value)],
    valueChanged: (target, oldValue, newValue) => {
        target.onPointSelectionModePropertyChanged(oldValue, newValue);
    }
});
RadChartBase.allowAnimationsProperty = new Property({
    name: 'allowAnimations',
    defaultValue: true,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onAllowAnimationsPropertyChanged(oldValue, newValue);
    }
});
RadChartBase.legendProperty.register(RadChartBase);
RadChartBase.seriesProperty.register(RadChartBase);
RadChartBase.palettesProperty.register(RadChartBase);
RadChartBase.annotationsProperty.register(RadChartBase);
RadChartBase.seriesSelectionModeProperty.register(RadChartBase);
RadChartBase.pointSelectionModeProperty.register(RadChartBase);
RadChartBase.allowAnimationsProperty.register(RadChartBase);
let RadCartesianChart = class RadCartesianChart extends RadChartBase {
    constructor() {
        super();
        this.on('bindingContextChange', this.bindingContextChanged, this);
    }
    eachChild(callback) {
        if (this.horizontalAxis) {
            callback(this.horizontalAxis);
        }
        if (this.verticalAxis) {
            callback(this.verticalAxis);
        }
        if (this.series) {
            for (let i = 0; i < this.series.length; i++) {
                let currentSeries = this.series.getItem(i);
                callback(currentSeries);
            }
        }
    }
    onGridPropertyChanged(oldValue, newValue) {
        this.onGridChanged(oldValue, newValue);
    }
    onGridChanged(oldValue, newValue) { }
    onHorizontalAxisPropertyChanged(oldValue, newValue) {
        this.onHorizontalAxisChanged(oldValue, newValue);
    }
    onVerticalAxisPropertyChanged(oldValue, newValue) {
        this.onVerticalAxisChanged(oldValue, newValue);
    }
    onHorizontalZoomPropertyChanged(oldValue, newValue) {
        this.onHorizontalZoomChanged(oldValue, newValue);
    }
    onVerticalZoomPropertyChanged(oldValue, newValue) {
        this.onVerticalZoomChanged(oldValue, newValue);
    }
    onTrackballPropertyChanged(oldValue, newValue) {
        this.onTrackballChanged(oldValue, newValue);
    }
    onHorizontalAxisChanged(oldValue, newValue) {
        this.updateAxisBindingContext(oldValue, newValue);
    }
    onVerticalAxisChanged(oldValue, newValue) {
        this.updateAxisBindingContext(oldValue, newValue);
    }
    onHorizontalZoomChanged(oldValue, newValue) { }
    onVerticalZoomChanged(oldValue, newValue) { }
    onTrackballChanged(oldValue, newValue) {
        if (oldValue) {
            oldValue._owner = undefined;
        }
        if (newValue) {
            newValue._owner = this;
        }
    }
    updateAxisBindingContext(oldValue, newValue) {
        if (newValue) {
            newValue.bindingContext = this.bindingContext;
        }
        else {
            if (oldValue) {
                oldValue.bindingContext = null;
            }
        }
    }
    bindingContextChanged(data) {
        if (this.horizontalAxis) {
            this.horizontalAxis.bindingContext = data.value;
        }
        if (this.verticalAxis) {
            this.verticalAxis.bindingContext = data.value;
        }
    }
};
RadCartesianChart.gridProperty = new Property({
    name: 'grid',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onGridPropertyChanged(oldValue, newValue);
    }
});
RadCartesianChart.horizontalAxisProperty = new Property({
    name: 'horizontalAxis',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onHorizontalAxisPropertyChanged(oldValue, newValue);
    }
});
RadCartesianChart.verticalAxisProperty = new Property({
    name: 'verticalAxis',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onVerticalAxisPropertyChanged(oldValue, newValue);
    }
});
RadCartesianChart.verticalZoomProperty = new Property({
    name: 'verticalZoom',
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onVerticalZoomPropertyChanged(oldValue, newValue);
    }
});
RadCartesianChart.horizontalZoomProperty = new Property({
    name: 'horizontalZoom',
    defaultValue: undefined,
    valueConverter: parseFloat,
    valueChanged: (target, oldValue, newValue) => {
        target.onHorizontalZoomPropertyChanged(oldValue, newValue);
    }
});
RadCartesianChart.trackballProperty = new Property({
    name: 'trackball',
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onTrackballPropertyChanged(oldValue, newValue);
    }
});
RadCartesianChart = __decorate([
    CSSType('RadCartesianChart'),
    __metadata("design:paramtypes", [])
], RadCartesianChart);
export { RadCartesianChart };
RadCartesianChart.gridProperty.register(RadCartesianChart);
RadCartesianChart.horizontalAxisProperty.register(RadCartesianChart);
RadCartesianChart.verticalAxisProperty.register(RadCartesianChart);
RadCartesianChart.verticalZoomProperty.register(RadCartesianChart);
RadCartesianChart.horizontalZoomProperty.register(RadCartesianChart);
RadCartesianChart.trackballProperty.register(RadCartesianChart);
let RadPieChart = class RadPieChart extends RadChartBase {
    eachChild(callback) {
        if (this.series) {
            for (let i = 0; i < this.series.length; i++) {
                let currentSeries = this.series.getItem(i);
                callback(currentSeries);
            }
        }
    }
};
RadPieChart = __decorate([
    CSSType('RadPieChart')
], RadPieChart);
export { RadPieChart };
export function setupCssScope(scopedView, unscopedView) {
    const ngKey = scopedView?._ngKey;
    if (ngKey) {
        let ngValue = scopedView[ngKey];
        unscopedView[ngKey] = ngValue;
    }
    const vueKey = scopedView?._vueKey;
    if (vueKey) {
        let vueValue = scopedView[vueKey];
        unscopedView[vueKey] = vueValue;
    }
}
//# sourceMappingURL=common.js.map