import { AuthSession } from './authSession';
import { TransactionStore } from './transactionStore';
import { WebAuthError } from './webAuthError';
export class SafariAuthenticationSession extends AuthSession {
    constructor(authorizeURL, redirectURL, state = null, handler, finish, logger) {
        super(redirectURL, state, handler, finish, logger);
        this.authorizeURL = authorizeURL;
        this.authSession = new SFAuthenticationSession({
            URL: this.authorizeURL,
            callbackURLScheme: this.redirectURL.absoluteString,
            completionHandler: (url, error) => {
                if (error != null || url == null) {
                    if (1 /* CanceledLogin */ === error.code) {
                        this.finish({
                            failure: WebAuthError.userCancelled
                        });
                    }
                    else {
                        this.finish({
                            failure: new WebAuthError(error.description)
                        });
                    }
                    return TransactionStore.shared.clear();
                }
                const _ = TransactionStore.shared.resume(url, NSDictionary.dictionary());
            }
        });
        if (this.authSession != null) {
            this.authSession.start();
        }
    }
}
//# sourceMappingURL=safariAuthenticationSession.js.map