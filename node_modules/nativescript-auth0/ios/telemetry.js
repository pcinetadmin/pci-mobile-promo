import { a0_encodeBase64URLSafe } from './utils';
export class Telemetry {
    constructor() {
        this.enabled = true;
        this.info = Telemetry.generateValue();
    }
    get value() {
        return this.enabled ? this.info : undefined;
    }
    wrapped(name, version) {
        const info = Telemetry.versionInformation();
        const wrapped = {
            [Telemetry.NameKey]: name,
            [Telemetry.VersionKey]: version,
            [Telemetry.WrappedVersion]: info[Telemetry.VersionKey] || Telemetry.NoVersion
        };
        this.info = Telemetry.generateValue(wrapped);
    }
    addTelemetryHeader(request) {
        const value = this.value;
        if (value != null) {
            request.headers['Auth0-Client'] = value;
        }
        else {
            request.headers['Auth0-Client'] = null;
        }
    }
    queryItemsWithTelemetry(queryItems) {
        const items = queryItems;
        const value = this.value;
        if (value != null) {
            items.push(new NSURLQueryItem({ name: 'auth0Client', value: value }));
        }
        return items;
    }
    static versionInformation() {
        const dict = {
            [Telemetry.NameKey]: Telemetry.LibraryName,
            [Telemetry.VersionKey]: Telemetry.NoVersion,
            'swift-version': '3.2'
        };
        return dict;
    }
    static generateValue(info = Telemetry.versionInformation()) {
        let data = JSON.stringify(info);
        return a0_encodeBase64URLSafe(data);
    }
}
Telemetry.NameKey = 'name';
Telemetry.VersionKey = 'version';
Telemetry.WrappedVersion = 'lib_version';
Telemetry.NoVersion = '0.0.0';
Telemetry.LibraryName = 'Auth0.NativeScript';
export class TrackableExtension {
    /**
     Avoid Auth0.swift sending its version on every request to Auth0 API.
     By default we collect our libraries and SDKs versions to help us during support and evaluate usage.

     - parameter enabled: if Auth0.swift should send it's version on every request.
     */
    static tracking(trackable, enabled) {
        trackable.telemetry.enabled = enabled;
    }
    /**
     Send the library/framework, that has Auth0.swift as dependency, when sending telemetry information

     - parameter name:    name of library or framework that uses Auth0.swift
     - parameter version: version of library or framework
     */
    static using(trackable, name, version) {
        trackable.telemetry.wrapped(name, version);
    }
}
//# sourceMappingURL=telemetry.js.map