import { AuthenticationError } from './authenticationError';
import { HttpResponseEncoding } from '@nativescript/core/http';
import { emptyBodyError, Auth0Error } from './auth0Error';
export function plainJson(response, callback) {
    try {
        const dictionary = response.result();
        if (dictionary != null) {
            callback({
                success: dictionary
            });
        }
        else {
            callback({
                failure: new AuthenticationError(response.data.toString(HttpResponseEncoding.UTF8))
            });
        }
    }
    catch (error) {
        callback({
            failure: error
        });
    }
}
export function authenticationObject(TClass) {
    return (response, callback) => {
        try {
            const dictionary = response.result();
            const object = (dictionary != null) ? TClass.initWithJson(dictionary) : undefined;
            if (object != null) {
                callback({
                    success: object
                });
            }
            else {
                callback({
                    failure: new AuthenticationError(response.data.toString(HttpResponseEncoding.UTF8))
                });
            }
        }
        catch (error) {
            callback({
                failure: error
            });
        }
    };
}
export function noBody(response, callback) {
    try {
        const _ = response.result();
        callback({
            success: true
        });
    }
    catch (error) {
        if (error instanceof Auth0Error && error.code === emptyBodyError) {
            callback({
                success: true
            });
        }
        else {
            callback({
                failure: error
            });
        }
    }
}
//# sourceMappingURL=handlers.js.map