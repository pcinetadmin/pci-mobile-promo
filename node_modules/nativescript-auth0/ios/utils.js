export function jsArrayToNSArray(arr) {
    return NSArray.arrayWithArray(arr);
}
export function nsArrayToJSArray(a) {
    const arr = [];
    if (a !== undefined) {
        let count = a.count;
        for (let i = 0; i < count; i++) {
            arr.push(a.objectAtIndex(i));
        }
    }
    return arr;
}
export function a0_encodeBase64URLSafe(dataOrString) {
    let data;
    if (dataOrString instanceof NSData) {
        data = dataOrString;
    }
    else {
        const text = new NSString({ string: dataOrString });
        data = text.dataUsingEncoding(NSUTF8StringEncoding);
    }
    return data.base64EncodedStringWithOptions(0)
        .replace('+', '-')
        .replace('/', '_')
        .replace('=', '');
}
export function a0_url(domain) {
    let urlString;
    if (!domain.startsWith('https')) {
        urlString = `https://${domain}`;
    }
    else {
        urlString = domain;
    }
    return new NSURL({ string: urlString });
}
export function a0_fragmentValues(components) {
    const dict = {};
    if (components.fragment) {
        const items = components.fragment.split('&');
        for (const item of items) {
            let parts = item.split('=');
            if (parts.length !== 2) {
                break;
            }
            dict[parts[0]] = parts[1];
        }
    }
    return dict;
}
export function a0_queryValues(components) {
    const dict = {};
    const items = components.queryItems;
    if (items != null) {
        for (const item of nsArrayToJSArray(items)) {
            dict[item.name] = item.value;
        }
    }
    return dict;
}
export const invokeOnRunLoop = (function () {
    const runloop = CFRunLoopGetMain();
    return function (func) {
        CFRunLoopPerformBlock(runloop, kCFRunLoopDefaultMode, func);
        CFRunLoopWakeUp(runloop);
    };
}());
//# sourceMappingURL=utils.js.map