import { Device } from '@nativescript/core';
var SilentSafariViewController = /** @class */ (function (_super) {
    __extends(SilentSafariViewController, _super);
    function SilentSafariViewController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onResult = function () { };
        return _this;
    }
    SilentSafariViewController.alloc = function () {
        return _super.alloc.call(this);
    };
    SilentSafariViewController.prototype.initWithURLCallback = function (URL, callback) {
        if (Number(Device.osVersion.split('.')[0]) >= 11.0) {
            _super.prototype.initWithURLConfiguration.call(this, URL, new SFSafariViewControllerConfiguration());
        }
        else {
            _super.prototype.initWithURLEntersReaderIfAvailable.call(this, URL, false);
        }
        this.onResult = callback;
        this.delegate = this;
        this.view.alpha = 0.05; // Apple does not allow invisible SafariViews, this is the threshold.
        this.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
        return this;
    };
    SilentSafariViewController.prototype.safariViewController = function (controller, didLoadSuccessfully) {
        var _this = this;
        controller.dismissViewControllerAnimatedCompletion(false, function () {
            _this.onResult(didLoadSuccessfully);
        });
    };
    SilentSafariViewController.ObjCProtocols = [SFSafariViewControllerDelegate];
    return SilentSafariViewController;
}(SFSafariViewController));
export { SilentSafariViewController };
//# sourceMappingURL=silentSafariViewController.js.map