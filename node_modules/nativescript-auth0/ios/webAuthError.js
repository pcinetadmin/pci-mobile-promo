var WebAuthError = /** @class */ (function (_super) {
    __extends(WebAuthError, _super);
    function WebAuthError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    WebAuthError.pkceNotAllowed = function (message) {
        return new WebAuthError(message);
    };
    Object.defineProperty(WebAuthError.prototype, "errorCode", {
        get: function () {
            if (this === WebAuthError.userCancelled) {
                return WebAuthError.cancelledFoundationCode;
            }
            else {
                return WebAuthError.genericFoundationCode;
            }
        },
        enumerable: true,
        configurable: true
    });
    WebAuthError.noBundleIdentifierFound = new WebAuthError("Failed to perform webAuth");
    WebAuthError.cannotDismissWebAuthController = new WebAuthError("Failed to perform webAuth");
    WebAuthError.userCancelled = new WebAuthError("User Cancelled Web Authentication");
    WebAuthError.noNonceProvided = new WebAuthError("A nonce value must be supplied when response_type includes id_token in order to prevent replay attacks");
    WebAuthError.missingResponseParam = new WebAuthError("Failed to perform webAuth");
    WebAuthError.invalidIdTokenNonce = new WebAuthError("Could not validate the id_token");
    WebAuthError.missingAccessToken = new WebAuthError("Could not validate the token");
    WebAuthError.genericFoundationCode = 1;
    WebAuthError.cancelledFoundationCode = 0;
    WebAuthError.infoKey = "com.auth0.webauth.error.info";
    WebAuthError.errorDomain = "com.auth0.webauth";
    return WebAuthError;
}(Error));
export { WebAuthError };
//# sourceMappingURL=webAuthError.js.map