var ActivityNotFoundException = android.content.ActivityNotFoundException;
var Context = android.content.Context;
var Intent = android.content.Intent;
var PackageManager = android.content.pm.PackageManager;
var Uri = android.net.Uri;
var Build = android.os.Build;
var CustomTabsClient = androidx.browser.customtabs.CustomTabsClient;
var CustomTabsServiceConnection = androidx.browser.customtabs.CustomTabsServiceConnection;
var Log = android.util.Log;
var AtomicReference = java.util.concurrent.atomic.AtomicReference;
import { CustomTabsOptions } from './customTabsOptions';
var CustomTabsController = /** @class */ (function (_super) {
    __extends(CustomTabsController, _super);
    function CustomTabsController(context, browserPackage) {
        if (browserPackage === void 0) { browserPackage = CustomTabsController.getBestBrowserPackage(context); }
        var _this = _super.call(this) || this;
        _this.context = new WeakRef(context);
        _this.session = new AtomicReference();
        _this.sessionLatch = new Promise(function (resolve, reject) {
            _this.sessionLatchReady = resolve;
        });
        _this.preferredPackage = browserPackage;
        return global.__native(_this);
    }
    CustomTabsController.prototype.clearContext = function () {
        this.context.clear();
    };
    CustomTabsController.prototype.setCustomizationOptions = function (options) {
        this.customTabsOptions = options;
    };
    CustomTabsController.prototype.getCustomizationOptions = function () {
        return this.customTabsOptions;
    };
    CustomTabsController.prototype.onCustomTabsServiceConnected = function (componentName, customTabsClient) {
        if (customTabsClient == null) {
            return;
        }
        Log.d(CustomTabsController.TAG, "CustomTabs Service connected");
        customTabsClient.warmup(0);
        this.session.set(customTabsClient.newSession(null));
        this.sessionLatchReady(true);
    };
    CustomTabsController.prototype.onServiceDisconnected = function (componentName) {
        Log.d(CustomTabsController.TAG, "CustomTabs Service disconnected");
        this.session.set(null);
    };
    /**
     * Attempts to bind the Custom Tabs Service to the Context.
     */
    CustomTabsController.prototype.bindService = function () {
        Log.v(CustomTabsController.TAG, "Trying to bind the service");
        var context = this.context.get();
        this.isBound = false;
        if (context != null && this.preferredPackage != null) {
            this.isBound = CustomTabsClient.bindCustomTabsService(context, this.preferredPackage, this);
        }
        Log.v(CustomTabsController.TAG, "Bind request result: " + this.isBound);
    };
    /**
     * Attempts to unbind the Custom Tabs Service from the Context.
     */
    CustomTabsController.prototype.unbindService = function () {
        Log.v(CustomTabsController.TAG, "Trying to unbind the service");
        var context = this.context.get();
        if (this.isBound && context != null) {
            context.unbindService(this);
            this.isBound = false;
        }
    };
    /**
     * Opens a Uri in a Custom Tab or Browser.
     * The Custom Tab service will be given up to {@link CustomTabsController#MAX_WAIT_TIME_SECONDS} to be connected.
     * If it fails to connect the Uri will be opened on a Browser.
     * <p>
     * In the exceptional case that no Browser app is installed on the device, this method will fail silently and do nothing.
     * Please, ensure the {@link Intent#ACTION_VIEW} action can be handled before calling this method.
     *
     * @param uri the uri to open in a Custom Tab or Browser.
     */
    CustomTabsController.prototype.launchUri = function (uri) {
        var _this = this;
        var context = this.context.get();
        if (context == null) {
            Log.v(CustomTabsController.TAG, "Custom Tab Context was no numberer valid.");
            return;
        }
        if (this.customTabsOptions == null) {
            this.customTabsOptions = CustomTabsOptions.create();
        }
        setTimeout(function () { return _this.sessionLatchReady(false); }, CustomTabsController.MAX_WAIT_TIME_SECONDS * 1000);
        this.sessionLatch.then(function (available) {
            Log.d(CustomTabsController.TAG, "Launching URI. Custom Tabs available: ".concat(available));
            var intent = _this.customTabsOptions.toIntent(context, _this.session.get());
            intent.setData(uri);
            try {
                context.startActivity(intent);
            }
            catch (ex) {
                if (ex instanceof ActivityNotFoundException) {
                    Log.e(CustomTabsController.TAG, "Could not find any Browser application installed in this device to handle the intent.");
                }
                else {
                    throw ex;
                }
            }
        });
    };
    /**
     * Query the OS for a Custom Tab compatible Browser application.
     * It will pick the default browser first if is Custom Tab compatible, then any Chrome browser or the first Custom Tab compatible browser.
     *
     * @param context a valid Context
     * @return the recommended Browser application package name, compatible with Custom Tabs. Null if no compatible browser is found.
     */
    CustomTabsController.getBestBrowserPackage = function (context) {
        var pm = context.getPackageManager();
        var browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.example.com"));
        var activityResolveFlag = Build.VERSION.SDK_INT >= 23 /*Build.VERSION_CODES.M*/ ? 0x00020000 /*PackageManager.MATCH_ALL*/ : PackageManager.MATCH_DEFAULT_ONLY;
        var webHandler = pm.resolveActivity(browserIntent, activityResolveFlag);
        var defaultBrowser;
        if (webHandler != null) {
            defaultBrowser = webHandler.activityInfo.packageName;
        }
        var resolvedActivityList = pm.queryIntentActivities(browserIntent, activityResolveFlag);
        var customTabsBrowsers = [];
        for (var i = 0; i < resolvedActivityList.size(); i++) {
            var info = resolvedActivityList.get(i);
            var serviceIntent = new Intent();
            serviceIntent.setAction(CustomTabsController.ACTION_CUSTOM_TABS_CONNECTION);
            serviceIntent.setPackage(info.activityInfo.packageName);
            if (pm.resolveService(serviceIntent, 0) != null) {
                customTabsBrowsers.push(info.activityInfo.packageName);
            }
        }
        if (customTabsBrowsers.indexOf(defaultBrowser) > -1) {
            return defaultBrowser;
        }
        else if (customTabsBrowsers.indexOf(CustomTabsController.CHROME_STABLE) > -1) {
            return CustomTabsController.CHROME_STABLE;
        }
        else if (customTabsBrowsers.indexOf(CustomTabsController.CHROME_SYSTEM) > -1) {
            return CustomTabsController.CHROME_SYSTEM;
        }
        else if (customTabsBrowsers.indexOf(CustomTabsController.CHROME_BETA) > -1) {
            return CustomTabsController.CHROME_BETA;
        }
        else if (customTabsBrowsers.indexOf(CustomTabsController.CHROME_DEV) > -1) {
            return CustomTabsController.CHROME_DEV;
        }
        else if (customTabsBrowsers.length !== 0) {
            return customTabsBrowsers[0];
        }
        else {
            return null;
        }
    };
    CustomTabsController.TAG = 'CustomTabsController';
    CustomTabsController.MAX_WAIT_TIME_SECONDS = 1;
    CustomTabsController.ACTION_CUSTOM_TABS_CONNECTION = "android.support.customtabs.action.CustomTabsService";
    // Known Browsers with Custom Tabs support
    CustomTabsController.CHROME_STABLE = "com.android.chrome";
    CustomTabsController.CHROME_SYSTEM = "com.google.android.apps.chrome";
    CustomTabsController.CHROME_BETA = "com.android.chrome.beta";
    CustomTabsController.CHROME_DEV = "com.android.chrome.dev";
    return CustomTabsController;
}(CustomTabsServiceConnection));
export { CustomTabsController, CustomTabsOptions };
//# sourceMappingURL=customTabsController.js.map