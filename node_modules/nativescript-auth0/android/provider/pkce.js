var Log = android.util.Log;
import { AlgorithmHelper } from './algorithmHelper';
/**
 * Performs code exchange according to Proof Key for Code Exchange (PKCE) spec.
 */
export class PKCE {
    /**
     * Creates a new instance of this class with the given AuthenticationAPIClient.
     * The instance should be disposed after a call to getToken().
     *
     * @param apiClient   to get the OAuth Token.
     * @param redirectUri going to be used in the OAuth code request.
     * @throws IllegalStateException when either 'US-ASCII` encoding or 'SHA-256' algorithm is not available.
     * @see #isAvailable()
     */
    constructor(apiClient, redirectUri, algorithmHelper = new AlgorithmHelper()) {
        this.apiClient = apiClient;
        this.redirectUri = redirectUri;
        this.codeVerifier = algorithmHelper.generateCodeVerifier();
        this.codeChallenge = algorithmHelper.generateCodeChallenge(this.codeVerifier);
    }
    /**
     * Returns the Code Challenge generated using a Code Verifier.
     *
     * @return the Code Challenge for this session.
     */
    getCodeChallenge() {
        return this.codeChallenge;
    }
    /**
     * Performs a request to the Auth0 API to get the OAuth Token and end the PKCE flow.
     * The instance of this class must be disposed after this method is called.
     *
     * @param authorizationCode received in the call to /authorize with a "grant_type=code"
     * @param callback          to notify the result of this call to.
     */
    getToken(authorizationCode, callback) {
        this.apiClient.token(authorizationCode, this.redirectUri)
            .setCodeVerifier(this.codeVerifier)
            .start({
            onSuccess: function (payload) {
                callback.onSuccess(payload);
            },
            onFailure: function (error) {
                if ("Unauthorized" === error.getDescription()) {
                    Log.e(PKCE.TAG, `Please go to 'https://manage.auth0.com/#/applications/${this.apiClient.getClientId()}/settings' and set 'Client Type' to 'Native' to enable PKCE.`);
                }
                callback.onFailure(error);
            }
        });
    }
    /**
     * Checks if this device is capable of using the PKCE flow when performing calls to the
     * /authorize endpoint.
     *
     * @return if this device can use PKCE flow or not.
     */
    static isAvailable(algorithmHelper = new AlgorithmHelper()) {
        try {
            const input = algorithmHelper.getASCIIBytes("test");
            algorithmHelper.getSHA256(input);
        }
        catch (ignored) {
            return false;
        }
        return true;
    }
}
PKCE.TAG = 'PKCE';
//# sourceMappingURL=pkce.js.map