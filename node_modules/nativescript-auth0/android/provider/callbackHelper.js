var Uri = android.net.Uri;
var Log = android.util.Log;
var URLUtil = android.webkit.URLUtil;
export class CallbackHelper {
    /**
     * Generates the callback Uri for the given domain.
     *
     * @return the callback Uri.
     */
    static getCallbackUri(scheme, packageName, domain) {
        if (!URLUtil.isValidUrl(domain)) {
            Log.e(CallbackHelper.TAG, "The Domain is invalid and the Callback URI will not be set. You used: " + domain);
            return null;
        }
        const uri = Uri.parse(domain)
            .buildUpon()
            .scheme(scheme)
            .appendPath("android")
            .appendPath(packageName)
            .appendPath("callback")
            .build();
        Log.v(CallbackHelper.TAG, "The Callback URI is: " + uri);
        return uri.toString();
    }
    static getValuesFromUri(uri) {
        return CallbackHelper.asMap(uri.getQuery() != null ? uri.getQuery() : uri.getFragment());
    }
    static asMap(valueString) {
        if (valueString == null) {
            return {};
        }
        const entries = valueString.length > 0 ? valueString.split('&') : [];
        const values = {};
        for (const entry of entries) {
            const value = entry.split('=');
            if (value.length === 2) {
                values[value[0]] = value[1];
            }
        }
        return values;
    }
}
CallbackHelper.TAG = 'CallbackHelper';
//# sourceMappingURL=callbackHelper.js.map