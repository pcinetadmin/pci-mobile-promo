var Base64 = android.util.Base64;
var Log = android.util.Log;
var UnsupportedEncodingException = java.io.UnsupportedEncodingException;
var MessageDigest = java.security.MessageDigest;
var NoSuchAlgorithmException = java.security.NoSuchAlgorithmException;
var SecureRandom = java.security.SecureRandom;
export class AlgorithmHelper {
    getBase64String(source) {
        return Base64.encodeToString(source, Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING);
    }
    getASCIIBytes(value) {
        let input;
        try {
            const javaString = new java.lang.String(value);
            input = javaString.getBytes(AlgorithmHelper.US_ASCII);
        }
        catch (e) {
            if (e instanceof UnsupportedEncodingException) {
                Log.e(AlgorithmHelper.TAG, "Could not convert string to an ASCII byte array", e);
                throw new java.lang.IllegalStateException("Could not convert string to an ASCII byte array", e);
            }
            else {
                throw e;
            }
        }
        return input;
    }
    getSHA256(input) {
        let signature;
        try {
            const md = MessageDigest.getInstance(AlgorithmHelper.SHA_256);
            md.update(input, 0, input.length);
            signature = md.digest();
        }
        catch (e) {
            if (e instanceof NoSuchAlgorithmException) {
                Log.e(AlgorithmHelper.TAG, "Failed to get SHA-256 signature", e);
                throw new java.lang.IllegalStateException("Failed to get SHA-256 signature", e);
            }
            else {
                throw e;
            }
        }
        return signature;
    }
    generateCodeVerifier() {
        const sr = new SecureRandom();
        const code = Array.create('byte', 32);
        sr.nextBytes(code);
        return Base64.encodeToString(code, Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING);
    }
    generateCodeChallenge(codeVerifier) {
        const input = this.getASCIIBytes(codeVerifier);
        const signature = this.getSHA256(input);
        return this.getBase64String(signature);
    }
}
AlgorithmHelper.TAG = 'AlgorithmHelper';
AlgorithmHelper.US_ASCII = "US-ASCII";
AlgorithmHelper.SHA_256 = "SHA-256";
//# sourceMappingURL=algorithmHelper.js.map