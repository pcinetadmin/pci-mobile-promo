var Locale = java.util.Locale;
import { Telemetry } from '../../util/telemetry';
import { VoidRequest } from './voidRequest';
import { Credentials } from '../../../common/credentials';
import { SimpleRequest } from './simpleRequest';
import { BaseAuthenticationRequest } from './baseAuthenticationRequest';
export class RequestFactory {
    constructor(bearerToken) {
        this.headers = {};
        this.headers[RequestFactory.ACCEPT_LANGUAGE_HEADER] = RequestFactory.getDefaultLocale();
        if (bearerToken != null) {
            this.headers[RequestFactory.AUTHORIZATION_HEADER] = `Bearer ${bearerToken}`;
        }
    }
    setClientInfo(clientInfo) {
        this.headers[RequestFactory.CLIENT_INFO_HEADER] = clientInfo;
    }
    setUserAgent(userAgent) {
        this.headers[RequestFactory.USER_AGENT_HEADER] = userAgent;
    }
    authenticationPOST(url) {
        const request = this.createAuthenticationRequest(url, "POST");
        this.addMetrics(request);
        return request;
    }
    POST() {
        if (arguments.length > 2) {
            const request = this.createSimpleRequest(arguments[0], "POST", arguments[1], arguments[2]);
            this.addMetrics(request);
            return request;
        }
        else {
            const request = this.createVoidRequest(arguments[0], "POST", arguments[1]);
            this.addMetrics(request);
            return request;
        }
    }
    PATCH(url, adapter, errorBuilder) {
        const request = this.createSimpleRequest(url, "PATCH", adapter, errorBuilder);
        this.addMetrics(request);
        return request;
    }
    DELETE(url, adapter, errorBuilder) {
        const request = this.createSimpleRequest(url, "DELETE", adapter, errorBuilder);
        this.addMetrics(request);
        return request;
    }
    GET(url, adapter, errorBuilder) {
        const request = this.createSimpleRequest(url, "GET", adapter, errorBuilder);
        this.addMetrics(request);
        return request;
    }
    addMetrics(request) {
        for (const entry in this.headers) {
            request.addHeader(entry, this.headers[entry]);
        }
    }
    createSimpleRequest(url, method, adapter, errorBuilder) {
        return new SimpleRequest(url, method, adapter, errorBuilder);
    }
    createAuthenticationRequest(url, method) {
        return new BaseAuthenticationRequest(url, method, Credentials);
    }
    createVoidRequest(url, method, errorBuilder) {
        return new VoidRequest(url, method, errorBuilder);
    }
    getHeaders() {
        return this.headers;
    }
    static getDefaultLocale() {
        const language = Locale.getDefault().toString();
        return language !== '' ? language : RequestFactory.DEFAULT_LOCALE_IF_MISSING;
    }
}
RequestFactory.DEFAULT_LOCALE_IF_MISSING = "en_US";
RequestFactory.AUTHORIZATION_HEADER = "Authorization";
RequestFactory.USER_AGENT_HEADER = "User-Agent";
RequestFactory.ACCEPT_LANGUAGE_HEADER = "Accept-Language";
RequestFactory.CLIENT_INFO_HEADER = Telemetry.HEADER_NAME;
//# sourceMappingURL=requestFactory.js.map