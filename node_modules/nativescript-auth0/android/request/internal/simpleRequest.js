import { HttpResponseEncoding } from '@nativescript/core/http';
var IOException = java.io.IOException;
import { BaseRequest } from './baseRequest';
import { Auth0Exception } from '../../auth0Exception';
export class SimpleRequest extends BaseRequest {
    constructor() {
        const url = arguments[0], httpMethod = arguments[1];
        if (arguments.length > 3) {
            const clazz = arguments[2];
            const errorBuilder = arguments[3];
            super(url, clazz, errorBuilder);
        }
        else {
            const clazz = { initWithJson: () => null };
            const errorBuilder = arguments[2];
            super(url, clazz, errorBuilder);
        }
        this.method = httpMethod;
    }
    onResponse(response) {
        if (response.statusCode >= 400) {
            this.postOnFailure(this.parseUnsuccessfulResponse(response));
            return;
        }
        try {
            const body = response.content.toJSON(HttpResponseEncoding.UTF8);
            const payload = this.getAdapter().initWithJson(body);
            this.postOnSuccess(payload);
        }
        catch (e) {
            if (e instanceof IOException) {
                const auth0Exception = new Auth0Exception(`Failed to parse response to request to ${this.url} - ${e.toString()}`);
                this.postOnFailure(this.getErrorBuilder().from("Failed to parse a successful response", auth0Exception));
            }
            else {
                throw e;
            }
        }
    }
    doBuildRequest() {
        const sendBody = this.method === "HEAD" || this.method === "GET";
        return Object.assign({}, this.newRequestOptions(this.method), {
            content: sendBody ? undefined : this.buildBody()
        });
    }
}
//# sourceMappingURL=simpleRequest.js.map