/**
 * Builder for Auth0 Authentication API parameters
 * You can build your parameters like this
 * <pre>
 * {@code
 * parameters: { [key: string]: any } = ParameterBuilder.newBuilder()
 *      .setClientId("{CLIENT_ID}")
 *      .setConnection("{CONNECTION}")
 *      .set("{PARAMETER_NAME}", "{PARAMETER_VALUE}")
 *      .asDictionary();
 * }
 * </pre>
 *
 * @see ParameterBuilder#newBuilder()
 * @see ParameterBuilder#newAuthenticationBuilder()
 */
export class ParameterBuilder {
    constructor(parameters) {
        if (parameters == null) {
            throw new java.lang.IllegalArgumentException("Must provide non-null parameters");
        }
        this.parameters = Object.assign({}, parameters);
    }
    /**
     * Sets the 'client_id' parameter
     *
     * @param clientId the application's client id
     * @return itself
     */
    setClientId(clientId) {
        return this.setParameter(ParameterBuilder.CLIENT_ID_KEY, clientId);
    }
    /**
     * Sets the 'grant_type' parameter
     *
     * @param grantType grant type
     * @return itself
     */
    setGrantType(grantType) {
        return this.setParameter(ParameterBuilder.GRANT_TYPE_KEY, grantType);
    }
    /**
     * Sets the 'connection' parameter
     *
     * @param connection name of the connection
     * @return itself
     */
    setConnection(connection) {
        return this.setParameter(ParameterBuilder.CONNECTION_KEY, connection);
    }
    /**
     * Sets the 'realm' parameter. A realm identifies the host against which the authentication will be made, and usually helps to know which username and password to use.
     *
     * @param realm name of the realm
     * @return itself
     */
    setRealm(realm) {
        return this.setParameter(ParameterBuilder.REALM_KEY, realm);
    }
    /**
     * Sets the 'scope' parameter.
     *
     * @param scope a scope value
     * @return itself
     */
    setScope(scope) {
        return this.setParameter(ParameterBuilder.SCOPE_KEY, scope);
    }
    /**
     * Sets the 'audience' parameter.
     *
     * @param audience an audience value
     * @return itself
     */
    setAudience(audience) {
        return this.setParameter(ParameterBuilder.AUDIENCE_KEY, audience);
    }
    /**
     * Sets the 'access_token' parameter
     *
     * @param accessToken a access token
     * @return itself
     */
    setAccessToken(accessToken) {
        return this.setParameter(ParameterBuilder.ACCESS_TOKEN_KEY, accessToken);
    }
    /**
     * Sets the 'refresh_token' parameter
     *
     * @param refreshToken a access token
     * @return itself
     */
    setRefreshToken(refreshToken) {
        return this.setParameter(ParameterBuilder.REFRESH_TOKEN_KEY, refreshToken);
    }
    /**
     * Sets a parameter
     *
     * @param key   parameter name
     * @param value parameter value. A null value will remove the key if present.
     * @return itself
     */
    setParameter(key, value) {
        if (value == null) {
            delete this.parameters[key];
        }
        else {
            this.parameters[key] = value;
        }
        return this;
    }
    /**
     * Adds all parameter from a map
     *
     * @param parameters map with parameters to add. Null values will be skipped.
     * @return itself
     */
    addAll(parameters) {
        if (parameters != null) {
            for (const k in parameters) {
                if (parameters[k] != null) {
                    this.parameters[k] = parameters[k];
                }
            }
        }
        return this;
    }
    /**
     * Clears all existing parameters
     *
     * @return itself
     */
    clearAll() {
        this.parameters.clear();
        return this;
    }
    /**
     * Create a {@link Map} with all the parameters
     *
     * @return all parameters added previously as a {@link Map}
     */
    asDictionary() {
        return Object.assign({}, this.parameters);
    }
    /**
     * Creates a new instance of the builder using default values for login request, e.g. 'openid' for scope.
     *
     * @return a new builder
     */
    static newAuthenticationBuilder() {
        return ParameterBuilder
            .newBuilder()
            .setScope(ParameterBuilder.SCOPE_OPENID);
    }
    /**
     * Creates a new instance of the builder.
     * This builder may have some initial parameters.
     *
     * @param parameters initial parameters
     * @return a new builder
     */
    static newBuilder(parameters) {
        return new ParameterBuilder(parameters || {});
    }
}
ParameterBuilder.GRANT_TYPE_REFRESH_TOKEN = "refresh_token";
ParameterBuilder.GRANT_TYPE_PASSWORD = "password";
ParameterBuilder.GRANT_TYPE_PASSWORD_REALM = "http://auth0.com/oauth/grant-type/password-realm";
ParameterBuilder.GRANT_TYPE_AUTHORIZATION_CODE = "authorization_code";
ParameterBuilder.GRANT_TYPE_MFA_OTP = "http://auth0.com/oauth/grant-type/mfa-otp";
ParameterBuilder.SCOPE_OPENID = "openid";
ParameterBuilder.SCOPE_OFFLINE_ACCESS = "openid offline_access";
ParameterBuilder.ID_TOKEN_KEY = "id_token";
ParameterBuilder.SCOPE_KEY = "scope";
ParameterBuilder.REFRESH_TOKEN_KEY = "refresh_token";
ParameterBuilder.CONNECTION_KEY = "connection";
ParameterBuilder.REALM_KEY = "realm";
ParameterBuilder.ACCESS_TOKEN_KEY = "access_token";
ParameterBuilder.CLIENT_ID_KEY = "client_id";
ParameterBuilder.GRANT_TYPE_KEY = "grant_type";
ParameterBuilder.AUDIENCE_KEY = "audience";
//# sourceMappingURL=parameterBuilder.js.map