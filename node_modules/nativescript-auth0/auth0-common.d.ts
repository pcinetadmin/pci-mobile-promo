import { Credentials } from './common/credentials';
import { UserInfo } from './common/userInfo';
export declare enum ResponseType {
    CODE = 1,
    TOKEN = 2,
    ID_TOKEN = 4
}
export interface WebAuthOptions {
    audience?: string;
    connection?: string;
    nonce?: string;
    responseType?: ResponseType;
    scheme?: string;
    scope?: string;
    state?: string;
    parameters?: {
        [param: string]: string;
    };
}
export declare class WebAuthException extends Error {
    constructor(message: any);
}
export declare abstract class Auth0Common {
    protected clientId: string;
    protected domain: string;
    constructor(clientId: string, domain: string);
    abstract webAuthentication(options: WebAuthOptions): Promise<Credentials>;
    abstract renewCredentials(refreshToken: string): Promise<Credentials>;
    abstract revokeRefreshToken(refreshToken: string): Promise<void>;
    abstract getUserInfo(accessToken: string): Promise<UserInfo>;
    abstract logoutUser(federated: boolean): Promise<boolean | string>;
}
